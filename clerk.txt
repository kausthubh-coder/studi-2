# https://clerk.com/docs/ llms-full.txt

## Clerk Documentation
[Skip to main content](https://clerk.com/docs#main)

# Welcome to Clerk Docs

Find all the guides and resources you need to develop with Clerk.

## [Quickstarts&Tutorials](https://clerk.com/docs/quickstarts/overview)

Explore our end-to-end tutorials and getting started guides for different application stacks using Clerk.

## [UIComponents](https://clerk.com/docs/components/overview)

Clerk's prebuilt UI components give you a beautiful, fully-functional user management experience in minutes.

## [APIReference](https://clerk.com/docs/references/overview)

Dig into our API reference documentation and SDKs. We have everything you need to get started setting up authentication with Clerk.

## [Security](https://clerk.com/docs/security/overview)

Account security is the top concern of every feature we build. This documentation lists some of the many protections included with Clerk.

## [Explore by frontend framework](https://clerk.com/docs\#explore-by-frontend-framework)

### [Next.js](https://clerk.com/docs/quickstarts/nextjs)

Easily add secure, beautiful, and fast authentication to Next.js with Clerk.

### [React](https://clerk.com/docs/quickstarts/react)

Get started installing and initializing Clerk in a new React + Vite app.

### [Astro](https://clerk.com/docs/quickstarts/astro)

Easily add secure and SSR-friendly authentication to your Astro application with Clerk.

### [ChromeExtension](https://clerk.com/docs/quickstarts/chrome-extension)

Use the Chrome Extension SDK to authenticate users in your Chrome extension.

### [Expo](https://clerk.com/docs/quickstarts/expo)

Use Clerk with Expo to authenticate users in your React Native application.

### [iOSBeta](https://clerk.com/docs/quickstarts/ios)

Use the Clerk iOS SDK to authenticate users in your native Apple applications.

### [JavaScript](https://clerk.com/docs/quickstarts/javascript)

The Clerk JavaScript SDK gives you access to prebuilt components and helpers to make user authentication easier.

### [Nuxt](https://clerk.com/docs/quickstarts/nuxt)

Easily add secure, beautiful, and fast authentication to Nuxt with Clerk.

### [ReactRouter](https://clerk.com/docs/quickstarts/react-router)

Easily add secure, edge- and SSR-friendly authentication to React Router with Clerk.

### [Remix](https://clerk.com/docs/quickstarts/remix)

Easily add secure, edge- and SSR-friendly authentication to Remix with Clerk.

![tanstack start logo](<Base64-Image-Removed>)

### [TanStackStartBeta](https://clerk.com/docs/quickstarts/tanstack-start)

Easily add secure and SSR-friendly authentication to your TanStack Start application with Clerk.

### [Vue](https://clerk.com/docs/quickstarts/vue)

Get started installing and initializing Clerk in a new Vue + Vite app.

## [Explore by backend framework](https://clerk.com/docs\#explore-by-backend-framework)

### [JSBackendSDK](https://clerk.com/docs/references/backend/overview)

The Clerk Backend SDK exposes our Backend API resources and low-level authentication utilities for JavaScript environments.

### [C\#](https://github.com/clerk/clerk-sdk-csharp/blob/main/README.md)

The Clerk C# SDK is a wrapper around our Backend API to make it easier to integrate Clerk into your backend.

### [Express](https://clerk.com/docs/quickstarts/express)

Quickly add authentication and user management to your Express application.

### [Go](https://clerk.com/docs/references/go/overview)

The Clerk Go SDK is a wrapper around the Backend API written in Golang to make it easier to integrate Clerk into your backend.

### [Fastify](https://clerk.com/docs/quickstarts/fastify)

Build secure authentication and user management flows for your Fastify server.

### [Python](https://github.com/clerk/clerk-sdk-python/blob/main/README.md)

The Clerk Python SDK is a wrapper around the Backend API written in Python to make it easier to integrate Clerk into your backend.

### [RubyonRails](https://clerk.com/docs/quickstarts/ruby)

Integrate authentication and user management into your Ruby application.

## [Explore by feature](https://clerk.com/docs\#explore-by-feature)

### [Authentication](https://clerk.com/docs/authentication/overview)

Clerk supports multiple authentication strategies so you can implement the strategy that makes sense for your users.

### [Usermanagement](https://clerk.com/docs/users/overview)

Complete user management. Add sign up, sign in, and profile management to your application in minutes.

### [Databaseintegrations](https://clerk.com/docs/integrations/overview)

Enable Clerk-managed users to authenticate and interact directly with your database with Clerk's integrations.

### [Customization](https://clerk.com/docs/customization/overview)

Clerk's components can be customized to match the look and feel of your application.

### [Organizations](https://clerk.com/docs/organizations/overview)

Organizations are shared accounts, useful for project and team leaders. Members with elevated privileges can manage member access to the organization's data and resources.

### [SDKs](https://clerk.com/docs/references/overview)

Clerk's SDKs allow you to call the Clerk server API without having to implement the calls yourself.

## [Learn the concepts](https://clerk.com/docs\#learn-the-concepts)

![](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fhome%2Fwhat-is-clerk.png&w=2048&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)![](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fhome%2Fwhat-is-clerk-dark.png&w=2048&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

### [WhatisClerkauthentication?](https://clerk.com/docs/authentication/overview)

Clerk offers multiple authentication strategies to identify legitimate users of your application, and to allow them to make authenticated requests to your backend.

![](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fhome%2Fuser-object.png&w=2048&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)![](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fhome%2Fuser-object-dark.png&w=2048&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

### [Whatisthe"User"object?](https://clerk.com/docs/users/overview)

The User object contains all account information that describes a user of your app in Clerk. Users can authenticate and manage their accounts, update their personal and contact info, or set up security features for their accounts.

![](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fhome%2Forganizations.png&w=2048&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)![](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fhome%2Forganizations-dark.png&w=2048&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

### [Howdoorganizationswork?](https://clerk.com/docs/organizations/overview)

Organizations allow members to collaborate across shared resources. Each member of an organization needs to have a user account in your application. All organization members have access to most of the organization resources, but some members can take advantage of administrative features.

## [Join our Discord](https://clerk.com/discord)

Join our official Discord server to chat with us directly and become a part of the Clerk community.

Join Discord

Join Discord

## [Need help?](https://clerk.com/support)

Contact us through Discord, Twitter, or email to receive answers to your questions and learn more about Clerk.

Get help

Get help

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/index.mdx)

Last updated onMar 7, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628858973&cv=11&fst=1741628858973&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs&hn=www.googleadservices.com&frm=0&tiba=Welcome%20to%20Clerk%20Docs&npa=0&pscdl=noapi&auid=1794432333.1741628859&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Next.js Blog App
[Skip to main content](https://clerk.com/docs/drizzle#main)

01. [Create a Next.js + Clerk app](https://clerk.com/docs/drizzle#create-a-next-js-clerk-app)
    1. [Create a Clerk application](https://clerk.com/docs/drizzle#create-a-clerk-application)
    2. [Set your Clerk API keys](https://clerk.com/docs/drizzle#set-your-clerk-api-keys)
02. [Install dependencies and test your app](https://clerk.com/docs/drizzle#install-dependencies-and-test-your-app)
03. [Install Drizzle](https://clerk.com/docs/drizzle#install-drizzle)
04. [Configure Drizzle](https://clerk.com/docs/drizzle#configure-drizzle)
05. [Install `@vercel/postgres`](https://clerk.com/docs/drizzle#install-vercel-postgres)
06. [Deploy to Vercel](https://clerk.com/docs/drizzle#deploy-to-vercel)
07. [Spin up a database](https://clerk.com/docs/drizzle#spin-up-a-database)
08. [Update your Vercel environment variables](https://clerk.com/docs/drizzle#update-your-vercel-environment-variables)
09. [Create a database model](https://clerk.com/docs/drizzle#create-a-database-model)
10. [Update your database schema](https://clerk.com/docs/drizzle#update-your-database-schema)
11. [Set up Prisma Client](https://clerk.com/docs/drizzle#set-up-prisma-client)
    1. [Query your database](https://clerk.com/docs/drizzle#query-your-database)
    2. [Query a single record](https://clerk.com/docs/drizzle#query-a-single-record)
    3. [Create a new post](https://clerk.com/docs/drizzle#create-a-new-post)
12. [Install tRPC, `@tanstack/react-query`, and `zod`](https://clerk.com/docs/drizzle#install-t-rpc-tanstack-react-query-and-zod)
13. [Create a tRPC server](https://clerk.com/docs/drizzle#create-a-t-rpc-server)
    1. [Create a tRPC endpoint](https://clerk.com/docs/drizzle#create-a-t-rpc-endpoint)
    2. [Connect the tRPC router to your App Router](https://clerk.com/docs/drizzle#connect-the-t-rpc-router-to-your-app-router)
14. [Create a tRPC client](https://clerk.com/docs/drizzle#create-a-t-rpc-client)
15. [Create a Tanstack Query + tRPC provider](https://clerk.com/docs/drizzle#create-a-tanstack-query-t-rpc-provider)
16. [Use the tRPC client to fetch and mutate data](https://clerk.com/docs/drizzle#use-the-t-rpc-client-to-fetch-and-mutate-data)
    1. [Use tRPC to fetch a single post](https://clerk.com/docs/drizzle#use-t-rpc-to-fetch-a-single-post)
    2. [Use tRPC to create a new post](https://clerk.com/docs/drizzle#use-t-rpc-to-create-a-new-post)
17. [Create protected procedures (optional)](https://clerk.com/docs/drizzle#create-protected-procedures-optional)
18. [Finished!](https://clerk.com/docs/drizzle#finished)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/drizzle.mdx)

In this tutorial, you'll build a Next.js App Router app with Clerk, Drizzle, tRPC, and many other modern and popular technologies. The app will be a simple blog app that allows you to create and display posts.

The tech stack you'll use:

- Next.js App Router
- Clerk (Authentication)
- Drizzle (Database ORM)
- Vercel (Deploying your app and creating your database)
- Neon (Postgres database)
- tRPC (Type-safe API endpoint wrapper)
- Tanstack Query (Data fetching and caching)
- Zod (Schema validation)
- Tailwind (Styling your app)

First, you'll create a Next.js App Router app with Clerk. Then, you'll get your app up and running using Prisma. To do this, you'll create a Neon database in Vercel, deploy your app to Vercel, and build functionality in your app to use Prisma to create and display posts. You can stop here, or you can continue on to add tRPC and zod to your app for enhanced type-safety. You'll set up your tRPC server and create endpoints/procedures for your queries and mutations. Then you'll set up your tRPC client and replace the Prisma queries and mutations with the tRPC procedures using Tanstack Query. Lastly, you'll learn how to create protected procedures using Clerk's authentication context.

> Check out the finished product in Clerk's demo repository:
> [https://github.com/clerk/clerk-nextjs-trpc⁠](https://github.com/clerk/clerk-nextjs-trpc)

## [Create a Next.js + Clerk app](https://clerk.com/docs/drizzle\#create-a-next-js-clerk-app)

To create a Next.js app with Clerk, follow the [quickstart in the Clerk Docs⁠](https://clerk.com/docs/quickstarts/nextjs).

Or, you can clone the [Clerk repository⁠](https://github.com/clerk/clerk-nextjs-app-quickstart), which is the result of following the quickstart:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
gh repo clone clerk/clerk-nextjs-app-quickstart
```

### [Create a Clerk application](https://clerk.com/docs/drizzle\#create-a-clerk-application)

The Clerk quickstart gets you started with Clerk in keyless mode, which allows you to try Clerk's authentication features in your app without having to create a Clerk account. You will want to create a Clerk account and an application in the [Clerk Dashboard⁠](https://dashboard.clerk.com/). The Clerk Dashboard is where you, as the application owner, can manage your application's settings, users, and organizations. For example, if you want to enable phone number authentication, multi-factor authentication, social providers like Google, delete users, or create organizations, you can do all of this and more in the Clerk Dashboard.

### [Set your Clerk API keys](https://clerk.com/docs/drizzle\#set-your-clerk-api-keys)

You need to set your Clerk API keys in your app so that your app can use the configuration settings that you set in the Clerk Dashboard.

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable and Secret Keys.
3. In your `.env` file, set the `CLERK_PUBLISHABLE_KEY` and `CLERK_SECRET_KEY` environment variables to the values you copied from the Clerk Dashboard.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
CLERK_SECRET_KEY={{secret_key}}
```

## [Install dependencies and test your app](https://clerk.com/docs/drizzle\#install-dependencies-and-test-your-app)

While developing, it's best practice to keep your project running so that you can test your changes as you work. So, let's make sure the app is working as expected.

1. Run the following commands to install the dependencies and start the development server:









```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
npm install
npm run dev
```

2. Visit your app at `http://localhost:3000`. It should render a new Next.js app, but with a "Sign in" and "Sign up" button in the top right corner.

3. Select the "Sign in" button. You should be redirected to your Clerk [Account Portal sign-in⁠](https://clerk.com/docs/account-portal/overview#sign-in) page, which renders Clerk's [`<SignIn />`⁠](https://clerk.com/docs/components/sign-in) component. The `<SignIn />` component will look different depending on the configuration of your Clerk instance.

4. Sign in to your Clerk application.
5. You should be redirected back to your app, where you should see Clerk's [`<UserButton />`⁠](https://clerk.com/docs/components/user/user-button) component in the top right corner.

## [Install Drizzle](https://clerk.com/docs/drizzle\#install-drizzle)

Run the following commands to install Drizzle and the `dotenv` package to load environment variables:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
npm install drizzle-orm drizzle-kit dotenv
```

## [Configure Drizzle](https://clerk.com/docs/drizzle\#configure-drizzle)

You must configure Drizzle to connect to your database, and tell Drizzle where everything in your app is with a configuration file.

1. Create a `db` directory in the root of your project.
2. In the `db` directory, create a `drizzle.ts` file with the following code:









```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { config } from 'dotenv'
import { drizzle } from 'drizzle-orm/neon-http'

config({ path: '.env' })

export const db = drizzle(process.env.DATABASE_URL!)
```

3. At the root of your app, create a `drizzle.config.ts` file with the following code:









```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { config } from 'dotenv'
import { defineConfig } from 'drizzle-kit'

config({ path: '.env' })

export default defineConfig({
     schema: './db/schema.ts',
     out: './migrations',
     dialect: 'postgresql',
     dbCredentials: {
       url: process.env.DATABASE_URL!,
     },
})
```


## [Install `@vercel/postgres`](https://clerk.com/docs/drizzle\#install-vercel-postgres)

Because you'll be using Vercel to create your database, you must install the `@vercel/postgres` package to connect to your database.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
npm i @vercel/postgres
```

## [Deploy to Vercel](https://clerk.com/docs/drizzle\#deploy-to-vercel)

Before you can create a database using Vercel, you first need to deploy your app to Vercel.

1. Create a repository on GitHub for your app. If you're not sure how to do this, follow the [GitHub docs⁠](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-new-repository).
2. Go to [Vercel⁠](https://vercel.com/) and add a new project. While going through the process, select the **Environment Variables** dropdown, and add your Clerk Publishable and Secret Keys.

3. Select **Deploy** to deploy your app to Vercel.
4. Select the **Settings** tab.
5. In the left sidenav, select **Functions**.
6. Under **Function Region**, there should be a tag next to one of the continents. Select the continent where the tag is, and the dropdown will reveal what regions on Vercel's network that your Vercel Functions will execute in. Take note of the region. Keep the Vercel dashboard open.


## [Spin up a database](https://clerk.com/docs/drizzle\#spin-up-a-database)

1. While still in Vercel's dashboard, select the **Storage** tab.
2. Select **Create Database**.
3. Select **Neon** as the database provider and select **Continue**.
4. Select the **Region** dropdown and select the region you noted earlier. You want your database's region to match your Vercel Functions region for optimal performance.
5. Select **Continue**.
6. When connecting to the database, select **Advanced options** and under **Environment Variables Prefix**, enter “DATABASE” so that the environment variable is “DATABASE\_URL”. Then select **Connect**.
7. Copy the environment variables and add them to your `.env` file. They should look something like this:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
# Recommended for most uses
DATABASE_URL=***

# For uses requiring a connection without pgbouncer
DATABASE_URL_UNPOOLED=***

# Parameters for constructing your own connection string
PGHOST=***
PGHOST_UNPOOLED=***
PGUSER=***
PGDATABASE=***
PGPASSWORD=***

# Parameters for Vercel Postgres Templates
POSTGRES_URL=***
POSTGRES_URL_NON_POOLING=***
POSTGRES_USER=***
POSTGRES_HOST=***
POSTGRES_PASSWORD=***
POSTGRES_DATABASE=***
POSTGRES_URL_NO_SSL=***
POSTGRES_PRISMA_URL=***
```

## [Update your Vercel environment variables](https://clerk.com/docs/drizzle\#update-your-vercel-environment-variables)

When you add new environment variables to your `.env` file, don't forget to update your Vercel environment variables.

1. In Vercel's dashboard, select the **Settings** tab.
2. In the left sidenav, select **Environment Variables**.
3. Add the new environment variables to your Vercel environment variables. You don't have to copy and paste them one by one; you can copy the entire block of code and paste it into Vercel.
4. Select **Save**.

## [Create a database model](https://clerk.com/docs/drizzle\#create-a-database-model)

1. In the `db` directory, create a `schema.ts` file with the following code:









```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { integer, sqliteTable, text } from 'drizzle-orm/sqlite-core'

export const posts = sqliteTable('posts', {
     id: integer('id').primaryKey(),
     title: text('title'),
     content: text('content'),
     authorId: integer('author_id'),
})
```


## [Update your database schema](https://clerk.com/docs/drizzle\#update-your-database-schema)

To generate migrations using drizzle-kit, run the following command:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
npx drizzle-kit generate
```

These migrations are stored in the drizzle/migrations directory, as specified in your drizzle.config.ts. This directory will contain the SQL files necessary to update your database schema and a meta folder for storing snapshots of the schema at different migration stages.

To run the migrations, run the following command:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
npx drizzle-kit migrate
```

## [Set up Prisma Client](https://clerk.com/docs/drizzle\#set-up-prisma-client)

Now it's time to set up the Prisma Client and connect it to your database.

Run the following command to create a new `lib` directory and add a `prisma.ts` file to it.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
mkdir -p lib && touch lib/prisma.ts
```

Now, add the following code to your `lib/prisma.ts` file:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const globalForPrisma = global as unknown as { prisma: typeof prisma }

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

export default prisma
```

This file creates a Prisma Client and attaches it to the global object so that only one instance of the client is created in your application. This helps resolve issues with hot reloading that can occur when using Prisma ORM with Next.js in development mode.

### [Query your database](https://clerk.com/docs/drizzle\#query-your-database)

Now that all of the set up is complete, it's time to start building out your app!

Let's start with your homepage. Add the following code to your `app/page.tsx` file:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import prisma from '@/lib/prisma' // Import the Prisma Client
import Link from 'next/link'

export default async function Page() {
  const posts = await prisma.post.findMany() // Query the `Post` model for all posts

  // Display the posts on the homepage
  return (
    <div className="min-h-screen flex flex-col items-center justify-center -mt-16">
      <h1 className="text-4xl font-bold mb-8">Posts</h1>
      <ul className="max-w-2xl space-y-4 mb-8">
        {posts.map((post) => (
          <li key={post.id}>
            <Link href={`/posts/${post.id}`} className="hover:underline">
              <span className="font-semibold">{post.title}</span>
              <span className="text-sm ml-2">by {post.authorId}</span>
            </Link>
          </li>
        ))}
      </ul>
      <Link
        href="/posts/create"
        className="inline-block border-2 border-current text-current px-4 py-2 rounded-lg hover:scale-[0.98] transition-all"
      >
        Create New Post
      </Link>
    </div>
  )
}
```

This code fetches all posts from your database and displays them on the homepage, showing the title and author ID for each post. It uses the [`prisma.post.findMany()`⁠](https://www.prisma.io/docs/orm/reference/prisma-client-reference?utm_source=docs#findmany) method, which is a Prisma Client method that retrieves all records from the database.

That shows how to query for all records, but how do you query for a single record?

### [Query a single record](https://clerk.com/docs/drizzle\#query-a-single-record)

Let's add a page that displays a single post.

1. In `app/`, create a new `posts` directory.
2. In `posts/`, create an `[id]` directory.
3. In `posts/[id]`, add a `page.tsx` file.

Add the following code to your `app/posts/[id]/page.tsx` file:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import prisma from '@/lib/prisma'
import { use } from 'react'

export default async function Post({ params }: { params: Promise<{ id: string }> }) {
  // Params are wrapped in a promise, so we need to unwrap them using React's `use()` hook
  const unwrappedParams = use(params)
  const { id } = unwrappedParams
  const post = await prisma.post.findUnique({
    where: { id: parseInt(id) },
  })

  if (!post) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center -mt-16">
        <div>No post found.</div>
      </div>
    )
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center -mt-16">
      {post && (
        <article className="w-full max-w-2xl">
          <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold mb-2 ">{post.title}</h1>
          <p className="text-sm sm:text-base">by {post.authorId}</p>
          <div className="prose prose-gray prose-sm sm:prose-base lg:prose-lg mt-4 sm:mt-8">
            {post.content || 'No content available.'}
          </div>
        </article>
      )}
    </div>
  )
}
```

This code uses the URL parameters to get the post's ID, and then fetches it from your database and displays it on the page, showing the title, author ID, and content. It uses the [`prisma.post.findUnique()`⁠](https://www.prisma.io/docs/orm/reference/prisma-client-reference?utm_source=docs#findunique) method, which is a Prisma Client method that retrieves a single record from the database.

Test the page by navigating to a post's URL. For example, `http://localhost:3000/posts/1`. For now, it should show a "No post found" message because you haven't created any posts yet. Let's add a way to create posts.

### [Create a new post](https://clerk.com/docs/drizzle\#create-a-new-post)

1. In `app/posts/`, create a new `create` directory.
2. In `posts/create`, add a `page.tsx` file.

Add the following code to your `app/posts/create/page.tsx` file:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import Form from 'next/form'
import prisma from '@/lib/prisma'
import { redirect } from 'next/navigation'
import { SignInButton, useAuth } from '@clerk/nextjs'
import { revalidatePath } from 'next/cache'
import { auth } from '@clerk/nextjs/server'

export default async function NewPost() {
  const { userId } = await auth()

  // Protect this page from unauthenticated users
  if (!userId) {
    return (
      <div className="flex flex-col items-center justify-center h-[calc(100vh-4rem)] space-y-4">
        <p>You must be signed in to create a post.</p>
        <SignInButton>
          <button
            type="submit"
            className="inline-block border-2 border-current text-current px-4 py-2 rounded-lg hover:scale-[0.98] transition-all cursor-pointer"
          >
            Sign in
          </button>
        </SignInButton>
      </div>
    )
  }

  async function createPost(formData: FormData) {
    'use server'

    // Type check
    if (!userId) return

    const title = formData.get('title') as string
    const content = formData.get('content') as string

    await prisma.post.create({
      data: {
        title,
        content,
        authorId: userId,
      },
    })

    revalidatePath('/')
    redirect('/')
  }

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Create New Post</h1>
      <Form action={createPost} className="space-y-6">
        <div>
          <label htmlFor="title" className="block text-lg mb-2">
            Title
          </label>
          <input
            type="text"
            id="title"
            name="title"
            placeholder="Enter your post title"
            className="w-full px-4 py-2 border rounded-lg"
          />
        </div>
        <div>
          <label htmlFor="content" className="block text-lg mb-2">
            Content
          </label>
          <textarea
            id="content"
            name="content"
            placeholder="Write your post content here..."
            rows={6}
            className="w-full px-4 py-2 border rounded-lg"
          />
        </div>
        <button
          type="submit"
          className="inline-block border-2 border-current text-current px-4 py-2 rounded-lg hover:scale-[0.98] transition-all w-full"
        >
          Create Post
        </button>
      </Form>
    </div>
  )
}
```

This code uses Clerk's [`auth()`⁠](https://clerk.com/docs/references/nextjs/auth) helper to get the user's ID. It is a helper that is specific to Next.js App Router, and it provides authentication information on the server side.

- If there is no user ID, the user is not signed in, so a sign in button is displayed.
- If the user is signed in, the "Create New Post" form is displayed. When the form is submitted, the `createPost()` function is called. This function creates a new post in the database using the [`prisma.post.create()`⁠](https://www.prisma.io/docs/orm/reference/prisma-client-reference?utm_source=docs#create) method, which is a Prisma Client method that creates a new record in the database.

Test the page by navigating to the `/posts/create` page. For example, `http://localhost:3000/posts/create`. Then create a new post. You should be redirected to the homepage, where you should see the new post.

Now, you've got a Next.js, Clerk, and Prisma app that can create and display posts. You could stop here and have a perfectly functional app. But let's take it a step further and add tRPC to your app for type-safe API endpoints.

## [Install tRPC, `@tanstack/react-query`, and `zod`](https://clerk.com/docs/drizzle\#install-t-rpc-tanstack-react-query-and-zod)

tRPC is a wrapper around your API endpoints to make them type-safe and easier to use.

`zod` is a schema validation library, also used to enhance your app's type safety.

`@tanstack/react-query` is a library for data fetching and caching.

Run the following command to install tRPC, `@tanstack/react-query`, and `zod`:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
npm i @trpc/server @trpc/client @trpc/react-query @tanstack/react-query zod
```

> At the time of writing, `clerk-next-app` includes React 19 as a peer dependency, but `@tanstack/react-query` does not. So, you'll need to use the `--force` flag when running the command above.
>
> ```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
> npm i @trpc/server @trpc/client @trpc/react-query @tanstack/react-query --force
> ```

## [Create a tRPC server](https://clerk.com/docs/drizzle\#create-a-t-rpc-server)

Now, you'll configure tRPC for your app.

1. In `app/`, create a `server` directory.
2. In `app/server/`, create a new `trpc.ts` file.
3. In `trpc.ts`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { initTRPC } from '@trpc/server'

const t = initTRPC.create()

export const router = t.router
export const publicProcedure = t.procedure
```

This initializes a tRPC server and creates a `router` and `publicProcedure` that you can use to create your API endpoints.

### [Create a tRPC endpoint](https://clerk.com/docs/drizzle\#create-a-t-rpc-endpoint)

Now, you'll create a router that's going to have your procedures on it.

1. In `app/server/`, create a `routers` directory.
2. In `routers/`, create a new `post.ts` file.
3. In `post.ts`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { publicProcedure, router } from '../trpc'
import prisma from '@/lib/prisma'

export const postRouter = router({
  getPosts: publicProcedure.query(async () => {
    return await prisma.post.findMany()
  }),
})

export type PostRouter = typeof postRouter
```

This code creates a router with a `getPosts` procedure that uses the tRPC `publicProcedure` you created in the previous step to make a query using tRPC's `query` method. The query then uses Prisma to query the `Post` model in your database. That part should look familiar, because you've used `prisma.post.findMany()` in your app earlier!

This is the file where you'll add all of your queries and mutations, so you'll probably update this file frequently as you build out your app.

### [Connect the tRPC router to your App Router](https://clerk.com/docs/drizzle\#connect-the-t-rpc-router-to-your-app-router)

Now you need to connect the tRPC router to your App Router.

1. In `app/`, create an `api` directory.
2. In `app/api/`, create a `trpc` directory.
3. In `app/api/trpc/`, create a `[trpc]` directory. This will capture whatever the user requests from the tRPC router, such as `getPosts`, and set it as one of the route parameters.
4. In `app/api/trpc/[trpc]`, create a `route.ts` file, which will be the route handler for your tRPC routers.
5. In `route.ts`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { fetchRequestHandler } from '@trpc/server/adapters/fetch'
import { postRouter } from '@/app/server/routers/posts'

const handler = (req: Request) =>
  fetchRequestHandler({
    endpoint: '/api/trpc',
    req,
    router: postRouter,
    createContext: () => ({}),
  })

export { handler as GET, handler as POST }
```

This uses tRPC's `fetch` adapter to handle Next.js's request handling.

At this point, your API endpoint should be working. You can test it by navigating to `http://localhost:3000/api/trpc/getPosts`. You should see a JSON response with the posts from your database.

So far, your app is entirely server-side and static. You need a way to mutate data, which is where `@tanstack/react-query` comes in. But to use tRPC with `@tanstack/react-query`, you need to create a tRPC client.

## [Create a tRPC client](https://clerk.com/docs/drizzle\#create-a-t-rpc-client)

1. In `app/`, create a `_trpc` directory. The underscore convention is used to indicate that this should not be used as a route.
2. In `_trpc/`, create a `client.ts` file.
3. In `client.ts`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
'use client'

import { createTRPCReact } from '@trpc/react-query'

import type { PostRouter } from '@/app/server/routers/posts'

export const trpc = createTRPCReact<PostRouter>({})
```

## [Create a Tanstack Query + tRPC provider](https://clerk.com/docs/drizzle\#create-a-tanstack-query-t-rpc-provider)

To use Tanstack Query and tRPC together, you need to create a provider that provides both the Tanstack Query client and the tRPC client to your app.

1. In `app/_trpc/`, create a `Provider.tsx` file.
2. In `Provider.tsx`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
'use client'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { httpBatchLink } from '@trpc/client'
import React, { useState } from 'react'

import { trpc } from './client'

export default function Provider({ children }: { children: React.ReactNode }) {
  // Create a Tanstack Query client
  const [queryClient] = useState(() => new QueryClient({}))
  // Create a tRPC client
  const [trpcClient] = useState(() =>
    trpc.createClient({
      links: [\
        httpBatchLink({\
          url: 'http://localhost:3001/api/trpc',\
        }),\
      ],
    }),
  )
  return (
    <trpc.Provider client={trpcClient} queryClient={queryClient}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </trpc.Provider>
  )
}
```

This creates a Tanstack Query client and a tRPC client, and then provides them to your app using the `trpc.Provider` and `QueryClientProvider` components.

Now, wrap your app in the provider. In `app/layout.tsx`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import type { Metadata } from 'next'
import {
  ClerkProvider,
  SignInButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from '@clerk/nextjs'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'
import TRPCProvider from '@/app/_trpc/Provider'

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})

export const metadata: Metadata = {
  title: 'Clerk Next.js Quickstart',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <ClerkProvider>
      <TRPCProvider>
        <html lang="en">
          <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
            <header className="flex justify-end items-center p-4 gap-4 h-16">
              <SignedOut>
                <SignInButton />
                <SignUpButton />
              </SignedOut>
              <SignedIn>
                <UserButton />
              </SignedIn>
            </header>
            {children}
          </body>
        </html>
      </TRPCProvider>
    </ClerkProvider>
  )
}
```

This imports the provider as `TRPCProvider`, and then wraps your app in it. It's very important that `<ClerkProvider>` is wrapped around `<TRPCProvider>`, and not the other way around, because the `<TRPCProvider>` needs to have access to the Clerk authentication context.

## [Use the tRPC client to fetch and mutate data](https://clerk.com/docs/drizzle\#use-the-t-rpc-client-to-fetch-and-mutate-data)

Now, you can use the `trpc` client to fetch and mutate data in your app! Let's update the functionality of your app to use the `trpc` client.

1. In `app/`, create a `components` directory.
2. In `components/`, create a new `Posts.tsx` file.
3. In `Posts.tsx`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
'use client'

import Link from 'next/link'
import { trpc } from '../_trpc/client'

export default function Posts() {
  // Use the `getPosts` query from the TRPC client
  const getPosts = trpc.getPosts.useQuery()
  const { isLoading, data } = getPosts

  return (
    <ul className="max-w-2xl space-y-4 mb-8">
      {isLoading && <div>Loading...</div>}
      {data?.map((post) => (
        <li key={post.id}>
          <Link href={`/posts/${post.id}`} className="hover:underline">
            <span className="font-semibold">{post.title}</span>
            <span className="text-sm ml-2">by {post.authorId}</span>
          </Link>
        </li>
      ))}
    </ul>
  )
}
```

Then, update the homepage to use the `<Posts />` component:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import Link from 'next/link'
import Posts from './components/Posts'

export default async function Page() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center -mt-16">
      <h1 className="text-4xl font-bold mb-8">Posts</h1>
      <Posts />
      <Link
        href="/posts/create"
        className="inline-block border-2 border-current text-current px-4 py-2 rounded-lg hover:scale-[0.98] transition-all"
      >
        Create New Post
      </Link>
    </div>
  )
}
```

Notice that the `prisma.post.findMany()` function is no longer used. Instead, your app is using `trpc.getPosts.useQuery()` in the `<Posts />` component to fetch the posts, because remember, you created a tRPC `postRouter` with a `getPosts` procedure that uses `prisma.post.findMany()`. So now, you don't need to use Prisma directly, you can use tRPC in order to have type safety and a better developer experience. Let's update the rest of your app to use tRPC.

Of course, let's test and make sure the new logic is working. Navigate to the homepage and make sure you can see the posts.

Once you've verified everything's working, let's go back to your `postRouter` and create more procedures to handle your other queries.

### [Use tRPC to fetch a single post](https://clerk.com/docs/drizzle\#use-t-rpc-to-fetch-a-single-post)

In `app/server/routers/posts.ts`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { publicProcedure, router } from '../trpc'
import prisma from '@/lib/prisma'

export const postRouter = router({
  getPost: publicProcedure.input(z.object({ id: z.string() })).query(async ({ input }) => {
    return await prisma.post.findUnique({
      where: { id: parseInt(input.id) },
    })
  }),
  getPosts: publicProcedure.query(async () => {
    return await prisma.post.findMany()
  }),
})

export type PostRouter = typeof postRouter
```

This adds a `getPost` procedure to fetch a single post by ID.

In `app/posts/[id]/page.tsx`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
'use client'

import { trpc } from '@/app/_trpc/client'
import { use } from 'react'

export default function Post({ params }: { params: Promise<{ id: string }> }) {
  // Params are wrapped in a promise, so we need to unwrap them using React's `use()` hook
  const unwrappedParams = use(params)
  const { id } = unwrappedParams
  // Use the `getPost` query from the TRPC client
  const post = trpc.getPost.useQuery({ id })

  if (!post.data) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center -mt-16">
        <div>No post found.</div>
      </div>
    )
  }

  const { title, authorId, content } = post.data

  return (
    <div className="min-h-screen flex flex-col items-center justify-center -mt-16">
      {post && (
        <article className="w-full max-w-2xl">
          <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold mb-2 ">{title}</h1>
          <p className="text-sm sm:text-base">by {authorId}</p>
          <div className="prose prose-gray prose-sm sm:prose-base lg:prose-lg mt-4 sm:mt-8">
            {content || 'No content available.'}
          </div>
        </article>
      )}
    </div>
  )
}
```

This replaces `prisma.post.findUnique()` with `trpc.getPost.useQuery()`. Because tRPC is using Tanstack Query to fetch the data, the query result includes the data and other states, such as loading and error. You can learn more about in the [Tanstack Query docs⁠](https://tanstack.com/query/v4/docs/framework/react/guides/queries#:~:text=throughout%20your%20application.-,The%20query%20result,-returned%20by%20useQuery).

And before you go any further, test to make sure the new logic is working. Navigate to a post's URL, such as `http://localhost:3000/posts/1`, and make sure you can see the post.

If that's working, let's go back to your `postRouter` and add the last procedure you need to handle your create post functionality.

### [Use tRPC to create a new post](https://clerk.com/docs/drizzle\#use-t-rpc-to-create-a-new-post)

In `app/server/routers/posts.ts`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { publicProcedure, router } from '../trpc'
import prisma from '@/lib/prisma'
import { z } from 'zod'

const postSchema = z.object({
  title: z.string(),
  content: z.string(),
  authorId: z.string(),
})

export const postRouter = router({
  getPost: publicProcedure.input(z.object({ id: z.string() })).query(async ({ input }) => {
    return await prisma.post.findUnique({
      where: { id: parseInt(input.id) },
    })
  }),
  getPosts: publicProcedure.query(async () => {
    return await prisma.post.findMany()
  }),
  // Protected procedure that requires a user to be signed in
  createPosts: publicProcedure.input(postSchema).mutation(async ({ input }) => {
    return await prisma.post.create({
      data: {
        title: input.title,
        content: input.content,
        authorId: input.authorId,
      },
    })
  }),
})

export type PostRouter = typeof postRouter
```

This adds a `createPosts` procedure that creates a new post.

In `app/posts/create/page.tsx`, add the following code:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
'use client'

import { redirect } from 'next/navigation'
import { SignInButton, useAuth } from '@clerk/nextjs'
import { trpc } from '@/app/_trpc/client'
import { useState } from 'react'

export default function NewPost() {
  const [title, setTitle] = useState('')
  const [content, setContent] = useState('')
  // Use Clerk's `useAuth()` hook to get the user's ID
  const { userId, isLoaded } = useAuth()
  // Use the `createPosts` mutation from the TRPC client
  const createPostMutation = trpc.createPosts.useMutation()

  // Check if Clerk is loaded
  if (!isLoaded) {
    return (
      <div className="flex flex-col items-center justify-center h-[calc(100vh-4rem)] space-y-4">
        <div>Loading...</div>
      </div>
    )
  }

  // Protect this page from unauthenticated users
  if (!userId) {
    return (
      <div className="flex flex-col items-center justify-center h-[calc(100vh-4rem)] space-y-4">
        <p>You must be signed in to create a post.</p>
        <SignInButton>
          <button
            type="submit"
            className="inline-block border-2 border-current text-current px-4 py-2 rounded-lg hover:scale-[0.98] transition-all cursor-pointer"
          >
            Sign in
          </button>
        </SignInButton>
      </div>
    )
  }

  // Handle form submission
  async function createPost(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()

    createPostMutation.mutate({
      title,
      content,
      authorId: userId as string,
    })

    redirect('/')
  }

  return (
    <div className="max-w-2xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Create New Post</h1>
      <form onSubmit={createPost} className="space-y-6">
        <div>
          <label htmlFor="title" className="block text-lg mb-2">
            Title
          </label>
          <input
            type="text"
            id="title"
            name="title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Enter your post title"
            className="w-full px-4 py-2 border rounded-lg"
          />
        </div>
        <div>
          <label htmlFor="content" className="block text-lg mb-2">
            Content
          </label>
          <textarea
            id="content"
            name="content"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Write your post content here..."
            rows={6}
            className="w-full px-4 py-2 border rounded-lg"
          />
        </div>
        <button
          type="submit"
          className="inline-block border-2 border-current text-current px-4 py-2 rounded-lg hover:scale-[0.98] transition-all w-full"
        >
          Create Post
        </button>
      </form>
    </div>
  )
}
```

This updates a few things. First, it turns this page into a client component, because Tanstack Query and the tRPC client are client-side. So now, the Server Action that you created before can no longer be used. Instead, the form data is handled using state. When the form is submitted, the `createPost()` function no longer uses `prisma.post.create()`, but instead uses `trpc.createPosts.useMutation()` from the tRPC client. Also, because the page is now a client component, Clerk's `auth()` helper no longer works, so it's replaced with Clerk's `useAuth()` hook. This introduces the benefit of having access to Clerk's loading state, so a loading UI is added.

And don't forget, test your changes. Navigate to the create post page, such as `http://localhost:3000/posts/create`, and make sure you can create a new post.

Once you've confirmed everything's working, you're almost done...

## [Create protected procedures (optional)](https://clerk.com/docs/drizzle\#create-protected-procedures-optional)

In many applications, it's essential to restrict access to certain routes based on user authentication status. This ensures that sensitive data and functionality are only accessible to authorized users.

The benefit of using Clerk with tRPC is that you can create protected procedures using Clerk's authentication context. Clerk's [`Auth`⁠](https://clerk.com/docs/references/backend/types/auth-object) object includes important authentication information like the current user's session ID, user ID, and organization ID. It also contains methods to check for the current user's permissions and to retrieve their session token. You can use the `Auth` object to access the user's authentication information in your tRPC queries.

For part of the tutorial, see the [Clerk docs⁠](https://clerk.com/docs/references/backend/types/auth-object) to learn how to create protected procedures.

## [Finished!](https://clerk.com/docs/drizzle\#finished)

At this point, you've got a fully functional app for creating and displaying posts. You can now add more features to your app, such as updating and deleting posts, adding comments, storing more author information from the Clerk [`User`⁠](https://clerk.com/docs/references/javascript/user) object, and more.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/drizzle.mdx)

Last updated onMar 7, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628858820&cv=11&fst=1741628858820&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791784~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Fdrizzle&hn=www.googleadservices.com&frm=0&tiba=Clerk%20%7C%20Authentication%20and%20User%20Management&npa=0&pscdl=noapi&auid=671451941.1741628859&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Clerk Telemetry Overview
[Skip to main content](https://clerk.com/docs/telemetry#main)

1. [Why is Clerk collecting telemetry data?](https://clerk.com/docs/telemetry#why-is-clerk-collecting-telemetry-data)
2. [What data is being collected?](https://clerk.com/docs/telemetry#what-data-is-being-collected)
3. [What about sensitive data?](https://clerk.com/docs/telemetry#what-about-sensitive-data)
4. [How is my data protected?](https://clerk.com/docs/telemetry#how-is-my-data-protected)
5. [How do I opt-out?](https://clerk.com/docs/telemetry#how-do-i-opt-out)
1. [Environment variables](https://clerk.com/docs/telemetry#environment-variables)
2. [`telemetry` prop](https://clerk.com/docs/telemetry#telemetry-prop)
3. [Framework specific instructions](https://clerk.com/docs/telemetry#framework-specific-instructions)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/telemetry.mdx)

# Clerk Telemetry

Clerk collects telemetry data from its SDKs about general product and feature usage. Participation in telemetry collection is optional and users of the product can opt-out at any time.

## [Why is Clerk collecting telemetry data?](https://clerk.com/docs/telemetry\#why-is-clerk-collecting-telemetry-data)

While we actively engage with our users and community to gather feedback and inform our product roadmap, the information collected from these efforts only represents a small subset of our users.

Collecting telemetry data gives us a clearer picture into how our SDKs, components, and authentication helpers are used for a diverse set of problems. This data provides valuable insights to help us prioritize features that are useful and impactful for as many of our users as possible.

## [What data is being collected?](https://clerk.com/docs/telemetry\#what-data-is-being-collected)

We track general usage information about our SDKs, components, and authentication helpers from **development instances only**. While we collect identifiers that allows us to associate events with specific Clerk instances, **we do not collect any information from your users**.

Examples of data we are interested in:

- How often are our different components ( `<SignIn />`, `<SignUp />`, `<UserProfile />`) rendered?
- What props are being used?
- How are developers utilizing the `appearance` prop on our components?
- What versions of our SDKs are being used?
- What associated framework versions are being used? (e.g. what `next` version is being used along with `@clerk/nextjs`)
- Usage of new features

Note

We regularly audit this list to ensure it is an accurate representation of the data we are collecting. To audit telemetry data sent from our SDKs yourself, you can set a `CLERK_TELEMETRY_DEBUG=1` environment variable in your application. In this mode, telemetry events are only logged to the console and not sent to Clerk.

An example event looks like this:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  event: 'COMPONENT_MOUNTED',
  cv: '4.62.1',
  sdk: '@clerk/nextjs',
  sdkv: '4.25.6',
  pk: 'pk_test_YmFsYW5jZWQtY293YmlyZC0xNi5jbGVyay5hY2NvdW50cy5kDXyk',
  payload: { component: 'SignIn', appearanceProp: false },
}
```

- `event` — A unique identifier for the event type.
- `cv` — Clerk Version. The version of the core Clerk library in use.
- `sdk` — SDK. The Clerk SDK that is being used.
- `sdkv` — SDK Version. The version of the Clerk SDK.
- `pk` — Publishable Key. The instance's Publishable Key.
- `payload` — Each unique event can provide custom data as part of the payload. As seen above, for the `COMPONENT_MOUNTED` event we track the component name and additional data about prop usage.

## [What about sensitive data?](https://clerk.com/docs/telemetry\#what-about-sensitive-data)

We will not collect sensitive data from your application or development environment that is not directly related to your implementation of Clerk's SDKs. Notably, we will not collect: environment variables unrelated to Clerk, any information about your users, file paths, contents of files, logs, git remote information, or raw JavaScript errors.

## [How is my data protected?](https://clerk.com/docs/telemetry\#how-is-my-data-protected)

Clerk takes data privacy and protection seriously. Telemetry data is most useful in aggregate form to gain product insights, and the raw data is only available to a small subset of Clerk employees.

We will never share with or sell telemetry data to third parties. The data is used strictly to help improve the Clerk product.

## [How do I opt-out?](https://clerk.com/docs/telemetry\#how-do-i-opt-out)

### [Environment variables](https://clerk.com/docs/telemetry\#environment-variables)

Warning

Note that the variable name might differ between frameworks. See the [framework specific instructions](https://clerk.com/docs/telemetry#framework-specific-instructions) below.

For meta-framework SDKs, you can opt-out of telemetry collection by setting the environment variable:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
CLERK_TELEMETRY_DISABLED=1
```

### [`telemetry` prop](https://clerk.com/docs/telemetry\#telemetry-prop)

If you are using `@clerk/clerk-react` directly, or using an SDK that doesn't have environment variable support, you can opt out by passing the `telemetry` prop to `<ClerkProvider>`:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
<ClerkProvider telemetry={false} />
```

### [Framework specific instructions](https://clerk.com/docs/telemetry\#framework-specific-instructions)

Next.js

React

Remix

JavaScript

Chrome Extension

Expo

Astro

React Router

Tanstack Start

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
NEXT_PUBLIC_CLERK_TELEMETRY_DISABLED=1
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/telemetry.mdx)

Last updated onFeb 25, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628858708&cv=11&fst=1741628858708&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102643510~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Ftelemetry&hn=www.googleadservices.com&frm=0&tiba=Security%20%26%20Privacy%3A%20Clerk%20Telemetry&npa=0&pscdl=noapi&auid=1427824821.1741628859&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Clerk Troubleshooting Guide
[Skip to main content](https://clerk.com/docs/troubleshooting/overview#main)

1. [Discord community](https://clerk.com/docs/troubleshooting/overview#discord-community)
2. [Support](https://clerk.com/docs/troubleshooting/overview#support)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/troubleshooting/overview.mdx)

# Troubleshooting

We hope that our documentation is thorough and transparent enough that you won't run into any issues. If you can't find what you're looking for in the navigation sidenav, use the search function of the docs to track down the information you need.

Refer to the [Backend API⁠](https://clerk.com/docs/reference/backend-api) and [Frontend API⁠](https://clerk.com/docs/reference/frontend-api) reference docs for questions about object structures, requests, and responses.

Are you looking for a place to get started? See the [quickstarts](https://clerk.com/docs/quickstarts/overview).

## [Discord community](https://clerk.com/docs/troubleshooting/overview\#discord-community)

Need help? Have a suggestion? Join our [Discord community⁠](https://clerk.com/discord) and never miss a thing.

## [Support](https://clerk.com/docs/troubleshooting/overview\#support)

Can't find what you need? [Contact us⁠](https://clerk.com/contact/support) to receive answers to your questions and learn more about Clerk.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/troubleshooting/overview.mdx)

Last updated onFeb 25, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628858545&cv=11&fst=1741628858545&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102813108~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Ftroubleshooting%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Troubleshooting&npa=0&pscdl=noapi&auid=320414191.1741628859&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Ruby Authentication Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/ruby#main)

1. [Install `clerk-sdk-ruby`](https://clerk.com/docs/quickstarts/ruby#install-clerk-sdk-ruby)
2. [Configuration](https://clerk.com/docs/quickstarts/ruby#configuration)
3. [Instantiate a `Clerk::SDK` instance](https://clerk.com/docs/quickstarts/ruby#instantiate-a-clerk-sdk-instance)
4. [Next steps](https://clerk.com/docs/quickstarts/ruby#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/ruby.mdx)

# Ruby Quickstart

## You will learn the following:

- Install `clerk-sdk-ruby`
- Configuration
- Instantiate a `Clerk::SDK` instance

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)

## Example repository

- [Ruby Quickstart Repo](https://github.com/clerk/clerk-sdk-ruby/tree/main/apps)

Learn how to use Clerk to quickly and easily add secure authentication and user management to your Ruby app. If you would like to use a framework, refer to the [integrations](https://clerk.com/docs/references/ruby/overview#integrations).

## [Install `clerk-sdk-ruby`](https://clerk.com/docs/quickstarts/ruby\#install-clerk-sdk-ruby)

The [Clerk Ruby SDK](https://clerk.com/docs/references/ruby/overview) provides a range of backend utilities to simplify user authentication and management in your application.

1. Add the following code to your application's `Gemfile`.Gemfile

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
gem 'clerk-sdk-ruby', require: "clerk"
```

2. Run the following command to install the SDK:terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
$ bundle install
```


## [Configuration](https://clerk.com/docs/quickstarts/ruby\#configuration)

The configuration object provides a flexible way to configure the SDK. When a configuration value is not explicitly provided, it will fall back to checking the corresponding [environment variable](https://clerk.com/docs/references/ruby/overview#available-environment-variables). You must provide your Clerk Secret Key, which can be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

The following example shows how to set up your configuration object:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
Clerk.configure do |c|
  c.secret_key = `YOUR_SECRET_KEY` # if omitted: ENV["CLERK_SECRET_KEY"] - API calls will fail if unset
  c.logger = Logger.new(STDOUT) # if omitted, no logging
end
```

For more information, see [Faraday's documentation⁠](https://lostisland.github.io/faraday/#/).

## [Instantiate a `Clerk::SDK` instance](https://clerk.com/docs/quickstarts/ruby\#instantiate-a-clerk-sdk-instance)

All available methods are listed in the [Ruby HTTP Client documentation⁠](https://github.com/clerk/clerk-http-client-ruby/tree/main/.generated#documentation-for-api-endpoints). The Ruby HTTP Client is a generated wrapper around the [Backend API⁠](https://clerk.com/docs/reference/backend-api) that provides a more Ruby-friendly interface.

To access available methods, you must instantiate a `Clerk::SDK` instance.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
sdk = Clerk::SDK.new

create_user_request = Clerk::SDK::CreateUserRequest.new(
  first_name: "John",
  last_name: "Doe",
  email_address: ["john.doe@example.com"],
  password: "password"
)

# Create a user
sdk.users.create(create_user_request)

# List all users and ensure the user was created
sdk.users.get_user_list

# Get the first user created in your instance
user = sdk.users.get_user_list(limit: 1).first

# Use the user's ID to lock the user
sdk.users.lock_user(user["id"])

# Then, unlock the user so they can sign in again
sdk.users.unlock_user(user["id"])
```

## [Next steps](https://clerk.com/docs/quickstarts/ruby\#next-steps)

### [RubySDKReference](https://clerk.com/docs/references/ruby/overview)

Learn more about the Ruby SDK.

### [DeploytoProduction](https://clerk.com/docs/deployments/overview)

Learn how to deploy your Clerk app to production.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/ruby.mdx)

Last updated onFeb 5, 2025

Support

## Clerk Passkey Errors
[Skip to main content](https://clerk.com/docs/errors/passkeys#main)

1. [`passkey_not_supported`](https://clerk.com/docs/errors/passkeys#passkey-not-supported)
2. [`passkeys_pa_not_supported`](https://clerk.com/docs/errors/passkeys#passkeys-pa-not-supported)
3. [`passkey_invalid_rpID_or_domain`](https://clerk.com/docs/errors/passkeys#passkey-invalid-rp-id-or-domain)
4. [`passkey_already_exists`](https://clerk.com/docs/errors/passkeys#passkey-already-exists)
5. [`passkey_operation_aborted`](https://clerk.com/docs/errors/passkeys#passkey-operation-aborted)
6. [`passkey_retrieval_cancelled`](https://clerk.com/docs/errors/passkeys#passkey-retrieval-cancelled)
7. [`passkey_retrieval_failed`](https://clerk.com/docs/errors/passkeys#passkey-retrieval-failed)
8. [`passkey_registration_cancelled`](https://clerk.com/docs/errors/passkeys#passkey-registration-cancelled)
9. [`passkey_registration_failed`](https://clerk.com/docs/errors/passkeys#passkey-registration-failed)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/passkeys.mdx)

# Passkey errors

An index of Clerk errors related to passkeys.

## [`passkey_not_supported`](https://clerk.com/docs/errors/passkeys\#passkey-not-supported)

Passkeys are not supported on this device.

## [`passkeys_pa_not_supported`](https://clerk.com/docs/errors/passkeys\#passkeys-pa-not-supported)

Registration requires a platform authenticator but the device does not support it.

## [`passkey_invalid_rpID_or_domain`](https://clerk.com/docs/errors/passkeys\#passkey-invalid-rp-id-or-domain)

The relying party ID or domain associated with the passkey does not match the relying party ID or domain of the app the user is signing into.

## [`passkey_already_exists`](https://clerk.com/docs/errors/passkeys\#passkey-already-exists)

A passkey is already registered with this device.

## [`passkey_operation_aborted`](https://clerk.com/docs/errors/passkeys\#passkey-operation-aborted)

Browser canceled the passkey operation.

## [`passkey_retrieval_cancelled`](https://clerk.com/docs/errors/passkeys\#passkey-retrieval-cancelled)

Passkey verification was cancelled or timed out.

## [`passkey_retrieval_failed`](https://clerk.com/docs/errors/passkeys\#passkey-retrieval-failed)

Browser failed to get the passkey credential.

## [`passkey_registration_cancelled`](https://clerk.com/docs/errors/passkeys\#passkey-registration-cancelled)

Passkey registration was cancelled or timed out.

## [`passkey_registration_failed`](https://clerk.com/docs/errors/passkeys\#passkey-registration-failed)

Browser failed to register the passkey credential.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/passkeys.mdx)

Last updated onAug 16, 2024

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628858313&cv=11&fst=1741628858313&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Ferrors%2Fpasskeys&hn=www.googleadservices.com&frm=0&tiba=Errors%3A%20Passkey%20errors&npa=0&pscdl=noapi&auid=1788746436.1741628858&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Clerk Express Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/express#main)

1. [Install `@clerk/express`](https://clerk.com/docs/quickstarts/express#install-clerk-express)
2. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/express#set-your-clerk-api-keys)
3. [Add `clerkMiddleware()` to your app](https://clerk.com/docs/quickstarts/express#add-clerk-middleware-to-your-app)
4. [Protect your routes using `requireAuth()`](https://clerk.com/docs/quickstarts/express#protect-your-routes-using-require-auth)
5. [Add global TypeScript type (optional)](https://clerk.com/docs/quickstarts/express#add-global-type-script-type-optional)
6. [Next steps](https://clerk.com/docs/quickstarts/express#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/express.mdx)

# Express Quickstart

## You will learn the following:

- Install `@clerk/express`
- Set your Clerk API keys
- Add `clerkMiddleware()` to your application
- Protect your routes using `requireAuth()`

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create a Express application](https://expressjs.com/en/starter/installing.html)

## Example repository

- [Express Quickstart Repo](https://github.com/clerk/clerk-express-quickstart)

Learn how to integrate Clerk into your Express backend for secure user authentication and management. This guide focuses on backend implementation and requires a Clerk frontend SDK to function correctly.

## [Install `@clerk/express`](https://clerk.com/docs/quickstarts/express\#install-clerk-express)

The [Clerk Express SDK](https://clerk.com/docs/references/express/overview) provides a range of backend utilities to simplify user authentication and management in your application.

Run the following command to install the SDK:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/express
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/express\#set-your-clerk-api-keys)

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable and Secret Keys.
3. Paste your keys into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
CLERK_SECRET_KEY=YOUR_SECRET_KEY
```

This guide uses `dotenv` to load the environment variables. Run the following command to install it:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install dotenv
```

## [Add `clerkMiddleware()` to your app](https://clerk.com/docs/quickstarts/express\#add-clerk-middleware-to-your-app)

The [`clerkMiddleware()`](https://clerk.com/docs/references/express/overview#clerk-middleware) function checks the request's cookies and headers for a session JWT and, if found, attaches the [`Auth`⁠](https://clerk.com/docs/references/backend/types/auth-object#auth-object) object to the `request` object under the `auth` key.

index.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import 'dotenv/config'
import express from 'express'
import { clerkMiddleware } from '@clerk/express'

const app = express()
const PORT = 3000

app.use(clerkMiddleware())

// Start the server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Example app listening at http://localhost:${PORT}`)
})
```

## [Protect your routes using `requireAuth()`](https://clerk.com/docs/quickstarts/express\#protect-your-routes-using-require-auth)

To protect your routes, use the [`requireAuth()`](https://clerk.com/docs/references/express/overview#require-auth) middleware. This middleware functions similarly to `clerkMiddleware()`, but also protects your routes by redirecting unauthenticated users to the sign-in page.

In the following example, `requireAuth()` is used to protect the `/protected` route. If the user isn't authenticated, they're redirected to the homepage. If the user is authenticated, the [`getAuth()`](https://clerk.com/docs/references/express/overview#get-auth) function is used to get the `userId`, which is passed to [`clerkClient.users.getUser()`⁠](https://clerk.com/docs/references/backend/user/get-user) to fetch the current user's `User` object.

index.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import 'dotenv/config'
import express from 'express'
import { clerkClient, requireAuth, getAuth } from '@clerk/express'

const app = express()
const PORT = 3000

// Use requireAuth() to protect this route
// If user isn't authenticated, requireAuth() will redirect back to the homepage
app.get('/protected', requireAuth(), async (req, res) => {
  // Use `getAuth()` to get the user's `userId`
  const { userId } = getAuth(req)

  // Use Clerk's JavaScript Backend SDK to get the user's User object
  const user = await clerkClient.users.getUser(userId)

  return res.json({ user })
})

// Start the server and listen on the specified port
app.listen(PORT, () => {
  console.log(`Example app listening at http://localhost:${PORT}`)
})
```

## [Add global TypeScript type (optional)](https://clerk.com/docs/quickstarts/express\#add-global-type-script-type-optional)

If you're using TypeScript, add a global type reference to your project to enable auto-completion and type checking for the `auth` object in Express request handlers.

1. In your application's root folder, create a `types/` directory.
2. Inside this directory, create a `globals.d.ts` file with the following code.

types/globals.d.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
/// <reference types="@clerk/express/env" />
```

## [Next steps](https://clerk.com/docs/quickstarts/express\#next-steps)

### [Usemiddlewaretoprotectroutes](https://clerk.com/docs/references/express/overview\#require-auth)

Learn how to protect specific routes from unauthenticated users.

### [Protectroutesbasedonauthorizationstatus](https://clerk.com/docs/references/express/overview\#get-auth)

Learn how to protect a route based on both authentication and authorization status.

### [ExpressSDKreference](https://clerk.com/docs/references/express/overview)

Learn more about additional Express SDK methods.

### [DeploytoProduction](https://clerk.com/docs/deployments/overview)

Learn how to deploy your Clerk app to production.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/express.mdx)

Last updated onFeb 12, 2025

Support

## Clerk Authentication Quickstarts
[Skip to main content](https://clerk.com/docs/quickstarts/overview#main)

1. [Full Stack](https://clerk.com/docs/quickstarts/overview#full-stack)
2. [Frontend](https://clerk.com/docs/quickstarts/overview#frontend)
3. [Backend](https://clerk.com/docs/quickstarts/overview#backend)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/overview.mdx)

# Quickstarts

## [Full Stack](https://clerk.com/docs/quickstarts/overview\#full-stack)

### [Next.js](https://clerk.com/docs/quickstarts/nextjs)

Easily add secure, beautiful, and fast authentication to your Next.js application with Clerk.

### [Astro](https://clerk.com/docs/quickstarts/astro)

Easily add secure and SSR-friendly authentication to your Astro application with Clerk.

### [Nuxt](https://clerk.com/docs/quickstarts/nuxt)

Easily add secure, beautiful, and fast authentication to Nuxt with Clerk.

### [ReactRouterBeta](https://clerk.com/docs/quickstarts/react-router)

The Clerk React Router SDK provides prebuilt components, hooks, and stores to make it easy to integrate authentication and user management in your React Router app.

### [Remix](https://clerk.com/docs/quickstarts/remix)

Easily add secure, edge- and SSR-friendly authentication to your Remix application with Clerk.

![tanstack start logo](<Base64-Image-Removed>)

### [TanStackStartBeta](https://clerk.com/docs/quickstarts/tanstack-start)

Easily add secure and SSR-friendly authentication to your TanStack Start application with Clerk.

## [Frontend](https://clerk.com/docs/quickstarts/overview\#frontend)

### [React](https://clerk.com/docs/quickstarts/react)

Easily add secure, beautiful, and fast authentication to your React application with Clerk.

### [ChromeExtension](https://clerk.com/docs/quickstarts/chrome-extension)

Use the Chome Extension SDK to authenticate users in your Chrome extension.

### [Expo](https://clerk.com/docs/quickstarts/expo)

Use Clerk with Expo to authenticate users in your React Native application.

### [iOSBeta](https://clerk.com/docs/quickstarts/ios)

Use the Clerk iOS SDK to authenticate users in your native Apple applications.

### [JavaScript](https://clerk.com/docs/quickstarts/javascript)

Easily add secure, beautiful, and fast authentication to your JavaScript application with Clerk.

### [Vue](https://clerk.com/docs/quickstarts/vue)

Easily add secure, beautiful, and fast authentication to your Vue application with Clerk.

## [Backend](https://clerk.com/docs/quickstarts/overview\#backend)

### [Express](https://clerk.com/docs/quickstarts/express)

Easily add secure, beautiful, and fast authentication to your Express application with Clerk.

### [Fastify](https://clerk.com/docs/quickstarts/fastify)

Easily add secure, beautiful, and fast authentication to your Fastify application with Clerk.

## [Join our Discord](https://clerk.com/discord)

Join our official Discord server to chat with us directly and become a part of the Clerk community.

Join Discord

Join Discord

## [Need help?](https://clerk.com/support)

Contact us through Discord, Twitter, or email to receive answers to your questions and learn more about Clerk.

Get help

Get help

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/overview.mdx)

Last updated onMar 7, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628858628&cv=11&fst=1741628858628&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791784~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Fquickstarts%2Foverview&hn=www.googleadservices.com&frm=0&tiba=Quickstarts&npa=0&pscdl=noapi&auid=516735817.1741628859&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Clerk Client Errors
[Skip to main content](https://clerk.com/docs/errors/clients#main)

1. [`ClientNotFound`](https://clerk.com/docs/errors/clients#client-not-found)
2. [`ClientNotFoundInRequest`](https://clerk.com/docs/errors/clients#client-not-found-in-request)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/clients.mdx)

# Client errors

An index of Clerk errors related to a client.

## [`ClientNotFound`](https://clerk.com/docs/errors/clients\#client-not-found)

Signifies an error when no client is found with `clientID`.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Client not found",
  "longMessage": "No client was found with id <clientID>",
  "code": "resource_not_found_code"
}
```

## [`ClientNotFoundInRequest`](https://clerk.com/docs/errors/clients\#client-not-found-in-request)

Signifies an error when no client is found in an incoming request.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "No client found",
  "longMessage": "This request is expecting a client and did not find one",
  "code": "client_not_found_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/clients.mdx)

Last updated onAug 16, 2024

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628858734&cv=11&fst=1741628858734&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Ferrors%2Fclients&hn=www.googleadservices.com&frm=0&tiba=Errors%3A%20Client%20errors&npa=0&pscdl=noapi&auid=1726777699.1741628859&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## User Management Overview
[Skip to main content](https://clerk.com/docs/users/overview#main)

1. [Manage users in the Clerk Dashboard](https://clerk.com/docs/users/overview#manage-users-in-the-clerk-dashboard)
2. [Manage users in your app](https://clerk.com/docs/users/overview#manage-users-in-your-app)
1. [Manage users in the frontend](https://clerk.com/docs/users/overview#manage-users-in-the-frontend)
2. [Manage users in the backend](https://clerk.com/docs/users/overview#manage-users-in-the-backend)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/users/overview.mdx)

# Users

You can manage your users [in the Clerk Dashboard](https://clerk.com/docs/users/overview#manage-users-in-the-clerk-dashboard), or [in your app](https://clerk.com/docs/users/overview#manage-users-in-your-app).

## [Manage users in the Clerk Dashboard](https://clerk.com/docs/users/overview\#manage-users-in-the-clerk-dashboard)

To manage users in the Clerk Dashboard, navigate to the [**Users**⁠](https://dashboard.clerk.com/last-active?path=users) page.

## [Manage users in your app](https://clerk.com/docs/users/overview\#manage-users-in-your-app)

You can manage users in your app either through the frontend or backend. But first, it's important to understand the [`User` object](https://clerk.com/docs/references/javascript/user).

The `User` object holds all of the information for a single user of your application and provides a set of methods to manage their account. Each `User` has at least one authentication [identifier](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options#identifiers), which might be their email address, phone number, or a username.

A user can be contacted at their primary email address or primary phone number. They can have more than one registered email address, but only one of them will be their primary email address. This goes for phone numbers as well; a user can have more than one, but only one phone number will be their primary. At the same time, a user can also have one or more external accounts by connecting to [social providers](https://clerk.com/docs/authentication/social-connections/oauth) such as Google, Apple, Facebook, and many more.

Finally, a `User` object holds profile data like the user's name, profile picture, and a set of [metadata](https://clerk.com/docs/users/metadata) that can be used internally to store arbitrary information. The metadata are split into `publicMetadata` and `privateMetadata`. Both types are set from the [Backend API⁠](https://clerk.com/docs/reference/backend-api), but public metadata can also be accessed from the [Frontend API⁠](https://clerk.com/docs/reference/frontend-api).

For more information on the `User` object, such as helper methods for retrieving and updating user information and authentication status, see the [reference docs](https://clerk.com/docs/references/javascript/user). The `User` object is also available in the backend, but it looks slightly different. For more information, see the [Backend `User` object reference docs](https://clerk.com/docs/references/backend/types/backend-user).

### [Manage users in the frontend](https://clerk.com/docs/users/overview\#manage-users-in-the-frontend)

Depending on the level of abstraction you need, you can manage users in the frontend using Clerk's prebuilt components, React hooks, or lower-level JavaScript methods.

- Prebuilt components: Clerk provides the prebuilt components [`<UserButton />`](https://clerk.com/docs/components/user/user-button) and [`<UserProfile />`](https://clerk.com/docs/components/user/user-profile) to help your users manage their profile data.
- Hooks: Because Clerk's React-based SDKs are built on top of the Clerk React SDK, you can use the [hooks](https://clerk.com/docs/references/react/overview#custom-hooks) that the React SDK provides. These hooks include access to the `User` object and helpful methods for managing user authentication and profile data.
- JavaScript methods: If Clerk's prebuilt components don't meet your specific needs or if you require more control over the logic, you can rebuild the existing Clerk flows using the Clerk API. For more information, see the [custom flow guides](https://clerk.com/docs/custom-flows/overview).

### [Manage users in the backend](https://clerk.com/docs/users/overview\#manage-users-in-the-backend)

The [JavaScript Backend SDK](https://clerk.com/docs/references/backend/overview) exposes the [Backend API⁠](https://clerk.com/docs/reference/backend-api) resources and low-level authentication utilities for JavaScript environments.

There are many operations available for managing users, such as `getUser()`, `createUser()`, and `deleteUser()`. For more information, see the [Backend SDK reference docs](https://clerk.com/docs/references/backend/overview).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/users/overview.mdx)

Last updated onMar 6, 2025

Support

## Shopify and Clerk Integration
[Skip to main content](https://clerk.com/docs/integrations/shopify#main)

1. [Create a new Clerk OAuth application](https://clerk.com/docs/integrations/shopify#create-a-new-clerk-o-auth-application)
2. [Connect a new Shopify provider](https://clerk.com/docs/integrations/shopify#connect-a-new-shopify-provider)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/shopify.mdx)

# Integrate Shopify with Clerk

## You will learn the following:

- Configure Shopify to use Clerk for authentication

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create a Shopify store](https://www.shopify.com/)

This tutorial outlines how to integrate Clerk's authentication with your Shopify Plus store, allowing you to use Clerk as your identity provider for customer logins. In Shopify, using [your own Identity Provider for customer login⁠](https://changelog.shopify.com/posts/use-your-own-identity-provider-for-customer-login) is only available to stores on the **Shopify Plus plan**.

To make the setup process easier, it's recommended to keep two browser tabs open: one for your [Clerk Dashboard⁠](https://dashboard.clerk.com/last-active?path=user-authentication/sso-connections) and one for your [Shopify admin⁠](https://admin.shopify.com/).

## [Create a new Clerk OAuth application](https://clerk.com/docs/integrations/shopify\#create-a-new-clerk-o-auth-application)

1. In the Clerk Dashboard, navigate to the [**OAuth applications**⁠](https://dashboard.clerk.com/last-active?path=/oauth-applications) page.
2. Select **Add OAuth application**. A modal will open.
3. Enter the **Name** of your new OAuth application.
4. For the **Scopes**, ensure to select `openid`. The following scopes should be enabled: `openid`, `email`, and `profile`.
5. Select **Add**. You'll be presented with the **Client Secret**.
6. Select **Copy secret** and save the value somewhere secure. You'll be redirected to the OAuth app's settings page.
7. Under **Application Credentials**, copy and save the **Client ID** somewhere secure.
8. Under **Application Configuration URLs**, copy and save the **Discovery URL** somewhere secure. Keep this page open.

## [Connect a new Shopify provider](https://clerk.com/docs/integrations/shopify\#connect-a-new-shopify-provider)

01. In a new tab, navigate to your [Shopify admin⁠](https://admin.shopify.com/).
02. In the left sidenav, select **Settings**. You'll be redirected to your shop's **General** settings page.
03. In the left sidenav, select **Customer accounts**. You'll be redirected to the **Customer accounts** page.
04. Next to **Identity provider**, select **Manage**. You'll be redirected to the **Identity provider** page.






    Important







    In Shopify, using [your own Identity Provider for customer login⁠](https://changelog.shopify.com/posts/use-your-own-identity-provider-for-customer-login) is only available to stores on the Shopify Plus plan.

05. Select **Connect to provider**. You'll be redirected to the **Connect to identity provider** page.
06. Fill in the required fields. Paste the **Discovery URL**, **Client ID**, and **Client Secret** that you previously copied from Clerk Dashboard.
07. In the **Additional scopes** field, enter `profile`.
08. In the **Post-logout redirect URI parameter name** field, enter `returnTo`.
09. Select **Save** at the top of the page to update your Identity Provider's configuration.
10. In the top right, select **Activate** to enable your new Identity Provider.
11. Under **Setup configurations**, copy and save the **Callback URL** somewhere secure.
12. Navigate back to the Clerk Dashboard and paste the **Callback URL** into the **Redirect URIs** field.
13. Select **Save** to update your Clerk OAuth application's configuration.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/shopify.mdx)

Last updated onFeb 25, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628866844&cv=11&fst=1741628866844&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102814060~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Fintegrations%2Fshopify&hn=www.googleadservices.com&frm=0&tiba=Integrations%3A%20Integrate%20Shopify%20with%20Clerk&npa=0&pscdl=noapi&auid=1338297768.1741628867&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Clerk Themes
[Skip to main content](https://clerk.com/docs/customization/themes#main)

1. [Default theme](https://clerk.com/docs/customization/themes#default-theme)
2. ["Dark" theme](https://clerk.com/docs/customization/themes#dark-theme)
3. ["Shades of purple" theme](https://clerk.com/docs/customization/themes#shades-of-purple-theme)
4. ["Neobrutalism" theme](https://clerk.com/docs/customization/themes#neobrutalism-theme)
5. [Usage](https://clerk.com/docs/customization/themes#usage)
1. [Apply a theme to all Clerk components](https://clerk.com/docs/customization/themes#apply-a-theme-to-all-clerk-components)
2. [Apply multiple themes](https://clerk.com/docs/customization/themes#apply-multiple-themes)
3. [Apply a theme to all instances of a Clerk component](https://clerk.com/docs/customization/themes#apply-a-theme-to-all-instances-of-a-clerk-component)
4. [Apply a theme to a single Clerk component](https://clerk.com/docs/customization/themes#apply-a-theme-to-a-single-clerk-component)
6. [Customize a theme using variables](https://clerk.com/docs/customization/themes#customize-a-theme-using-variables)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/themes.mdx)

# Themes

Clerk currently offers four prebuilt themes:

- [The default theme](https://clerk.com/docs/customization/themes#default-theme)
- [The "Dark" theme](https://clerk.com/docs/customization/themes#dark-theme)
- [The "Shades of Purple" theme](https://clerk.com/docs/customization/themes#shades-of-purple-theme)
- [The "Neobrutalism" theme](https://clerk.com/docs/customization/themes#neobrutalism-theme)

## [Default theme](https://clerk.com/docs/customization/themes\#default-theme)

Applied by default when no other theme is provided.

![A sign-in form with a light theme](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fthemes%2Fdefault.svg&w=828&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## ["Dark" theme](https://clerk.com/docs/customization/themes\#dark-theme)

![A sign-in form with a dark theme](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fthemes%2Fdark.svg&w=828&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## ["Shades of purple" theme](https://clerk.com/docs/customization/themes\#shades-of-purple-theme)

![A sign-in form with a purple and yellow theme](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fthemes%2Fshades_of_purple.png&w=1920&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## ["Neobrutalism" theme](https://clerk.com/docs/customization/themes\#neobrutalism-theme)

![A sign-in form with a neobrutalist red theme](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fthemes%2Fneobrutalism.png&w=1920&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## [Usage](https://clerk.com/docs/customization/themes\#usage)

1. To get started, install the `@clerk/themes` package.











npm







yarn







pnpm







bun













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/themes
```

2. To use a theme, import it from `@clerk/themes` and pass it to the `appearance` prop of a Clerk component.


### [Apply a theme to all Clerk components](https://clerk.com/docs/customization/themes\#apply-a-theme-to-all-clerk-components)

To apply a theme to all Clerk components, pass the `appearance` prop to the [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider) component. The `appearance` prop accepts the property `baseTheme`, which can be set to a theme.

In the following example, the "Dark" theme is applied to all Clerk components.

Next.js

React

Remix

Astro

Vue

Nuxt

App Router

Pages Router

/src/app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import { dark } from '@clerk/themes'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider
      appearance={{
        baseTheme: dark,
      }}
    >
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

### [Apply multiple themes](https://clerk.com/docs/customization/themes\#apply-multiple-themes)

You can also stack themes by passing an array of themes to the `baseTheme` property of the `appearance` prop. The themes will be applied in the order they are listed. If styles overlap, the last defined theme will take precedence.

In the following example, the "Dark" theme is applied first, then the "Neobrutalism" theme is applied on top of it.

Next.js

React

Remix

Astro

Vue

Nuxt

App Router

Pages Router

/src/app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import { dark, neobrutalism } from '@clerk/themes'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider
      appearance={{
        baseTheme: [dark, neobrutalism],
      }}
    >
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

### [Apply a theme to all instances of a Clerk component](https://clerk.com/docs/customization/themes\#apply-a-theme-to-all-instances-of-a-clerk-component)

You can apply a theme to all instances of a Clerk component by passing the component to the `appearance` prop of the `<ClerkProvider>`. The `appearance` prop accepts the name of the Clerk component you want to style as a key.

In the following example, the "Neobrutalism" theme is applied to all instances of the [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in) component.

Next.js

React

Remix

Astro

Vue

Nuxt

App Router

Pages Router

/src/app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import { dark, neobrutalism } from '@clerk/themes'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider
      appearance={{
        baseTheme: dark,
        signIn: { baseTheme: neobrutalism },
      }}
    >
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

### [Apply a theme to a single Clerk component](https://clerk.com/docs/customization/themes\#apply-a-theme-to-a-single-clerk-component)

To apply a theme to a single Clerk component, pass the `appearance` prop to the component. The `appearance` prop accepts the property `baseTheme`, which can be set to a theme.

Next.js

React

Remix

Astro

Vue

Nuxt

App Router

Pages Router

app/sign-in/\[\[...sign-in\]\]/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { SignIn } from '@clerk/nextjs'
import { dark } from '@clerk/themes'

export default function Page() {
  return (
    <SignIn
      appearance={{
        baseTheme: dark,
      }}
    />
  )
}
```

## [Customize a theme using variables](https://clerk.com/docs/customization/themes\#customize-a-theme-using-variables)

You can customize a theme by passing an object of variables to the `variables` property of the `appearance` prop. The `variables` property is used to adjust the general styles of the component's base theme, like colors, backgrounds, typography.

In the following example, the primary color of the themes are customized.

Important

For a list of all of the variables you can customize, and for more examples on how to use the `variables` property, see the [Variables](https://clerk.com/docs/customization/variables) docs.

Next.js

React

Remix

Astro

Vue

Nuxt

App Router

Pages Router

/src/app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import { dark, neobrutalism, shadesOfPurple } from '@clerk/themes'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider
      appearance={{
        baseTheme: [dark, neobrutalism],
        variables: { colorPrimary: 'blue' },
        signIn: {
          baseTheme: [shadesOfPurple],
          variables: { colorPrimary: 'green' },
        },
      }}
    >
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/themes.mdx)

Last updated onFeb 12, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628867531&cv=11&fst=1741628867531&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102693808~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Fcustomization%2Fthemes&hn=www.googleadservices.com&frm=0&tiba=Appearance%20Prop%3A%20Themes&npa=0&pscdl=noapi&auid=1500364292.1741628868&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## User Invitations
[Skip to main content](https://clerk.com/docs/users/invitations#main)

1. [Create an invitation](https://clerk.com/docs/users/invitations#create-an-invitation)
1. [Using Clerk Dashboard](https://clerk.com/docs/users/invitations#using-clerk-dashboard)
2. [Using Backend API](https://clerk.com/docs/users/invitations#using-backend-api)
3. [Redirect URL](https://clerk.com/docs/users/invitations#redirect-url)
4. [Invitation metadata](https://clerk.com/docs/users/invitations#invitation-metadata)
2. [Revoking invitations](https://clerk.com/docs/users/invitations#revoking-invitations)
1. [Using Clerk Dashboard](https://clerk.com/docs/users/invitations#using-clerk-dashboard-2)
2. [Using Backend API](https://clerk.com/docs/users/invitations#using-backend-api-2)
3. [Custom flow](https://clerk.com/docs/users/invitations#custom-flow)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/users/invitations.mdx)

# Invite users to your application

Inviting users to your Clerk application allows you to onboard new users seamlessly by sending them a unique invitation link.

Once you create an invitation, Clerk sends an email to the invited user with a unique invitation link. When the user visits the invitation link, they will be redirected to the [Account Portal sign-up page](https://clerk.com/docs/account-portal/overview#sign-up) and **their email address will be automatically verified.** If you want to redirect the user to a specific page in your application, you can [specify a redirect URL when creating the invitation](https://clerk.com/docs/users/invitations#redirect-url).

Invitations expire after a month. If the user clicks on an expired invitation, they will get redirected to the application's sign-up page and will have to go through the normal sign-up flow. Their email address will not be auto-verified.

Tip

Invitations are only used to invite users to your application. The application will still be available to everyone even without an invitation. If you're looking to restrict access to invited users only, refer to the [**Restricted** sign-up mode](https://clerk.com/docs/authentication/configuration/restrictions#sign-up-modes).

## [Create an invitation](https://clerk.com/docs/users/invitations\#create-an-invitation)

You can create an invitation in the [Clerk Dashboard](https://clerk.com/docs/users/invitations#using-clerk-dashboard) or [using the Backend API](https://clerk.com/docs/users/invitations#using-backend-api).

### [Using Clerk Dashboard](https://clerk.com/docs/users/invitations\#using-clerk-dashboard)

To invite users, navigate to the **Users** page from the top-level menu, then select the **Invitations** tab. Select **Invite user** and enter the email address of the person you want to invite. Optionally, set an expiration date for the invitation. Once you've entered the necessary details, select **Send invite** to send the invitation email.

Tip

The same page will be available through the top-level menu, when you are in the **Restricted** sign-up mode.

### [Using Backend API](https://clerk.com/docs/users/invitations\#using-backend-api)

You can either use a cURL command or the [JavaScript Backend SDK](https://clerk.com/docs/references/backend/overview) to create an invitation. Clerk's JavaScript Backend SDK is a wrapper around the Backend API that makes it easier to interact with the API. Use the following tabs to see examples for each method.

cURL

Backend SDK

The following example demonstrates how to create an invitation using cURL.

Replace the email address with the email address you want to invite. Update `YOUR_SECRET_KEY` with your Clerk Secret Key which can be found on the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl https://api.clerk.com/v1/invitations -X POST -d '{"email_address": "email@example.com"}' -H "Authorization:Bearer YOUR_SECRET_KEY" -H 'Content-Type:application/json'
```

See the [Backend API reference⁠](https://clerk.com/docs/reference/backend-api/tag/Invitations#operation/CreateInvitation) for an example of the response.

### [Redirect URL](https://clerk.com/docs/users/invitations\#redirect-url)

When you create an invitation, you can specify a `redirect_url` parameter. This parameter tells Clerk where to redirect the user when they visit the invitation link.

The following example demonstrates how to use cURL to create an invitation with the `redirect_url` set to `https://www.example.com/accept-invitation`:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl https://api.clerk.com/v1/invitations -X POST -d '{"email_address": "email@example.com", "redirect_url": "https://www.example.com/accept-invitation"}' -H "Authorization:Bearer YOUR_SECRET_KEY" -H 'Content-Type:application/json'
```

Once the user visits the invitation link, they will be redirected to the page you specified, which means you must handle the sign-up flow in your code for that page. You can either embed the [`<SignUp />`](https://clerk.com/docs/components/authentication/sign-up) component on that page, or if the prebuilt component doesn't meet your specific needs or if you require more control over the logic, you can build a [custom flow](https://clerk.com/docs/custom-flows/application-invitations).

Tip

- To test redirect URLs in your development environment, pass your port (e.g. `http://localhost:3000`).
- To use the Account Portal, pass the URL provided by Clerk on the [**Account Portal**⁠](https://dashboard.clerk.com/last-active?path=account-portal) page in the Clerk Dashboard. For example, `https://prepared-phoenix-98.accounts.dev/sign-up` redirects the user to the Account Portal sign-up page.

### [Invitation metadata](https://clerk.com/docs/users/invitations\#invitation-metadata)

You can also add metadata to an invitation. Once the invited user signs up using the invitation link, the invitation metadata will end up in the user's `public_metadata`. You can find more information about user metadata in the [metadata](https://clerk.com/docs/users/metadata) docs.

To add metadata to an invitation, you can use the `public_metadata` property when the invitation is created.

The following example demonstrates how to create an invitation with metadata using cURL.

Replace the email address with the email address you want to invite, and the `public_metadata` with the metadata you want to add. Update `YOUR_SECRET_KEY` with your Clerk Secret Key which can be found on the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl https://api.clerk.com/v1/invitations -X POST -d '{"email_address": "email@example.com", "public_metadata": {"age": "21"}}' -H "Authorization:Bearer YOUR_SECRET_KEY" -H 'Content-Type:application/json'
```

## [Revoking invitations](https://clerk.com/docs/users/invitations\#revoking-invitations)

You can revoke an invitation at any time. Revoking an invitation prevents the user from using the invitation link that was sent to them. You can revoke an invitation in the [Clerk Dashboard](https://clerk.com/docs/users/invitations#using-clerk-dashboard-2) or [using the Backend API](https://clerk.com/docs/users/invitations#using-backend-api-2).

### [Using Clerk Dashboard](https://clerk.com/docs/users/invitations\#using-clerk-dashboard-2)

To revoke an invitation, navigate to the **Users** page from the top-level menu, then select the **Invitations** tab. Find the invitation you want to revoke and select **Revoke** from the dropdown menu on the right.

Tip

The same page will be available through the top-level menu, when you are in the **Restricted** sign-up mode.

### [Using Backend API](https://clerk.com/docs/users/invitations\#using-backend-api-2)

You can either use a cURL command or the [JavaScript Backend SDK](https://clerk.com/docs/references/backend/overview) to revoke an invitation. Use the following tabs to see examples for each method.

cURL

Backend SDK

The following example demonstrates how to revoke an invitation using cURL.

Replace the `<invitation_id>` with the ID of the invitation you want to revoke and replace `YOUR_SECRET_KEY` with your Clerk Secret Key. You can find your Secret Key on the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl https://api.clerk.com/v1/invitations/<invitation_id>/revoke -X POST -H "Authorization:Bearer YOUR_SECRET_KEY" -H 'Content-Type:application/json'
```

See the [Backend API reference⁠](https://clerk.com/docs/reference/backend-api/tag/Invitations#operation/RevokeInvitation) for an example of the response.

Warning

Revoking an invitation does **not** prevent the user from signing up on their own. If you're looking to restrict access to invited users only, refer to the [**Restricted** sign-up mode](https://clerk.com/docs/authentication/configuration/restrictions#sign-up-modes).

## [Custom flow](https://clerk.com/docs/users/invitations\#custom-flow)

Clerk's [prebuilt components](https://clerk.com/docs/components/overview) and [Account Portal pages](https://clerk.com/docs/account-portal/overview) handle the sign-up flow for you, including the invitation flow. If Clerk's prebuilt components don't meet your specific needs or if you require more control over the logic, you can rebuild the existing Clerk flows using the Clerk API. For more information, see the [custom flow for application invitations](https://clerk.com/docs/custom-flows/application-invitations).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/users/invitations.mdx)

Last updated onMar 6, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628867045&cv=11&fst=1741628867045&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102791783~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Fusers%2Finvitations&hn=www.googleadservices.com&frm=0&tiba=Users%3A%20Invite%20users%20to%20your%20application&npa=0&pscdl=noapi&auid=968584953.1741628867&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## User Reverification Guide
[Skip to main content](https://clerk.com/docs/guides/reverification#main)

1. [How to require reverification](https://clerk.com/docs/guides/reverification#how-to-require-reverification)
1. [Handle reverification server-side](https://clerk.com/docs/guides/reverification#handle-reverification-server-side)
2. [Handle reverification client-side](https://clerk.com/docs/guides/reverification#handle-reverification-client-side)
2. [Supported reverification configurations](https://clerk.com/docs/guides/reverification#supported-reverification-configurations)
3. [Caveats](https://clerk.com/docs/guides/reverification#caveats)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/reverification.mdx)

# Add reverification for sensitive actions

Warning

This feature is currently in public beta. **It is not recommended for production use**.

Depending on the SDK you're using, this feature requires `@clerk/nextjs@6.5.0` or later, `@clerk/clerk-sdk-ruby@3.3.0` or later, and `@clerk/clerk-js@5.35.0` or later.

Reverification allows you to prompt a user to verify their credentials before performing sensitive actions, even if they're already authenticated. For example, in a banking application, transferring money is considered a "sensitive action." Reverification can be used to confirm the user's identity.

## [How to require reverification](https://clerk.com/docs/guides/reverification\#how-to-require-reverification)

To implement reverification, you need to handle it both on the server- and client-side.

### [Handle reverification server-side](https://clerk.com/docs/guides/reverification\#handle-reverification-server-side)

To handle reverification server-side, use the [`auth.has()`](https://clerk.com/docs/references/backend/types/auth-object#has) helper to check if the user has verified their credentials within a specific time period. Pass a [configuration](https://clerk.com/docs/guides/reverification#supported-verification-configurations) to set the time period you would like. If the user hasn't verified their credentials within that time period, return either `reverificationError` or `reverificationErrorResponse`, depending on the framework you're using. Use the following tabs to see examples for different frameworks.

Next.js Server Action

Next.js Route Handler

Ruby on Rails

Other

The following example uses the [`has()`](https://clerk.com/docs/references/backend/types/auth-object#has) helper to check if the user has verified their credentials within a specific time period. The `strict` configuration sets the time period to 10 minutes. If the user hasn't verified their credentials within 10 minutes, the `reverificationError` utility is used to return an error.

app/actions.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use server'

import { auth, reverificationError } from '@clerk/nextjs/server'

export const myAction = async () => {
  const { has } = await auth.protect()

  // Check if the user has *not* verified their credentials within the past 10 minutes
  const shouldUserRevalidate = !has({ reverification: 'strict' })

  // If the user hasn't reverified, return an error with the matching configuration (e.g. `strict`)
  if (shouldUserRevalidate) {
    return reverificationError('strict')
  }

  // If the user has verified credentials, return a successful response
  return { success: true }
}
```

### [Handle reverification client-side](https://clerk.com/docs/guides/reverification\#handle-reverification-client-side)

After setting up reverification on the server-side, you must handle reverification on the client-side.

The following example demonstrates how to use the [`useReverification()`](https://clerk.com/docs/hooks/use-reverification) hook to detect authorization errors and automatically display a modal that allows the user to verify their identity. Upon successful verification, the previously failed request is automatically retried.

Next.js Server Action

Next.js Route Handler

React

app/perform-action/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { useReverification } from '@clerk/nextjs'
import { myAction } from '../actions'

export default function Page() {
  const [performAction] = useReverification(myAction)

  const handleClick = async () => {
    const myData = await performAction()
    // If `myData` is null, the user cancelled the reverification process
    // You can choose how your app responds. This example returns null.
    if (!myData) return
  }

  return <button onClick={handleClick}>Perform action</button>
}
```

## [Supported reverification configurations](https://clerk.com/docs/guides/reverification\#supported-reverification-configurations)

To define the time period of the reverification check, you can pass the one of the following configurations to the `has()` helper: `strict_mfa`, `strict`, `moderate`, and `lax`. See the [`has()` reference doc](https://clerk.com/docs/references/backend/types/auth-object#check-authorization-params-with-custom-permissions) for more details.

## [Caveats](https://clerk.com/docs/guides/reverification\#caveats)

Before enabling this feature, consider the following:

1. **Available factors for reverification**: Not all authentication factors are supported for reverification. The available options are:


- First factors: password, email code, phone code
- Second factors: phone code, authenticator app, backup code

2. **Graceful downgrade of verification level**: If you request a `second_factor` or `multi_factor` level of verification but the user lacks a second factor available, the utilities automatically downgrade the requested level to `first_factor`.
3. **Eligibility for sensitive actions**: Users without any of the above factors cannot reverify. This can be an issue for apps that don't require email addresses to sign up or have disabled email codes in favor of email links.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/reverification.mdx)

Last updated onMar 8, 2025

Support

## React Clerk Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/react#main)

1. [Create a React app using Vite](https://clerk.com/docs/quickstarts/react#create-a-react-app-using-vite)
2. [Install `@clerk/clerk-react`](https://clerk.com/docs/quickstarts/react#install-clerk-clerk-react)
3. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/react#set-your-clerk-api-keys)
4. [Import the Clerk Publishable Key](https://clerk.com/docs/quickstarts/react#import-the-clerk-publishable-key)
5. [Add `<ClerkProvider>` to your app](https://clerk.com/docs/quickstarts/react#add-clerk-provider-to-your-app)
6. [Create a header with Clerk components](https://clerk.com/docs/quickstarts/react#create-a-header-with-clerk-components)
7. [Create your first user](https://clerk.com/docs/quickstarts/react#create-your-first-user)
8. [Next step: Add routing with React Router](https://clerk.com/docs/quickstarts/react#next-step-add-routing-with-react-router)
9. [More resources](https://clerk.com/docs/quickstarts/react#more-resources)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/react.mdx)

# React Quickstart

## You will learn the following:

- Create a new React app using Vite
- Install `@clerk/clerk-react`
- Set your Clerk API keys
- Add `<ClerkProvider>`
- Create a header with Clerk components for users to sign in and out

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)

## Example repository

- [React Quickstart Repo](https://github.com/clerk/clerk-react-quickstart)

## [Create a React app using Vite](https://clerk.com/docs/quickstarts/react\#create-a-react-app-using-vite)

Run the following commands to create a new React app using [Vite⁠](https://vitejs.dev/guide/#scaffolding-your-first-vite-project):

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm create vite@latest clerk-react -- --template react-ts
cd clerk-react
npm install
npm run dev
```

## [Install `@clerk/clerk-react`](https://clerk.com/docs/quickstarts/react\#install-clerk-clerk-react)

The [Clerk React SDK](https://clerk.com/docs/references/react/overview) gives you access to prebuilt components, hooks, and helpers to make user authentication easier.

Run the following command to install the SDK:

npm

yarn

pnpm

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/clerk-react
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/react\#set-your-clerk-api-keys)

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable Key.
3. Paste your key into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
VITE_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
```

## [Import the Clerk Publishable Key](https://clerk.com/docs/quickstarts/react\#import-the-clerk-publishable-key)

In your `main.tsx` file, import your Clerk Publishable Key. You can add an `if` statement to check that it is imported and that it exists. This will prevent running the app without the Publishable Key, and will also prevent TypeScript errors.

src/main.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

// Import your Publishable Key
const PUBLISHABLE_KEY = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

if (!PUBLISHABLE_KEY) {
  throw new Error('Add your Clerk Publishable Key to the .env file')
}

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
```

## [Add `<ClerkProvider>` to your app](https://clerk.com/docs/quickstarts/react\#add-clerk-provider-to-your-app)

The [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider) component provides session and user context to Clerk's hooks and components. It's recommended to wrap your entire app at the entry point with `<ClerkProvider>` to make authentication globally accessible. See the [reference docs](https://clerk.com/docs/components/clerk-provider) for other configuration options.

Pass your Publishable Key as a prop to the component.

src/main.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { ClerkProvider } from '@clerk/clerk-react'

// Import your Publishable Key
const PUBLISHABLE_KEY = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

if (!PUBLISHABLE_KEY) {
  throw new Error('Add your Clerk Publishable Key to the .env file')
}

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <ClerkProvider publishableKey={PUBLISHABLE_KEY} afterSignOutUrl="/">
      <App />
    </ClerkProvider>
  </React.StrictMode>,
)
```

## [Create a header with Clerk components](https://clerk.com/docs/quickstarts/react\#create-a-header-with-clerk-components)

You can control which content signed-in and signed-out users can see with the [prebuilt control components](https://clerk.com/docs/components/overview#control-components). The following example creates a header using the following components:

- [`<SignedIn>`](https://clerk.com/docs/components/control/signed-in): Children of this component can only be seen while **signed in**.
- [`<SignedOut>`](https://clerk.com/docs/components/control/signed-out): Children of this component can only be seen while **signed out**.
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button): Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.
- [`<SignInButton />`](https://clerk.com/docs/components/unstyled/sign-in-button): An unstyled component that links to the sign-in page or displays the sign-in modal.

src/App.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { SignedIn, SignedOut, SignInButton, UserButton } from '@clerk/clerk-react'

export default function App() {
  return (
    <header>
      <SignedOut>
        <SignInButton />
      </SignedOut>
      <SignedIn>
        <UserButton />
      </SignedIn>
    </header>
  )
}
```

## [Create your first user](https://clerk.com/docs/quickstarts/react\#create-your-first-user)

Run your project with the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm run dev
```

Visit your app's homepage at [`http://localhost:5173`⁠](http://localhost:5173/). Sign up to create your first user.

## [Next step: Add routing with React Router](https://clerk.com/docs/quickstarts/react\#next-step-add-routing-with-react-router)

React Router can be integrated with Clerk in two ways:

- As a framework: Use Clerk's built-in [React Router integration](https://clerk.com/docs/quickstarts/react-router)
- As a library: Manually integrate React Router into your Clerk application using [library mode](https://clerk.com/docs/references/react-router/library-mode)

## [More resources](https://clerk.com/docs/quickstarts/react\#more-resources)

Learn more about Clerk components, how to customize them, and how to use Clerk's client-side helpers using the following guides.

### [Prebuiltcomponents](https://clerk.com/docs/components/overview)

Learn more about Clerk's suite of components that let you quickly add authentication to your app.

### [Customization&localization](https://clerk.com/docs/customization/overview)

Learn how to customize and localize Clerk components.

### [Client-sidehelpers(hooks)](https://clerk.com/docs/hooks/use-user)

Learn more about Clerk's client-side helpers and how to use them.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/react.mdx)

Last updated onMar 8, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628866761&cv=11&fst=1741628866761&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102614960~102640600~102717422~102788824~102791783~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Fquickstarts%2Freact&hn=www.googleadservices.com&frm=0&tiba=React%3A%20React%20Quickstart&npa=0&pscdl=noapi&auid=196405155.1741628867&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Clerk Vue Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/vue#main)

1. [Create a Vue app using Vite](https://clerk.com/docs/quickstarts/vue#create-a-vue-app-using-vite)
2. [Install `@clerk/vue`](https://clerk.com/docs/quickstarts/vue#install-clerk-vue)
3. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/vue#set-your-clerk-api-keys)
4. [Import the Clerk Publishable Key](https://clerk.com/docs/quickstarts/vue#import-the-clerk-publishable-key)
5. [Add `clerkPlugin` to your app](https://clerk.com/docs/quickstarts/vue#add-clerk-plugin-to-your-app)
6. [Create a header with Clerk components](https://clerk.com/docs/quickstarts/vue#create-a-header-with-clerk-components)
7. [Create your first user](https://clerk.com/docs/quickstarts/vue#create-your-first-user)
8. [More resources](https://clerk.com/docs/quickstarts/vue#more-resources)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/vue.mdx)

# Vue Quickstart

## You will learn the following:

- Create a new Vue app using Vite
- Install `@clerk/vue`
- Set your Clerk API keys
- Add `clerkPlugin`
- Create a header with Clerk components

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)

## Example repository

- [Vue Quickstart Repo](https://github.com/clerk/clerk-vue-quickstart)

This tutorial assumes that you're using [Vue 3⁠](https://vuejs.org/) with [TypeScript⁠](https://www.typescriptlang.org/).

### [Create a Vue app using Vite](https://clerk.com/docs/quickstarts/vue\#create-a-vue-app-using-vite)

Run the following commands to create a new Vue app using [Vite⁠](https://vitejs.dev/guide/#scaffolding-your-first-vite-project):

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm create vite@latest clerk-vue -- --template vue-ts
cd clerk-vue
npm install
npm run dev
```

### [Install `@clerk/vue`](https://clerk.com/docs/quickstarts/vue\#install-clerk-vue)

The [Clerk Vue SDK](https://clerk.com/docs/references/vue/overview) gives you access to prebuilt components, composables, and helpers to make user authentication easier.

Run the following command to install the SDK:

npm

yarn

pnpm

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/vue
```

### [Set your Clerk API keys](https://clerk.com/docs/quickstarts/vue\#set-your-clerk-api-keys)

1. In the Clerk Dashboard, navigate to the [**API Keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable Key.
3. Paste your key into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
VITE_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
```

### [Import the Clerk Publishable Key](https://clerk.com/docs/quickstarts/vue\#import-the-clerk-publishable-key)

In your `main.ts` file, import your Clerk Publishable Key. You can add an `if` statement to check that the key is imported properly. This prevents the app from running without the Publishable Key and catches TypeScript errors.

src/main.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { createApp } from 'vue'
import './style.css'
import App from './App.vue'

const PUBLISHABLE_KEY = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

if (!PUBLISHABLE_KEY) {
  throw new Error('Add your Clerk Publishable Key to the .env file')
}

createApp(App).mount('#app')
```

### [Add `clerkPlugin` to your app](https://clerk.com/docs/quickstarts/vue\#add-clerk-plugin-to-your-app)

`clerkPlugin` provides active session and user context to Clerk's components and composables. It's required to pass your Publishable Key as an option.

src/main.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { createApp } from 'vue'
import './style.css'
import App from './App.vue'
import { clerkPlugin } from '@clerk/vue'

const PUBLISHABLE_KEY = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

if (!PUBLISHABLE_KEY) {
  throw new Error('Add your Clerk Publishable Key to the .env file')
}

const app = createApp(App)
app.use(clerkPlugin, { publishableKey: PUBLISHABLE_KEY })
app.mount('#app')
```

### [Create a header with Clerk components](https://clerk.com/docs/quickstarts/vue\#create-a-header-with-clerk-components)

You can control which content signed-in and signed-out users can see with Clerk's [prebuilt control components](https://clerk.com/docs/components/overview#control-components). The following example creates a header using the following components:

- [`<SignedIn>`](https://clerk.com/docs/components/control/signed-in): Children of this component can only be seen while **signed in**.
- [`<SignedOut>`](https://clerk.com/docs/components/control/signed-out): Children of this component can only be seen while **signed out**.
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button): Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.
- [`<SignInButton />`](https://clerk.com/docs/components/unstyled/sign-in-button): An unstyled component that links to the sign-in page or displays the sign-in modal.

src/App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { SignedIn, SignedOut, SignInButton, UserButton } from '@clerk/vue'
</script>

<template>
  <header>
    <SignedOut>
      <SignInButton />
    </SignedOut>
    <SignedIn>
      <UserButton />
    </SignedIn>
  </header>
</template>
```

### [Create your first user](https://clerk.com/docs/quickstarts/vue\#create-your-first-user)

Run your project with the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm run dev
```

Visit your app's homepage at [`http://localhost:5173`⁠](http://localhost:5173/). Sign up to create your first user.

## [More resources](https://clerk.com/docs/quickstarts/vue\#more-resources)

Learn more about Clerk components, how to customize them, and how to use Clerk's client-side helpers using the following guides.

### [Prebuiltcomponents](https://clerk.com/docs/components/overview)

Learn more about Clerk's suite of components that let you quickly add authentication to your app.

### [Customization&localization](https://clerk.com/docs/customization/overview)

Learn how to customize and localize Clerk components.

### [Client-sidehelpers(composables)](https://clerk.com/docs/references/vue/use-user)

Learn more about Clerk's client-side helpers and how to use them.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/vue.mdx)

Last updated onFeb 25, 2025

Support

## User Invitations Guide
[Skip to main content](https://clerk.com/docs/organizations/invitations#main)

1. [Create an invitation](https://clerk.com/docs/organizations/invitations#create-an-invitation)
1. [Client-side](https://clerk.com/docs/organizations/invitations#client-side)
2. [Server-side](https://clerk.com/docs/organizations/invitations#server-side)
3. [Redirect URL](https://clerk.com/docs/organizations/invitations#redirect-url)
4. [Invitation metadata](https://clerk.com/docs/organizations/invitations#invitation-metadata)
2. [Revoke an invitation](https://clerk.com/docs/organizations/invitations#revoke-an-invitation)
1. [Client-side](https://clerk.com/docs/organizations/invitations#client-side-2)
2. [Server-side](https://clerk.com/docs/organizations/invitations#server-side-2)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/invitations.mdx)

# Invite users to your organization

Organization invitations allow you to add new members to your organization. When you send an invitation, Clerk sends an email to the invited user with a unique invitation link. When the user visits the organization invitation link, they will be redirected to the [Account Portal sign-in page](https://clerk.com/docs/account-portal/overview#sign-in). If the user is already signed in, they will be redirected to your application's homepage ( `/`). If you want to redirect the user to a specific page in your application, you can [specify a redirect URL when creating the invitation](https://clerk.com/docs/organizations/invitations#redirect-url).

By default, only admins can invite users to an organization.

This feature requires that **Email address** is enabled as an [identifier](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options#identifiers), as Clerk uses the user's email address to send the invitation. You can still disable **Email address** as an authentication option if you do not want users to be able to sign-in with their email address.

To configure your application's **Email address** settings:

1. In the Clerk Dashboard, navigate to the [**Email, phone, username**⁠](https://dashboard.clerk.com/last-active?path=user-authentication/email-phone-username) page.
2. In the **Contact information** section, ensure that **Email address** is enabled.
3. Next to **Email address**, select the settings icon to configure the email address settings. Here, at least **Require** should be enabled in order to send invitations.

## [Create an invitation](https://clerk.com/docs/organizations/invitations\#create-an-invitation)

Clerk's [prebuilt components](https://clerk.com/docs/components/overview) and [Account Portal pages](https://clerk.com/docs/account-portal/overview) manage all organization invitation flows, including creating, managing, and accepting invitations.

However, if you want to build custom flows, see the following sections.

### [Client-side](https://clerk.com/docs/organizations/invitations\#client-side)

To create an organization invitation on the client-side, see the [dedicated guide](https://clerk.com/docs/custom-flows/manage-organization-invitations). Note that this uses the [`organizations.inviteMember()`](https://clerk.com/docs/references/javascript/organization#invite-member) method, which does not allow you to specify a redirect URL; it will always redirect to the Account Portal sign-in page. If you want to specify a redirect URL, you must create the invitation on the server-side.

### [Server-side](https://clerk.com/docs/organizations/invitations\#server-side)

To create organization invitations on the server-side, use the [Backend API⁠](https://clerk.com/docs/reference/backend-api/tag/Organization-Invitations#operation/CreateOrganizationInvitation) either by using a cURL command or the [JavaScript Backend SDK](https://clerk.com/docs/references/backend/overview). The JavaScript Backend SDK is a wrapper around the Backend API that makes it easier to interact with the API.

Use the following tabs to see examples for each method.

cURL

Backend SDK

The following example demonstrates how to create an organization invitation using cURL.

- Replace `YOUR_SECRET_KEY` with your Clerk Secret Key. You can find your Secret Key on the [**API Keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.
- Replace the `org_123` with the ID of the organization you want to invite the user to.
- Replace the `user_123` with the ID of the user who is inviting the other user.
- Replace the email address with the email address you want to invite.
- Replace the `role` with the role you want to assign to the invited user.

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl 'https://api.clerk.com/v1/organizations/{org_123}/invitations' \
-X POST \
-H 'Authorization: Bearer YOUR_SECRET_KEY' \
-H 'Content-Type: application/json' \
-d '{ "inviter_user_id": "user_123", "email_address": "email@example.com", "role": "org:member" }'
```

For an example of the response, see the [Backend API reference⁠](https://clerk.com/docs/reference/backend-api/tag/Organization-Invitations#operation/CreateOrganizationInvitation).

### [Redirect URL](https://clerk.com/docs/organizations/invitations\#redirect-url)

When you create an invitation, you can specify a `redirect_url` parameter. This parameter tells Clerk where to redirect the user when they visit the invitation link.

The following example demonstrates how to use cURL to create an invitation with the `redirect_url` set to `https://www.example.com/accept-invitation`.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl 'https://api.clerk.com/v1/organizations/{org_123}/invitations' \
  -X POST \
  -H 'Authorization: Bearer YOUR_SECRET_KEY' \
  -H 'Content-Type: application/json' \
  -d '{ "inviter_user_id": "user_123", "email_address": "email@example.com", "role": "org:member", "redirect_url": "https://www.example.com/accept-invitation" }'
```

Once the user visits the invitation link, they will be redirected to the page you specified. On that page, you must handle the authentication flow in your code. You can either embed the [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in) component or, if the prebuilt component doesn't meet your needs or you require more control over the logic, you can build a [custom flow](https://clerk.com/docs/custom-flows/accept-organization-invitations).

Tip

- To test redirect URLs in your development environment, pass your port. For example, `http://localhost:3000/accept-invitation`.

### [Invitation metadata](https://clerk.com/docs/organizations/invitations\#invitation-metadata)

You can also add metadata to an invitation when creating the invitation through the Backend API. Once the invited user signs up using the invitation link, the **invitation** metadata ( `OrganizationInvitation.publicMetadata`) will be stored in the organization **membership's** metadata ( `OrganizationMembership.publicMetadata`). You can find more information about organization membership metadata in the [Organization Membership](https://clerk.com/docs/references/javascript/types/organization-membership) docs.

To add metadata to an invitation, add the `public_metadata` parameter when creating the invitation.

The following example demonstrates how to use cURL to create an invitation with metadata.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl 'https://api.clerk.com/v1/organizations/{org_123}/invitations' \
  -X POST \
  -H 'Authorization: Bearer YOUR_SECRET_KEY' \
  -H 'Content-Type: application/json' \
  -d '{ "inviter_user_id": "user_123", "email_address": "email@example.com", "role": "org:member", "public_metadata": {"department": "marketing"} }'
```

## [Revoke an invitation](https://clerk.com/docs/organizations/invitations\#revoke-an-invitation)

Revoking an invitation prevents the user from using the invitation link that was sent to them.

### [Client-side](https://clerk.com/docs/organizations/invitations\#client-side-2)

To revoke an invitation client-side, see the [dedicated guide](https://clerk.com/docs/custom-flows/manage-organization-invitations).

### [Server-side](https://clerk.com/docs/organizations/invitations\#server-side-2)

To revoke an invitation server-side, use the [Backend API⁠](https://clerk.com/docs/reference/backend-api/tag/Organization-Invitations#operation/RevokeOrganizationInvitation). either by using a cURL command or the [JavaScript Backend SDK](https://clerk.com/docs/references/backend/overview). The JavaScript Backend SDK is a wrapper around the Backend API that makes it easier to interact with the API.

Use the following tabs to see examples for each method.

cURL

Backend SDK

The following example demonstrates how to revoke an invitation using cURL.

- Replace `YOUR_SECRET_KEY` with your Clerk Secret Key. You can find your Secret Key on the [**API Keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.
- Replace the `inv_123` with the ID of the invitation you want to revoke.
- Replace the `user_123` with the ID of the user who is revoking the invitation.

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl 'https://api.clerk.com/v1/organizations/{org_123}/invitations/{inv_123}/revoke' \
  -X POST \
  -H 'Authorization: Bearer YOUR_SECRET_KEY' \
  -H 'Content-Type: application/json' \
  -d '{ "requesting_user_id": "user_123" }'
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/invitations.mdx)

Last updated onFeb 25, 2025

Support

[iframe](https://td.doubleclick.net/td/rul/11313383806?random=1741628866734&cv=11&fst=1741628866734&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be5362v9167868582za200&gcd=13t3t3l3l5l1&dma=0&tag_exp=102067808~102482433~102539968~102587591~102640600~102717422~102788824~102825837&u_w=1280&u_h=1024&url=https%3A%2F%2Fclerk.com%2Fdocs%2Forganizations%2Finvitations&hn=www.googleadservices.com&frm=0&tiba=Organizations%2C%20Roles%2C%20and%20Permissions%3A%20Invite%20users%20to%20your%20organization&npa=0&pscdl=noapi&auid=275266628.1741628867&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)

## Clerk Form Errors
[Skip to main content](https://clerk.com/docs/errors/forms#main)

1. [`FormPasswordLengthTooShortCode`](https://clerk.com/docs/errors/forms#form-password-length-too-short-code)
2. [`FormInvalidPasswordLengthTooLong`](https://clerk.com/docs/errors/forms#form-invalid-password-length-too-long)
3. [`FormPasswordIncorrectCode`](https://clerk.com/docs/errors/forms#form-password-incorrect-code)
4. [`FormIdentifierNotFoundCode`](https://clerk.com/docs/errors/forms#form-identifier-not-found-code)
5. [`FormIdentifierExistsCode`](https://clerk.com/docs/errors/forms#form-identifier-exists-code)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/forms.mdx)

# Form errors

An index of Clerk errors related to forms.

## [`FormPasswordLengthTooShortCode`](https://clerk.com/docs/errors/forms\#form-password-length-too-short-code)

Signifies an error when the password is invalid because it is too short.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Passwords must be %d characters or more.",
  "code": "form_password_length_too_short"
}
```

## [`FormInvalidPasswordLengthTooLong`](https://clerk.com/docs/errors/forms\#form-invalid-password-length-too-long)

Signifies an error when the password is invalid because it is too long.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Passwords must be less than %d characters.",
  "code": "form_password_length_too_long"
}
```

## [`FormPasswordIncorrectCode`](https://clerk.com/docs/errors/forms\#form-password-incorrect-code)

Signifies an error when the given password is incorrect.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Password is incorrect. Try again, or use another method.",
  "code": "form_password_incorrect"
}
```

## [`FormIdentifierNotFoundCode`](https://clerk.com/docs/errors/forms\#form-identifier-not-found-code)

Signifies an error when a required [identifier](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options#identifiers) is not found.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Couldn't find your account.",
  "code": "form_identifier_not_found"
}
```

## [`FormIdentifierExistsCode`](https://clerk.com/docs/errors/forms\#form-identifier-exists-code)

Signifies an error when a given [identifier](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options#identifiers) already exists.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "That %s is taken. Please try another.",
  "code": "form_identifier_exists"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/forms.mdx)

Last updated onAug 29, 2024

Support

## Clerk Integrations Overview
[Skip to main content](https://clerk.com/docs/integrations/overview#main)

1. [Connect with databases and more](https://clerk.com/docs/integrations/overview#connect-with-databases-and-more)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/overview.mdx)

# Integrations

## [Connect with databases and more](https://clerk.com/docs/integrations/overview\#connect-with-databases-and-more)

### [Convex](https://clerk.com/docs/integrations/databases/convex)

Clerk integrates with Convex, the serverless state management platform, using our JSON Web Tokens (JWT) Templates feature.

### [Fauna](https://clerk.com/docs/integrations/databases/fauna)

Build applications using Fauna, the distributed document-relational database, with Clerk as your authentication provider.

### [Firebase](https://clerk.com/docs/integrations/databases/firebase)

Clerk integrates directly with Firebase, a popular Platform-as-a-Service (PaaS) provider, so developers can easily add our beautiful Sign Up, Sign In, and User Profile UIs to their Firebase application.

### [GoogleAnalytics](https://clerk.com/docs/integrations/analytics/google-analytics)

Send user authentication events to your Google Analytics property to enable metrics tracking on user sign up and sign in events.

### [Grafbase](https://clerk.com/docs/integrations/databases/grafbase)

Build applications with serverless GraphQL backends provided by Grafbase and user authentication provided by Clerk.

### [Hasura](https://clerk.com/docs/integrations/databases/hasura)

Easily connect to your Hasura GraphQL endpoint using Clerk as your authentication provider.

![](<Base64-Image-Removed>)

### [Inngest](https://clerk.com/docs/webhooks/inngest)

Use events from Clerk to trigger functions defined in your codebase with Inngest. Easily handle data synchronization, onboarding campaigns, or billing workflows in code.

### [Instant](https://clerk.com/docs/integrations/databases/instantdb)

Clerk has a default integration with Instant. You get all the auth features of Clerk, and a relational database you can use directly from the browser.

### [Neon](https://clerk.com/docs/integrations/databases/neon)

Build applications using Neon's serverless Postgres database with Clerk as your authentication provider.

### [Nhost](https://clerk.com/docs/integrations/databases/nhost)

The open source alternative to Firebase with GraphQL seamlessly integrates with Clerk to provide authenticated queries.

### [Shopify](https://clerk.com/docs/integrations/shopify)

Use Clerk as your preferred Auth solution for your Shopify store.

### [Supabase](https://clerk.com/docs/integrations/databases/supabase)

Clerk embraces the open source alternative to Firebase and provides an integration to Supabase with our JSON Web Tokens (JWT) Templates feature.

## [Join our Discord](https://clerk.com/discord)

Join our official Discord server to chat with us directly and become a part of the Clerk community.

Join Discord

Join Discord

## [Need help?](https://clerk.com/support)

Contact us through Discord, Twitter, or email to receive answers to your questions and learn more about Clerk.

Get help

Get help

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/overview.mdx)

Last updated onFeb 20, 2025

Support

## Clerk Error Codes
[Skip to main content](https://clerk.com/docs/errors/overview#main)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/overview.mdx)

# Errors overview

Clerk uses a set of error codes to communicate the status of an operation.

An error's type is not always enough to understand what went wrong. In these cases, Clerk provides a more detailed error message that can help you understand the issue. Select the appropriate category in the sidenav to see the list of errors and their descriptions.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/overview.mdx)

Last updated onFeb 25, 2025

Support

## Identification Errors Guide
[Skip to main content](https://clerk.com/docs/errors/identifications#main)

1. [`IdentificationNotFound`](https://clerk.com/docs/errors/identifications#identification-not-found)
2. [`LastIdentificationDeletionFailed`](https://clerk.com/docs/errors/identifications#last-identification-deletion-failed)
3. [`LastRequiredIdentificationDeletionFailed`](https://clerk.com/docs/errors/identifications#last-required-identification-deletion-failed)
4. [`LastIdentificationSetFor2FAFailed`](https://clerk.com/docs/errors/identifications#last-identification-set-for2-fa-failed)
5. [`UpdateSecondFactorUnverified`](https://clerk.com/docs/errors/identifications#update-second-factor-unverified)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/identifications.mdx)

# Identification errors

An index of Clerk errors related to identification, such as phone numbers and email addresses.

## [`IdentificationNotFound`](https://clerk.com/docs/errors/identifications\#identification-not-found)

Signifies an error when an identification is not found.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Resource not found",
  "longMessage": "No resource was found for ID <resourceID>",
  "code": "resource_not_found_code"
}
```

## [`LastIdentificationDeletionFailed`](https://clerk.com/docs/errors/identifications\#last-identification-deletion-failed)

Signifies an error when trying to delete an identification associated with a user, but it is the last one associated with the user. The user must have at least one identification associated with their account at all times.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Deletion failed",
  "longMessage": "You cannot delete your last identification.",
  "code": "identification_deletion_failed_code"
}
```

## [`LastRequiredIdentificationDeletionFailed`](https://clerk.com/docs/errors/identifications\#last-required-identification-deletion-failed)

Signifies an error when trying to delete an identification associated with a user, but it is the last one associated with the user. The user must have at least one identification associated with their account at all times.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Deleting your last <sanitizedIdentType> is prohibited",
  "longMessage": "You are required to maintain at least one <sanitizedIdentType> in your account at all times",
  "code": "last_required_identification_deletion_failed_code"
}
```

## [`LastIdentificationSetFor2FAFailed`](https://clerk.com/docs/errors/identifications\#last-identification-set-for2-fa-failed)

Signifies an error when trying to set the only identification associated with the user as a second factor. The user must have at least two identifications associated with their account before they can set one as a second factor.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Update failed",
  "longMessage": "You cannot set your last identification as second factor.",
  "code": "identification_set_for2_f_a_failed_code"
}
```

## [`UpdateSecondFactorUnverified`](https://clerk.com/docs/errors/identifications\#update-second-factor-unverified)

Signifies an error when trying to update second factor attributes for an identification that is not verified. The identification must be verified before it can be used as a second factor.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Update failed",
  "longMessage": "Cannot update second factor attributes for unverified identification",
  "code": "identification_update_second_factor_unverified"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/identifications.mdx)

Last updated onAug 16, 2024

Support

## Remix Authentication Guide
[Skip to main content](https://clerk.com/docs/quickstarts/remix#main)

1. [Install `@clerk/remix`](https://clerk.com/docs/quickstarts/remix#install-clerk-remix)
2. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/remix#set-your-clerk-api-keys)
3. [Configure `rootAuthLoader()`](https://clerk.com/docs/quickstarts/remix#configure-root-auth-loader)
4. [Configure `ClerkApp`](https://clerk.com/docs/quickstarts/remix#configure-clerk-app)
5. [Protect your pages](https://clerk.com/docs/quickstarts/remix#protect-your-pages)
6. [Create your first user](https://clerk.com/docs/quickstarts/remix#create-your-first-user)
7. [Next steps](https://clerk.com/docs/quickstarts/remix#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/remix.mdx)

# Remix Quickstart

## You will learn the following:

- Install `@clerk/remix`
- Set your Clerk API keys
- Configure `rootAuthLoader`
- Configure `ClerkApp`
- Protect your pages

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create a Remix application](https://remix.run/docs/en/main/start/quickstart)

## Example repository

- [Remix Quickstart Repo](https://github.com/clerk/clerk-remix-quickstart)

Learn how to use Clerk to quickly and easily add secure authentication and user management to your Remix app. This guide assumes that you are using Remix v2 or later.

Note

If you are using Remix SPA mode, follow the [Remix SPA mode guide](https://clerk.com/docs/references/remix/spa-mode).

## [Install `@clerk/remix`](https://clerk.com/docs/quickstarts/remix\#install-clerk-remix)

The [Clerk Remix SDK](https://clerk.com/docs/references/remix/overview) gives you access to prebuilt components, hooks, and helpers to make user authentication easier.

Run the following command to install the SDK:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/remix
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @clerk/remix
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/remix
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @clerk/remix
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/remix\#set-your-clerk-api-keys)

Add the following keys to your `.env` file. These keys can always be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable and Secret Keys.
3. Paste your keys into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
CLERK_SECRET_KEY=YOUR_SECRET_KEY
```

## [Configure `rootAuthLoader()`](https://clerk.com/docs/quickstarts/remix\#configure-root-auth-loader)

The [`rootAuthLoader()`](https://clerk.com/docs/references/remix/root-auth-loader) function is a helper function that provides the authentication state to your Remix application. You must export `rootAuthLoader()` as the root `loader()` function.

Update your `root.tsx` file with the following code:

app/root.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import type { MetaFunction, LoaderFunction } from '@remix-run/node'
import { Links, Meta, Outlet, Scripts, ScrollRestoration } from '@remix-run/react'

// Import `rootAuthLoader()`
import { rootAuthLoader } from '@clerk/remix/ssr.server'

export const meta: MetaFunction = () => [\
  {\
    charset: 'utf-8',\
    title: 'New Remix App',\
    viewport: 'width=device-width,initial-scale=1',\
  },\
]

// Export `rootAuthLoader()` as the root route `loader`
export const loader: LoaderFunction = (args) => rootAuthLoader(args)

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  )
}

export default function App() {
  return <Outlet />
}
```

## [Configure `ClerkApp`](https://clerk.com/docs/quickstarts/remix\#configure-clerk-app)

Clerk provides a `ClerkApp` wrapper to provide the authentication state to your React tree. This helper works with Remix SSR out-of-the-box and follows the "higher-order component" paradigm.

Update your `root.tsx` file with the following code:

app/root.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import type { MetaFunction, LoaderFunction } from '@remix-run/node'

import { Links, Meta, Outlet, Scripts, ScrollRestoration } from '@remix-run/react'

import { rootAuthLoader } from '@clerk/remix/ssr.server'
// Import ClerkApp
import { ClerkApp } from '@clerk/remix'

export const meta: MetaFunction = () => [\
  {\
    charset: 'utf-8',\
    title: 'New Remix App',\
    viewport: 'width=device-width,initial-scale=1',\
  },\
]

export const loader: LoaderFunction = (args) => rootAuthLoader(args)

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  )
}

function App() {
  return <Outlet />
}

// Wrap your app with `ClerkApp`
export default ClerkApp(App)
```

## [Protect your pages](https://clerk.com/docs/quickstarts/remix\#protect-your-pages)

### [Client-side](https://clerk.com/docs/quickstarts/remix\#client-side)

To protect your pages on the client-side, Clerk's [prebuilt control components](https://clerk.com/docs/components/overview#control-components) control the visibility of content based on the user's authentication state.

The following example uses the following components:

- [`<SignedIn>`](https://clerk.com/docs/components/control/signed-in): Children of this component can only be seen while **signed in**.
- [`<SignedOut>`](https://clerk.com/docs/components/control/signed-out): Children of this component can only be seen while **signed out**.
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button): Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.
- [`<SignInButton />`](https://clerk.com/docs/components/unstyled/sign-in-button): An unstyled component that links to the sign-in page. In this example, since no props or [environment variables](https://clerk.com/docs/deployments/clerk-environment-variables) are set for the sign-in URL, this component links to the [Account Portal sign-in page](https://clerk.com/docs/account-portal/overview#sign-in).

routes/\_index.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import {
  SignInButton,
  SignOutButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from '@clerk/remix'

export default function Index() {
  return (
    <div>
      <h1>Index Route</h1>
      <SignedIn>
        <p>You are signed in!</p>

        <UserButton />
      </SignedIn>
      <SignedOut>
        <p>You are signed out</p>

        <SignInButton />
      </SignedOut>
    </div>
  )
}
```

### [Server-side](https://clerk.com/docs/quickstarts/remix\#server-side)

To protect your routes, use the [`getAuth()`](https://clerk.com/docs/references/nextjs/get-auth) function in your loader. This function retrieves the authentication state from the request object, returning an [`Auth`](https://clerk.com/docs/references/backend/types/auth-object) object that includes the `userId`, allowing you to determine if the user is authenticated.

routes/\_index.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { UserButton } from '@clerk/remix'
import { getAuth } from '@clerk/remix/ssr.server'
import { LoaderFunction, redirect } from '@remix-run/node'

export const loader: LoaderFunction = async (args) => {
  const { userId } = await getAuth(args)
  if (!userId) {
    return redirect('/sign-in')
  }
  return {}
}

export default function Index() {
  return (
    <div>
      <h1>Index route</h1>
      <p>You are signed in!</p>
      <UserButton />
    </div>
  )
}
```

## [Create your first user](https://clerk.com/docs/quickstarts/remix\#create-your-first-user)

Run your project with the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm run dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun dev
```

Visit your app's homepage at [`http://localhost:5173`⁠](http://localhost:5173/). Sign up to create your first user.

## [Next steps](https://clerk.com/docs/quickstarts/remix\#next-steps)

### [Createacustomsign-in-or-uppage](https://clerk.com/docs/references/remix/custom-sign-in-or-up-page)

Learn how add custom sign-in-or-up page with Clerk components.

### [Readuserandsessiondata](https://clerk.com/docs/references/remix/read-session-data)

Learn how to use Clerk's hooks and helpers to access the active session and user data in your Remix app.

### [Customization&localization](https://clerk.com/docs/customization/overview)

Learn how to customize and localize the Clerk components.

### [Clerkcomponents](https://clerk.com/docs/components/overview)

Learn more about the prebuilt components.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/remix.mdx)

Last updated onFeb 25, 2025

Support

## User Metadata Management
[Skip to main content](https://clerk.com/docs/users/metadata#main)

1. [Private metadata](https://clerk.com/docs/users/metadata#private-metadata)
1. [Set private metadata](https://clerk.com/docs/users/metadata#set-private-metadata)
2. [Retrieve private metadata](https://clerk.com/docs/users/metadata#retrieve-private-metadata)
2. [Public metadata](https://clerk.com/docs/users/metadata#public-metadata)
1. [Set public metadata](https://clerk.com/docs/users/metadata#set-public-metadata)
2. [Retrieve public metadata](https://clerk.com/docs/users/metadata#retrieve-public-metadata)
3. [Unsafe metadata](https://clerk.com/docs/users/metadata#unsafe-metadata)
1. [Set unsafe metadata](https://clerk.com/docs/users/metadata#set-unsafe-metadata)
2. [Retrieve unsafe metadata](https://clerk.com/docs/users/metadata#retrieve-unsafe-metadata)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/users/metadata.mdx)

# User metadata

Metadata allows for custom data to be saved on the [`User` object](https://clerk.com/docs/users/overview#user-object). There are three types of metadata: "unsafe", "public", and "private".

| Metadata | Frontend API | Backend API |
| --- | --- | --- |
| Private | No read or write access | Read & write access |
| Public | Read access | Read & write access |
| Unsafe | Read & write access | Read & write access |

Warning

Metadata is limited to **8kb** maximum.

## [Private metadata](https://clerk.com/docs/users/metadata\#private-metadata)

Private metadata is only accessible by the backend, which makes this useful for storing sensitive data that you don't want to expose to the frontend. For example, you could store a user's Stripe customer ID.

### [Set private metadata](https://clerk.com/docs/users/metadata\#set-private-metadata)

Fullstack SDKs

Express

Go

Ruby

cURL

route.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export async function POST(request) {
  const { stripeId, userId } = await request.json()

  await clerkClient.users.updateUserMetadata(userId, {
    privateMetadata: {
      stripeId: stripeId,
    },
  })

  return Response.json({ success: true })
}
```

If you're using Next.js, you must `await` the instantiation of the `clerkClient` instance, like so:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
const client = await clerkClient()

const response = await client.users.updateUserMetadata()
```

private.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkClient } from '@clerk/express'

app.post('/updateStripe', async (req, res) => {
  const { stripeId, userId } = req.body

  await clerkClient.users.updateUserMetadata(userId, {
    privateMetadata: {
      stripeId: stripeId,
    },
  })

  res.status(200).json({ success: true })
})
```

private.go

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
var client clerk.Client

func addStripeCustomerID(user *clerk.User, stripeCustomerID string) error {
    stripeID := map[string]interface{}{
        "stripeID": stripeCustomerID,
    }
	user, err := s.clerkClient.Users().UpdateMetadata(sess.UserID, &clerk.updateMetadataRequest{
		PrivateMetadata: stripeID,
	})

	if err != nil {
		panic(err)
	}
}
```

private.rb

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
# ruby json example with a private metadata and stripe id
require 'clerk'
require 'json'

privateMetadata = {
  "stripeID": stripeCustomerID
}

clerk = Clerk::SDK.new(api_key: "your_clerk_secret_key")
clerk.users.updateMetadata("user_xyz", private_metadata: privateMetadata)
```

curl.sh

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl -XPATCH -H 'Authorization: Bearer CLERK_SECRET_KEY' -H "Content-type: application/json" -d '{
  "private_metadata": {
    "stripeId": "12356"
  }
}' 'https://api.clerk.com/v1/users/{user_id}/metadata'
```

### [Retrieve private metadata](https://clerk.com/docs/users/metadata\#retrieve-private-metadata)

You can retrieve the private metadata for a user by using the JavaScript Backend SDK's [`getUser()`](https://clerk.com/docs/references/backend/user/get-user) method. This method will return the `User` object which contains the private metadata.

Fullstack SDKs

Express

Go

Ruby

cURL

route.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export async function GET(request) {
  const { userId } = await request.json()

  const user = await clerkClient.users.getUser(userId)

  return Response.json(user.privateMetadata)
}
```

If you're using Next.js, you must `await` the instantiation of the `clerkClient` instance, like so:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
const client = await clerkClient()

const response = await client.users.getUser()
```

private.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkClient } from '@clerk/express'

app.post('/updateStripe', async (req, res) => {
  const { userId } = req.body

  const user = await clerkClient.users.getUser(userId)

  res.status(200).json(user.privateMetadata)
})
```

private.go

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
var client clerk.Client

func GetUserMetadata(user *clerk.User, stripeCustomerID string) error {
  user, err := s.clerkClient.Users().Read(sess.UserID)

  if err != nil {
    panic(err)
  }
}
```

private.rb

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
# ruby json example with a private metadata and stripe id
require 'clerk'
clerk = Clerk::SDK.new(api_key: "your_clerk_secret_key")
clerk.users.getUser("user_xyz")
```

curl.sh

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl -XGET -H 'Authorization: CLERK_SECRET_KEY' -H "Content-type: application/json" 'https://api.clerk.com/v1/users/{user_id}'
```

## [Public metadata](https://clerk.com/docs/users/metadata\#public-metadata)

Public metadata is accessible by both the frontend and the backend, but can only be set on the backend. This is useful for storing data that you want to expose to the frontend, but don't want the user to be able to modify. For example, you could store a custom role for a user.

### [Set public metadata](https://clerk.com/docs/users/metadata\#set-public-metadata)

Fullstack SDKs

Express

Go

Ruby

cURL

route.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export async function POST(request) {
  const { stripeId, userId } = await request.json()

  await clerkClient.users.updateUserMetadata(userId, {
    publicMetadata: {
      stripeId: stripeId,
    },
  })

  return Response.json({ success: true })
}
```

If you're using Next.js, you must `await` the instantiation of the `clerkClient` instance, like so:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
const client = await clerkClient()

const response = await client.users.updateUserMetadata()
```

public.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkClient } from '@clerk/express'

app.post('/updateRole', async (req, res) => {
  const { role, userId } = req.body

  await clerkClient.users.updateUserMetadata(userId, {
    publicMetadata: {
      role,
    },
  })
  res.status(200).json({ success: true })
})
```

public.go

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
var client clerk.Client

func addStripeCustomerID(user *clerk.User, role string) error {
    Role := map[string]interface{}{
        "role": role,
    }
  user, err := s.clerkClient.Users().UpdateMetadata(sess.UserID, &clerk.updateMetadataRequest{
    PublicMetadata: role,
  })

  if err != nil {
    panic(err)
  }
}
```

public.rb

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
# ruby json example with a private metadata and stripe id
require 'clerk'
require 'json'

publicMetadata = {
  "role": "awesome-user",
}

clerk = Clerk::SDK.new(api_key: "your_clerk_secret_key")
clerk.users.updateMetadata("user_xyz", public_metadata: publicMetadata)
```

curl.sh

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl -XPATCH -H 'Authorization: Bearer CLERK_SECRET_KEY' -H "Content-type: application/json" -d '{
  "public_metadata": {
    "role": "shopper"
  }
}' 'https://api.clerk.com/v1/users/{user_id}/metadata'
```

### [Retrieve public metadata](https://clerk.com/docs/users/metadata\#retrieve-public-metadata)

There are multiple ways to retrieve public metadata.

On the frontend, it's available on the [`User`](https://clerk.com/docs/references/javascript/user) object which can be accessed using the [`useUser()`](https://clerk.com/docs/hooks/use-user) hook.

On the backend, it's available on the [Backend `User`](https://clerk.com/docs/references/backend/types/backend-user) object which can be accessed using the JavaScript Backend SDK's [`getUser()`](https://clerk.com/docs/references/backend/user/get-user) method. It can also be attached to a session token, and the `sessionClaims` of the session token can be retrieved on the [`Auth`](https://clerk.com/docs/references/backend/types/auth-object) object. If you need to retrieve public metadata frequently in the backend, the best option is to attach it to the session token and retrieve it from the session token. See the [guide on customizing your session token](https://clerk.com/docs/backend-requests/custom-session-token).

## [Unsafe metadata](https://clerk.com/docs/users/metadata\#unsafe-metadata)

Unsafe metadata can be both read and set from the frontend and the backend. It's called "unsafe" metadata because it can be modified directly from the frontend, which means malicious users could potentially tamper with these values.

Unsafe metadata is the only metadata property that can be set during sign-up, so a common use case is to use it in [custom onboarding flows](https://clerk.com/docs/references/nextjs/add-onboarding-flow). Custom data collected during the onboarding (sign-up) flow can be stored in the [`SignUp`](https://clerk.com/docs/references/javascript/sign-up) object. After a successful sign-up, `SignUp.unsafeMetadata` is copied to the `User` object as `User.unsafeMetadata`. From that point on, the unsafe metadata is accessible as a direct attribute of the `User` object.

### [Set unsafe metadata](https://clerk.com/docs/users/metadata\#set-unsafe-metadata)

The following examples demonstrate how to update unsafe metadata for an existing user. Updating `unsafeMetadata` replaces the previous value; it doesn't perform a merge. To merge data, you can pass a combined object such as `{ …user.unsafeMetadata, …newData }` to the `unsafeMetadata` parameter.

The following examples demonstrate how to update `unsafeMetadata` using [the Backend API](https://clerk.com/docs/users/metadata#using-the-backend-api) or [the Frontend SDKs](https://clerk.com/docs/users/metadata#using-the-frontend-sdks).

#### [Using the Backend API](https://clerk.com/docs/users/metadata\#using-the-backend-api)

Fullstack SDKs

Express

Go

Ruby

cURL

route.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export async function POST(request) {
  const { userId } = await request.json()

  await clerkClient.users.updateUserMetadata(userId, {
    unsafeMetadata: {
      birthday: '11-30-1969',
    },
  })

  return Response.json({ success: true })
}
```

If you're using Next.js, you must `await` the instantiation of the `clerkClient` instance, like so:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
const client = await clerkClient()

const response = await client.users.updateUserMetadata()
```

private.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkClient } from '@clerk/express'

app.post('/updateStripe', async (req, res) => {
  const { stripeId, userId } = await req.body

  await clerkClient.users.updateUserMetadata(userId, {
    unsafeMetadata: {
      birthday: '11-30-1969',
    },
  })

  res.status(200).json({ success: true })
})
```

private.go

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
var client clerk.Client

func addStripeCustomerID(user *clerk.User, stripeCustomerID string) error {
    birthday := map[string]interface{}{
        "birthday": "04-20-1969",
    }
  user, err := s.clerkClient.Users().UpdateMetadata(sess.UserID, &clerk.updateMetadataRequest{
    UnsafeMetadata: birthday,
  })

  if err != nil {
    panic(err)
  }
}
```

private.rb

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
require 'clerk'
require 'json'

unsafeMetadata = {
  "birthday": "04-20-1969"
}

clerk = Clerk::SDK.new(api_key: "your_clerk_secret_key")
clerk.users.updateMetadata("user_123", unsafe_metadata: unsafeMetadata)
```

curl.sh

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
curl -XPATCH -H 'Authorization: Bearer CLERK_SECRET_KEY' -H "Content-type: application/json" -d '{
  "unsafe_metadata": {
    "birthday": "11-30-1969"
  }
}' 'https://api.clerk.com/v1/users/{user_id}/metadata'
```

#### [Using the Frontend SDKs](https://clerk.com/docs/users/metadata\#using-the-frontend-sdks)

React-based SDKs

JavaScript

page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export default function Page() {
  const { user } = useUser()
  const [birthday, setBirthday] = useState('')

  return (
    <div>
      <input type="text" value={birthday} onChange={(e) => setBirthday(e.target.value)} />

      <button
        onClick={() => {
          user?.update({
            unsafeMetadata: { birthday },
          })
        }}
      >
        Update birthday
      </button>
    </div>
  )
}
```

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

// Initialize Clerk with your Clerk Publishable Key
const pubKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

const clerk = new Clerk(pubKey)
await clerk.load()

if (clerk.user) {
  await clerk.user
    .update({
      unsafeMetadata: {
        birthday: '01-01-2000',
      },
    })
    .then((res) => console.log(res))
    .catch((error) => console.log('An error occurred:', error.errors))
} else {
  document.getElementById('app').innerHTML = `
    <div id="sign-in"></div>
  `

  const signInDiv = document.getElementById('sign-in')

  clerk.mountSignIn(signInDiv)
}
```

### [Retrieve unsafe metadata](https://clerk.com/docs/users/metadata\#retrieve-unsafe-metadata)

There are multiple ways to retrieve unsafe metadata.

On the frontend, it is available on the [`User`](https://clerk.com/docs/references/javascript/user) object, which you can access by using the [`useUser()`](https://clerk.com/docs/hooks/use-user) hook.

On the backend, it's available on the [Backend `User`](https://clerk.com/docs/references/backend/types/backend-user) object which can be accessed using the JavaScript Backend SDK's [`getUser()`](https://clerk.com/docs/references/backend/user/get-user) method. It can also be attached to a session token, and the `sessionClaims` of the session token can be retrieved on the [`Auth`](https://clerk.com/docs/references/backend/types/auth-object) object. If you need to retrieve unsafe metadata frequently in the backend, the best option is to attach it to the session token and retrieve it from the session token. See the [guide on customizing your session token](https://clerk.com/docs/backend-requests/custom-session-token).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/users/metadata.mdx)

Last updated onMar 8, 2025

Support

## Clerk Localization Guide
[Skip to main content](https://clerk.com/docs/customization/localization#main)

1. [`@clerk/localizations`](https://clerk.com/docs/customization/localization#clerk-localizations)
1. [Languages](https://clerk.com/docs/customization/localization#languages)
2. [Usage](https://clerk.com/docs/customization/localization#usage)
2. [Adding or updating a localization](https://clerk.com/docs/customization/localization#adding-or-updating-a-localization)
3. [Custom localizations](https://clerk.com/docs/customization/localization#custom-localizations)
1. [Usage](https://clerk.com/docs/customization/localization#usage-2)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/localization.mdx)

# Localization prop (experimental)

Warning

This feature is currently experimental and may not behave as expected. If you encounter any issues, [contact support⁠](https://clerk.com/contact/support) with as much detail as possible.

Clerk offers the ability to override the strings for all of the elements in each of the Clerk components. This allows you to provide localization for your users or change the wording to suit your brand.

## [`@clerk/localizations`](https://clerk.com/docs/customization/localization\#clerk-localizations)

The `@clerk/localizations` package contains predefined localizations for the Clerk components.

### [Languages](https://clerk.com/docs/customization/localization\#languages)

Clerk currently supports the following languages with English as the default:

| English name | Language tag (BCP 47) | Key |
| --- | --- | --- |
| Arabic (Saudi) | ar-SA | `arSA` |
| Belarus | be-BY | `beBY` |
| Bulgarian | bg-BG | `bgBG` |
| Catalan | ca-ES | `caES` |
| Chinese (Simplified) | zh-CN | `zhCN` |
| Chinese (Traditional) | zh-TW | `zhTW` |
| Croatian | hr-HR | `hrHR` |
| Czech | cs-CZ | `csCZ` |
| Danish | da-DK | `daDK` |
| Dutch | nl-BE | `nlBE` |
| Dutch | nl-NL | `nlNL` |
| English (GB) | en-GB | `enGB` |
| English (US) | en-US | `enUS` |
| Finnish | fi-FI | `fiFI` |
| French | fr-FR | `frFR` |
| German | de-DE | `deDE` |
| Greek | el-GR | `elGR` |
| Hebrew | he-IL | `heIL` |
| Hungarian | hu-HU | `huHU` |
| Icelandic | is-IS | `isIS` |
| Italian | it-IT | `itIT` |
| Indonesian | id-ID | `idID` |
| Japanese | ja-JP | `jaJP` |
| Korean | ko-KR | `koKR` |
| Mongolian | mn-MN | `mnMN` |
| Norwegian | nb-NO | `nbNO` |
| Polish | pl-PL | `plPL` |
| Portuguese (BR) | pt-BR | `ptBR` |
| Portuguese (PT) | pt-PT | `ptPT` |
| Romanian | ro-RO | `roRO` |
| Russian | ru-RU | `ruRU` |
| Serbian | sr-RS | `srRS` |
| Slovak | sk-SK | `skSK` |
| Spanish | es-ES | `esES` |
| Spanish (Mexico) | es-MX | `esMX` |
| Spanish (Uruguay) | es-UY | `esUY` |
| Swedish | sv-SE | `svSE` |
| Thai | th-TH | `thTH` |
| Turkish | tr-TR | `trTR` |
| Ukrainian | uk-UA | `ukUA` |
| Vietnamese | vi-VN | `viVN` |

### [Usage](https://clerk.com/docs/customization/localization\#usage)

Caution

The localizations will only update the text in the [Clerk components](https://clerk.com/docs/components/overview) used in your application. The hosted [Clerk Account Portal](https://clerk.com/docs/account-portal/overview) will remain in English.

To get started, install the `@clerk/localizations` package.

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/localizations
```

Once the `@clerk/localizations` package is installed, you can import the localizations you need by removing the "-" from the locale.

Next.js

Remix

Astro

JavaScript

Vue

Nuxt

In the following example, the fr-FR locale is imported as `frFR`. The imported localization is then passed to the `localization` prop on the [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider).

App Router

Pages Router

app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import './globals.css'
// fr-FR locale is imported as frFR
import { frFR } from '@clerk/localizations'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider localization={frFR}>
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

## [Adding or updating a localization](https://clerk.com/docs/customization/localization\#adding-or-updating-a-localization)

Our localizations are customer-sourced and we encourage customers to add or update localizations. To do so, follow these steps:

1. Fork the [https://github.com/clerk/javascript/⁠](https://github.com/clerk/javascript/) repo.
2. Clone it locally to edit it.
3. Review our [Contributing⁠](https://github.com/clerk/javascript/blob/main/docs/CONTRIBUTING.md) guide.
4. If you are updating an existing localization locate the file in `packages/localizations/src`
5. If you are adding a new language, copy the `en-US.ts` file and name it according to your language. The naming is the abbreviated language-region. For example, for French in Canada, it would be `fr-CA.ts.`
6. Go through the file and edit the entries.
7. If you are adding a new localization, add the language to the `packages/localizations/src/index.ts` file.
8. Commit your changes to git and push them to your fork. Create a [Pull Request⁠](https://github.com/clerk/clerk-docs/pulls) from your fork to Clerk's repo against the `main` branch. We will review and either approve or ask for updates.

## [Custom localizations](https://clerk.com/docs/customization/localization\#custom-localizations)

You can also provide your own localizations for the Clerk components. This is useful if you want to provide limited or quick localization for a language that Clerk doesn't currently support or if you want to change the wording to suit your brand.

### [Usage](https://clerk.com/docs/customization/localization\#usage-2)

app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import './globals.css'

const localization = {
  socialButtonsBlockButton: 'Sign In with {{provider|titleize}}',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider localization={localization}>
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

To find the key for your translation (like the `socialButtonsBlockButton` from the code example below), open up our [English localization file⁠](https://github.com/clerk/javascript/blob/main/packages/localizations/src/en-US.ts). Search the file for the term that you want to customize.

For example, if you want to change the 'to continue to' string from the `<SignIn />` and `<SignUp />` components, you would search for 'to continue to'. You will find several instances of this. Some of those are in the the following `signUp` object:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
signUp: {
  start: {
    title: 'Create your account',
    subtitle: 'to continue to {{applicationName}}',
    actionText: 'Have an account?',
    actionLink: 'Sign in',
  },
  emailLink: {
    title: 'Verify your email',
    subtitle: 'to continue to {{applicationName}}',
    formTitle: 'Verification link',
    formSubtitle: 'Use the verification link sent to your email address',
    resendButton: "Didn't receive a link? Resend",
    verified: {
      title: 'Successfully signed up',
    },
    loading: {
      title: 'Signing up...',
    },
    verifiedSwitchTab: {
      title: 'Successfully verified email',
      subtitle: 'Return to the newly opened tab to continue',
      subtitleNewTab: 'Return to previous tab to continue',
    },
  },
  emailCode: {
    title: 'Verify your email',
    subtitle: 'to continue to {{applicationName}}',
    formTitle: 'Verification code',
    formSubtitle: 'Enter the verification code sent to your email address',
    resendButton: "Didn't receive a code? Resend",
  },
  phoneCode: {
    title: 'Verify your phone',
    subtitle: 'to continue to {{applicationName}}',
    formTitle: 'Verification code',
    formSubtitle: 'Enter the verification code sent to your phone number',
    resendButton: "Didn't receive a code? Resend",
  },
  continue: {
    title: 'Fill in missing fields',
    subtitle: 'to continue to {{applicationName}}',
    actionText: 'Have an account?',
    actionLink: 'Sign in',
  },
},
```

If you want to customize multiple entries from the `<SignUp />` component, the procedure would resemble the following:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
const localization = {
  signUp: {
    start: {
      subtitle: 'to access {{applicationName}}',
    },
    emailCode: {
      subtitle: 'to access {{applicationName}}',
    },
  },
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/localization.mdx)

Last updated onMar 5, 2025

Support

## Clerk Components Overview
[Skip to main content](https://clerk.com/docs/components/overview#main)

1. [UI components](https://clerk.com/docs/components/overview#ui-components)
2. [Control components](https://clerk.com/docs/components/overview#control-components)
3. [Unstyled components](https://clerk.com/docs/components/overview#unstyled-components)
4. [Customization Guides](https://clerk.com/docs/components/overview#customization-guides)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/components/overview.mdx)

# Component Reference

Clerk offers a comprehensive suite of components designed to seamlessly integrate authentication and multi-tenancy into your application. With Clerk components, you can easily customize the appearance of authentication components and pages, manage the entire authentication flow to suit your specific needs, and even build robust SaaS applications.

## [UI components](https://clerk.com/docs/components/overview\#ui-components)

- [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in)
- [`<SignUp />`](https://clerk.com/docs/components/authentication/sign-up)
- [`<GoogleOneTap />`](https://clerk.com/docs/components/authentication/google-one-tap)
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button)
- [`<UserProfile />`](https://clerk.com/docs/components/user/user-profile)
- [`<CreateOrganization />`](https://clerk.com/docs/components/organization/create-organization)
- [`<OrganizationProfile />`](https://clerk.com/docs/components/organization/organization-profile)
- [`<OrganizationSwitcher />`](https://clerk.com/docs/components/organization/organization-switcher)
- [`<OrganizationList />`](https://clerk.com/docs/components/organization/organization-list)
- [`<Waitlist />`](https://clerk.com/docs/components/waitlist)

## [Control components](https://clerk.com/docs/components/overview\#control-components)

Control components manage authentication-related behaviors in your application. They handle tasks such as controlling content visibility based on user authentication status, managing loading states during authentication processes, and redirecting users to appropriate pages. Control components render at `<Loading />` and `<Loaded />` states for assertions on the [`Clerk` object](https://clerk.com/docs/references/javascript/clerk). A common example is the [`<SignedIn>`](https://clerk.com/docs/components/control/signed-in) component, which allows you to conditionally render content only when a user is authenticated.

- [`<AuthenticateWithRedirectCallback />`](https://clerk.com/docs/components/control/authenticate-with-callback)
- [`<ClerkLoaded />`](https://clerk.com/docs/components/control/clerk-loaded)
- [`<ClerkLoading />`](https://clerk.com/docs/components/control/clerk-loading)
- [`<Protect />`](https://clerk.com/docs/components/protect)
- [`<RedirectToSignIn />`](https://clerk.com/docs/components/control/redirect-to-signin)
- [`<RedirectToSignUp />`](https://clerk.com/docs/components/control/redirect-to-signup)
- [`<RedirectToUserProfile />`](https://clerk.com/docs/components/control/redirect-to-userprofile)
- [`<RedirectToOrganizationProfile />`](https://clerk.com/docs/components/control/redirect-to-organizationprofile)
- [`<RedirectToCreateOrganization />`](https://clerk.com/docs/components/control/redirect-to-createorganization)
- [`<SignedIn />`](https://clerk.com/docs/components/control/signed-in)
- [`<SignedOut />`](https://clerk.com/docs/components/control/signed-out)

## [Unstyled components](https://clerk.com/docs/components/overview\#unstyled-components)

- [`<SignInButton />`](https://clerk.com/docs/components/unstyled/sign-in-button)
- [`<SignInWithMetamask />`](https://clerk.com/docs/components/unstyled/sign-in-with-metamask)
- [`<SignUpButton />`](https://clerk.com/docs/components/unstyled/sign-up-button)
- [`<SignOutButton />`](https://clerk.com/docs/components/unstyled/sign-out-button)

## [Customization Guides](https://clerk.com/docs/components/overview\#customization-guides)

- [Customize components with the `appearance` prop](https://clerk.com/docs/customization/overview)
- [Localize components with the `localization` prop (experimental)](https://clerk.com/docs/customization/localization)
- [Add pages to the `<UserProfile />` component](https://clerk.com/docs/customization/user-profile)
- [Add pages to the `<OrganizationProfile />` component](https://clerk.com/docs/customization/organization-profile)

## [Join our Discord](https://clerk.com/discord)

Join our official Discord server to chat with us directly and become a part of the Clerk community.

Join Discord

Join Discord

## [Need help?](https://clerk.com/support)

Contact us through Discord, Twitter, or email to receive answers to your questions and learn more about Clerk.

Get help

Get help

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/components/overview.mdx)

Last updated onFeb 21, 2025

Support

## Layout Customization Guide
[Skip to main content](https://clerk.com/docs/customization/layout#main)

1. [Properties](https://clerk.com/docs/customization/layout#properties)
2. [Usage](https://clerk.com/docs/customization/layout#usage)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/layout.mdx)

# `Layout` prop

The `layout` property can be used to change the layout of the [`<SignIn/>`](https://clerk.com/docs/components/authentication/sign-in) and [`<SignUp/>`](https://clerk.com/docs/components/authentication/sign-up) components, as well as set important links to your support, terms, and privacy pages.

## [Properties](https://clerk.com/docs/customization/layout\#properties)

- Name`animations`Type`boolean`Description





Whether to enable animations inside the components. Defaults to `true`.

- Name`helpPageUrl`Type`string`Description





The URL to your help page.

- Name`logoImageUrl`Type`string`Description





The URL to your logo image. By default, the components will use the logo you've set in the Clerk Dashboard. This option is helpful when you need to display different logos for different themes, for example: white logo on dark themes, black logo on light themes.

- Name`logoLinkUrl`Type`string`Description





Controls where the browser will redirect to after the user clicks the application logo. If a URL is provided, it will be used as the `href` of the link. If a value is not passed in, the components will use the Home URL as set in the Clerk Dashboard. Defaults to `undefined`.

- Name`logoPlacement`Type`'inside' | 'outside'`Description





The placement of your logo. Defaults to `'inside'`.

- Name`privacyPageUrl`Type`string`Description





The URL to your privacy page.

- Name`shimmer`Type`boolean`Description





This option enables the shimmer animation for the avatars of `<UserButton />` and `<OrganizationSwitcher />`. Defaults to `true`.

- Name`showOptionalFields`Type`boolean`Description





Whether to show optional fields on the sign in and sign up forms. Defaults to `true`.

- Name`socialButtonsPlacement`Type`'bottom' | 'top'`Description





The placement of your social buttons. Defaults to `'top'`.

- Name`socialButtonsVariant`Type`'blockButton' | 'iconButton' | 'auto'`Description





The variant of your social buttons. By default, the components will use `blockButton` if you have less than 3 social providers enabled, otherwise `iconButton` will be used.

- Name`termsPageUrl`Type`string`Description





The URL to your terms page.

- Name`unsafe_disableDevelopmentModeWarnings`Type`boolean`Description





Whether development warnings show up in development mode. **Only enable this if you want to preview how the components will look in production.**


## [Usage](https://clerk.com/docs/customization/layout\#usage)

Next.js

Astro

Vue

Nuxt

app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs';

<ClerkProvider
  appearance={{
    layout: {
      socialButtonsPlacement: 'bottom',
      socialButtonsVariant: 'iconButton',
      termsPageUrl: 'https://clerk.com/terms'
    }
  }}
>
  {/* ... */}
</ClerkProvider>;
```

astro.config.mjs

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import clerk from '@clerk/astro'

export default defineConfig({
  integrations: [\
    clerk({\
      appearance: {\
        layout: {\
          socialButtonsPlacement: 'bottom',\
          socialButtonsVariant: 'iconButton',\
          termsPageUrl: 'https://clerk.com/terms',\
        },\
      },\
    }),\
  ],
})
```

src/main.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { createApp } from 'vue'
import App from './App.vue'
import { clerkPlugin } from '@clerk/vue'

const app = createApp(App)
app.use(clerkPlugin, {
  appearance: {
    layout: {
      socialButtonsPlacement: 'bottom',
      socialButtonsVariant: 'iconButton',
      termsPageUrl: 'https://clerk.com/terms',
    },
  },
})
app.mount('#app')
```

nuxt.config.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export default defineNuxtConfig({
  modules: ['@clerk/nuxt'],
  clerk: {
    appearance: {
      layout: {
        socialButtonsPlacement: 'bottom',
        socialButtonsVariant: 'iconButton',
        termsPageUrl: 'https://clerk.com/terms',
      },
    },
  },
})
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/layout.mdx)

Last updated onJan 30, 2025

Support

## Clerk Expo Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/expo#main)

01. [Enable the Native API](https://clerk.com/docs/quickstarts/expo#enable-the-native-api)
02. [Install `@clerk/clerk-expo`](https://clerk.com/docs/quickstarts/expo#install-clerk-clerk-expo)
03. [Install `@clerk/types` (optional)](https://clerk.com/docs/quickstarts/expo#install-clerk-types-optional)
04. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/expo#set-your-clerk-api-keys)
05. [Add `<ClerkProvider>` to your root layout](https://clerk.com/docs/quickstarts/expo#add-clerk-provider-to-your-root-layout)
06. [Configure the token cache](https://clerk.com/docs/quickstarts/expo#configure-the-token-cache)
07. [Add sign-up and sign-in pages](https://clerk.com/docs/quickstarts/expo#add-sign-up-and-sign-in-pages)
08. [Conditionally render content](https://clerk.com/docs/quickstarts/expo#conditionally-render-content)
09. [Create your first user](https://clerk.com/docs/quickstarts/expo#create-your-first-user)
10. [Enable OTA updates](https://clerk.com/docs/quickstarts/expo#enable-ota-updates)
11. [Next steps](https://clerk.com/docs/quickstarts/expo#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/expo.mdx)

# Expo Quickstart

## You will learn the following:

- Install `@clerk/expo`
- Set your Clerk API keys
- Add `<ClerkProvider>`
- Protect specific pages with authentication
- Use Clerk hooks to enable users to sign in and out

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create an Expo app](https://docs.expo.dev/get-started/create-a-project/)

## Example repository

- [Expo quickstart repo](https://github.com/clerk/clerk-expo-quickstart)

## [Enable the Native API](https://clerk.com/docs/quickstarts/expo\#enable-the-native-api)

The Native API is disabled by default for all Clerk instances.

To enable the Native API:

1. In the Clerk Dashboard, navigate to the [**Native Applications**⁠](https://dashboard.clerk.com/last-active?path=/native-applications) page.
2. Enable the **Native API**.

## [Install `@clerk/clerk-expo`](https://clerk.com/docs/quickstarts/expo\#install-clerk-clerk-expo)

The [Clerk Expo SDK](https://clerk.com/docs/references/expo/overview) gives you access to prebuilt components, hooks, and helpers to make user authentication easier.

Run the following command to install the SDK:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/clerk-expo
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @clerk/clerk-expo
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/clerk-expo
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @clerk/clerk-expo
```

## [Install `@clerk/types` (optional)](https://clerk.com/docs/quickstarts/expo\#install-clerk-types-optional)

Clerk's `@clerk/types` package provides TypeScript type definitions.

Add the package to your project by running the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/types
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @clerk/types
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/types
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @clerk/types
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/expo\#set-your-clerk-api-keys)

Add your Clerk Publishable Key to your `.env` file. It can always be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable Key.
3. Paste your key into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
```

## [Add `<ClerkProvider>` to your root layout](https://clerk.com/docs/quickstarts/expo\#add-clerk-provider-to-your-root-layout)

The [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider) component provides session and user context to Clerk's hooks and components. It's recommended to wrap your entire app at the entry point with `<ClerkProvider>` to make authentication globally accessible. See the [reference docs](https://clerk.com/docs/components/clerk-provider) for other configuration options.

You must pass your Publishable Key as a prop to the `<ClerkProvider>` component.

Clerk also provides [`<ClerkLoaded>`](https://clerk.com/docs/components/control/clerk-loaded), which won't render its children until the Clerk API has loaded.

Add both components to your root layout as shown in the following example:

app/\_layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider, ClerkLoaded } from '@clerk/clerk-expo'
import { Slot } from 'expo-router'

export default function RootLayout() {
  const publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY!

  if (!publishableKey) {
    throw new Error('Add EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY to your .env file')
  }

  return (
    <ClerkProvider publishableKey={publishableKey}>
      <ClerkLoaded>
        <Slot />
      </ClerkLoaded>
    </ClerkProvider>
  )
}
```

## [Configure the token cache](https://clerk.com/docs/quickstarts/expo\#configure-the-token-cache)

Clerk stores the active user's session token in memory by default. In Expo apps, the recommended way to store sensitive data, such as tokens, is by using `expo-secure-store` which encrypts the data before storing it.

To use `expo-secure-store` as your token cache:

1. Run the following command to install the library:











npm







yarn







pnpm







bun













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install expo-secure-store
```













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add expo-secure-store
```













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add expo-secure-store
```













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add expo-secure-store
```

2. In your root directory, create a `cache.ts` file and add the following code:


cache.ts

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import * as SecureStore from 'expo-secure-store'
import { Platform } from 'react-native'
import { TokenCache } from '@clerk/clerk-expo/dist/cache'

const createTokenCache = (): TokenCache => {
     return {
       getToken: async (key: string) => {
         try {
           const item = await SecureStore.getItemAsync(key)
           if (item) {
             console.log(`${key} was used 🔐 \n`)
           } else {
             console.log('No values stored under key: ' + key)
           }
           return item
         } catch (error) {
           console.error('secure store get item error: ', error)
           await SecureStore.deleteItemAsync(key)
           return null
         }
       },
       saveToken: (key: string, token: string) => {
         return SecureStore.setItemAsync(key, token)
       },
     }
}

// SecureStore is not supported on the web
export const tokenCache = Platform.OS !== 'web' ? createTokenCache() : undefined
```

3. Update your root layout to use the token cache:


app/\_layout.tsx

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { tokenCache } from '@/cache'
import { ClerkProvider, ClerkLoaded } from '@clerk/clerk-expo'
import { Slot } from 'expo-router'

export default function RootLayout() {
     const publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY!

     if (!publishableKey) {
       throw new Error('Add EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY in your .env')
     }

     return (
       <ClerkProvider tokenCache={tokenCache} publishableKey={publishableKey}>
         <ClerkLoaded>
           <Slot />
         </ClerkLoaded>
       </ClerkProvider>
     )
}
```


Tip

When you sign a user out with [`signOut()`](https://clerk.com/docs/hooks/use-auth#use-auth-returns), Clerk will remove the user's session JWT from the token cache.

## [Add sign-up and sign-in pages](https://clerk.com/docs/quickstarts/expo\#add-sign-up-and-sign-in-pages)

Clerk currently only supports [control components](https://clerk.com/docs/components/overview#control-components) for Expo native. UI components are only available for Expo web. Instead, you must build [custom flows](https://clerk.com/docs/custom-flows/overview) using Clerk's API. The following sections demonstrate how to build [custom email/password sign-up and sign-in flows](https://clerk.com/docs/custom-flows/email-password). If you want to use different authentication methods, such as passwordless or OAuth, see the dedicated custom flow guides.

### [Layout page](https://clerk.com/docs/quickstarts/expo\#layout-page)

First, protect your sign-up and sign-in pages.

1. Create an `(auth)` [route group⁠](https://docs.expo.dev/router/layouts/#groups). This will group your sign-up and sign-in pages.
2. In the `(auth)` group, create a `_layout.tsx` file with the following code. The [`useAuth()`](https://clerk.com/docs/hooks/use-auth) hook is used to access the user's authentication state. If the user is already signed in, they will be redirected to the home page.

app/(auth)/\_layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Redirect, Stack } from 'expo-router'
import { useAuth } from '@clerk/clerk-expo'

export default function AuthRoutesLayout() {
  const { isSignedIn } = useAuth()

  if (isSignedIn) {
    return <Redirect href={'/'} />
  }

  return <Stack />
}
```

### [Sign-up page](https://clerk.com/docs/quickstarts/expo\#sign-up-page)

In the `(auth)` group, create a `sign-up.tsx` file with the following code. The [`useSignUp()`](https://clerk.com/docs/hooks/use-sign-up) hook is used to create a sign-up flow. The user can sign up using their email and password and will receive an email verification code to confirm their email.

app/(auth)/sign-up.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import * as React from 'react'
import { Text, TextInput, Button, View } from 'react-native'
import { useSignUp } from '@clerk/clerk-expo'
import { useRouter } from 'expo-router'

export default function SignUpScreen() {
  const { isLoaded, signUp, setActive } = useSignUp()
  const router = useRouter()

  const [emailAddress, setEmailAddress] = React.useState('')
  const [password, setPassword] = React.useState('')
  const [pendingVerification, setPendingVerification] = React.useState(false)
  const [code, setCode] = React.useState('')

  // Handle submission of sign-up form
  const onSignUpPress = async () => {
    if (!isLoaded) return

    // Start sign-up process using email and password provided
    try {
      await signUp.create({
        emailAddress,
        password,
      })

      // Send user an email with verification code
      await signUp.prepareEmailAddressVerification({ strategy: 'email_code' })

      // Set 'pendingVerification' to true to display second form
      // and capture OTP code
      setPendingVerification(true)
    } catch (err) {
      // See https://clerk.com/docs/custom-flows/error-handling
      // for more info on error handling
      console.error(JSON.stringify(err, null, 2))
    }
  }

  // Handle submission of verification form
  const onVerifyPress = async () => {
    if (!isLoaded) return

    try {
      // Use the code the user provided to attempt verification
      const signUpAttempt = await signUp.attemptEmailAddressVerification({
        code,
      })

      // If verification was completed, set the session to active
      // and redirect the user
      if (signUpAttempt.status === 'complete') {
        await setActive({ session: signUpAttempt.createdSessionId })
        router.replace('/')
      } else {
        // If the status is not complete, check why. User may need to
        // complete further steps.
        console.error(JSON.stringify(signUpAttempt, null, 2))
      }
    } catch (err) {
      // See https://clerk.com/docs/custom-flows/error-handling
      // for more info on error handling
      console.error(JSON.stringify(err, null, 2))
    }
  }

  if (pendingVerification) {
    return (
      <>
        <Text>Verify your email</Text>
        <TextInput
          value={code}
          placeholder="Enter your verification code"
          onChangeText={(code) => setCode(code)}
        />
        <Button title="Verify" onPress={onVerifyPress} />
      </>
    )
  }

  return (
    <View>
      <>
        <Text>Sign up</Text>
        <TextInput
          autoCapitalize="none"
          value={emailAddress}
          placeholder="Enter email"
          onChangeText={(email) => setEmailAddress(email)}
        />
        <TextInput
          value={password}
          placeholder="Enter password"
          secureTextEntry={true}
          onChangeText={(password) => setPassword(password)}
        />
        <Button title="Continue" onPress={onSignUpPress} />
      </>
    </View>
  )
}
```

Expand code

### [Sign-in page](https://clerk.com/docs/quickstarts/expo\#sign-in-page)

In the `(auth)` group, create a `sign-in.tsx` file with the following code. The [`useSignIn()`](https://clerk.com/docs/hooks/use-sign-in) hook is used to create a sign-in flow. The user can sign in using email address and password, or navigate to the sign-up page.

app/(auth)/sign-in.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { useSignIn } from '@clerk/clerk-expo'
import { Link, useRouter } from 'expo-router'
import { Text, TextInput, Button, View } from 'react-native'
import React from 'react'

export default function Page() {
  const { signIn, setActive, isLoaded } = useSignIn()
  const router = useRouter()

  const [emailAddress, setEmailAddress] = React.useState('')
  const [password, setPassword] = React.useState('')

  // Handle the submission of the sign-in form
  const onSignInPress = async () => {
    if (!isLoaded) return

    // Start the sign-in process using the email and password provided
    try {
      const signInAttempt = await signIn.create({
        identifier: emailAddress,
        password,
      })

      // If sign-in process is complete, set the created session as active
      // and redirect the user
      if (signInAttempt.status === 'complete') {
        await setActive({ session: signInAttempt.createdSessionId })
        router.replace('/')
      } else {
        // If the status isn't complete, check why. User might need to
        // complete further steps.
        console.error(JSON.stringify(signInAttempt, null, 2))
      }
    } catch (err) {
      // See https://clerk.com/docs/custom-flows/error-handling
      // for more info on error handling
      console.error(JSON.stringify(err, null, 2))
    }
  }

  return (
    <View>
      <TextInput
        autoCapitalize="none"
        value={emailAddress}
        placeholder="Enter email"
        onChangeText={(emailAddress) => setEmailAddress(emailAddress)}
      />
      <TextInput
        value={password}
        placeholder="Enter password"
        secureTextEntry={true}
        onChangeText={(password) => setPassword(password)}
      />
      <Button title="Sign in" onPress={onSignInPress} />
      <View>
        <Text>Don't have an account?</Text>
        <Link href="/sign-up">
          <Text>Sign up</Text>
        </Link>
      </View>
    </View>
  )
}
```

Expand code

For more information about building these custom flows, including guided comments in the code examples, see the [Build a custom email/password authentication flow](https://clerk.com/docs/custom-flows/email-password) guide.

## [Conditionally render content](https://clerk.com/docs/quickstarts/expo\#conditionally-render-content)

You can control which content signed-in and signed-out users can see with Clerk's [prebuilt control components](https://clerk.com/docs/components/overview#control-components). For this quickstart, you'll use:

- [`<SignedIn>`](https://clerk.com/docs/components/control/signed-in): Children of this component can only be seen while **signed in**.
- [`<SignedOut>`](https://clerk.com/docs/components/control/signed-out): Children of this component can only be seen while **signed out**.

To get started:

1. Create a `(home)` route group.
2. In the `(home)` group, create a `_layout.tsx` file with the following code.

app/(home)/\_layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Stack } from 'expo-router/stack'

export default function Layout() {
  return <Stack />
}
```

Then, in the same folder, create an `index.tsx` file with the following code. It displays the user's email if they're signed in, or sign-in and sign-up links if they're not:

app/(home)/index.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { SignedIn, SignedOut, useUser } from '@clerk/clerk-expo'
import { Link } from 'expo-router'
import { Text, View } from 'react-native'

export default function Page() {
  const { user } = useUser()

  return (
    <View>
      <SignedIn>
        <Text>Hello {user?.emailAddresses[0].emailAddress}</Text>
      </SignedIn>
      <SignedOut>
        <Link href="/(auth)/sign-in">
          <Text>Sign in</Text>
        </Link>
        <Link href="/(auth)/sign-up">
          <Text>Sign up</Text>
        </Link>
      </SignedOut>
    </View>
  )
}
```

## [Create your first user](https://clerk.com/docs/quickstarts/expo\#create-your-first-user)

Run your project with the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm start
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn start
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm start
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun start
```

Now visit your app's homepage at [`http://localhost:8081`⁠](http://localhost:8081/). Sign up to create your first user.

## [Enable OTA updates](https://clerk.com/docs/quickstarts/expo\#enable-ota-updates)

Though not required, it is recommended to implement over-the-air (OTA) updates in your Expo app. This enables you to easily roll out Clerk's feature updates and security patches as they're released without having to resubmit your app to mobile marketplaces.

See the [`expo-updates`⁠](https://docs.expo.dev/versions/latest/sdk/updates) library to learn how to get started.

## [Next steps](https://clerk.com/docs/quickstarts/expo\#next-steps)

### [OAuthwithExpo](https://clerk.com/docs/custom-flows/oauth-connections)

Learn more how to build a custom OAuth flow with Expo.

### [MFAwithExpo](https://clerk.com/docs/custom-flows/email-password-mfa)

Learn more how to build a custom multi-factor authentication flow with Expo.

### [Readsessionanduserdata](https://clerk.com/docs/references/expo/read-session-user-data)

Learn how to read session and user data with Expo.

### [Sign-upandsign-inflow](https://clerk.com/docs/custom-flows/email-password)

Learn how to build a custom sign-up and sign-in authentication flow.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/expo.mdx)

Last updated onMar 8, 2025

Support

## Authorization Component
[Skip to main content](https://clerk.com/docs/components/protect#main)

1. [Properties](https://clerk.com/docs/components/protect#properties)
2. [Usage](https://clerk.com/docs/components/protect#usage)
1. [Render content by permissions](https://clerk.com/docs/components/protect#render-content-by-permissions)
2. [Render content by role](https://clerk.com/docs/components/protect#render-content-by-role)
3. [Render content conditionally](https://clerk.com/docs/components/protect#render-content-conditionally)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/components/protect.mdx)

# `<Protect>`

The `<Protect>` component is used for authorization. It only renders its children when the current user has the specified [permission or role](https://clerk.com/docs/organizations/roles-permissions) in the organization.

## [Properties](https://clerk.com/docs/components/protect\#properties)

- Name`condition?`Type`has => boolean`Description





Optional conditional logic that renders the children if it returns `true`.

- Name`fallback?`Type`JSX`Description





An optional snippet of JSX to show when a user doesn't have the `role` or `permission` to access the protected content.

- Name`permission?`Type`string`Description





Optional string corresponding to a Role's Permission in the format `org:<resource>:<action>`

- Name`role?`Type`string`Description





Optional string corresponding to an Organization's Role in the format `org:<role>`


Warning

`<Protect>` can only accept `permission` _or_ `role`, not both. The recommended approach is to use `permission`.

## [Usage](https://clerk.com/docs/components/protect\#usage)

To limit who is able to see the content that `<Protect>` renders, you can pass either the `permission` or `role` prop. The recommended approach is to use `permission` because this lets you modify roles without breaking your application. Permissions can be assigned to different roles with ease.

If you do not pass either prop, `<Protect>` will render its children if the user is signed in, regardless of their role or its permissions.

For more complex authorization logic, [pass conditional logic to the `condition` prop](https://clerk.com/docs/components/protect#render-content-conditionally).

### [Render content by permissions](https://clerk.com/docs/components/protect\#render-content-by-permissions)

The children of the following component will only be visible to users with roles that have the `org:invoices:create` permission.

Next.js

React

Astro

Expo

Vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { Protect } from '@clerk/nextjs'

export default function ProtectPage() {
  return (
    <Protect
      permission="org:invoices:create"
      fallback={<p>You do not have the permissions to create an invoice.</p>}
    >
      {children}
    </Protect>
  )
}
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { Protect } from '@clerk/clerk-react'

export default function ProtectPage() {
  return (
    <Protect
      permission="org:invoices:create"
      fallback={<p>You do not have the permissions to create an invoice.</p>}
    >
      {children}
    </Protect>
  )
}
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
---
import { Protect } from '@clerk/astro/components'
---

<Protect permission="org:invoices:create">
  <p slot="fallback">You do not have the permissions to create an invoice.</p>
  <slot />
</Protect>
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { Protect } from '@clerk/clerk-expo'
import { Text } from 'react-native'

export default function Screen() {
  return (
    <Protect
      permission="org:invoices:create"
      fallback={<Text>You do not have the permissions to create an invoice.</Text>}
    >
      <Text>Users with permission org:invoices:create can see this.</Text>
    </Protect>
  )
}
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
<script setup lang="ts">
import { Protect } from '@clerk/vue'
</script>

<template>
  <Protect permission="org:invoices:create">
    <template #fallback>
      <p>You do not have the permissions to create an invoice.</p>
    </template>
    <slot />
  </Protect>
</template>
```

### [Render content by role](https://clerk.com/docs/components/protect\#render-content-by-role)

While authorization by `permission` is **recommended**, for convenience, `<Protect>` allows a `role` prop to be passed. The children of the following component will only be visible to users with the `org:billing` role.

Next.js

React

Astro

Vue

Expo

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { Protect } from '@clerk/nextjs'

export default function ProtectPage() {
  return (
    <Protect
      role="org:billing"
      fallback={<p>Only a member of the Billing department can access this content.</p>}
    >
      {children}
    </Protect>
  )
}
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { Protect } from '@clerk/clerk-react'

export default function ProtectPage() {
  return (
    <Protect
      role="org:billing"
      fallback={<p>Only a member of the Billing department can access this content.</p>}
    >
      {children}
    </Protect>
  )
}
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
---
import { Protect } from '@clerk/astro/components'
---

<Protect role="org:billing">
  <p slot="fallback">Only a member of the Billing department can access this content.</p>
  <slot />
</Protect>
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
<script setup lang="ts">
import { Protect } from '@clerk/vue'
</script>

<template>
  <Protect role="org:billing">
    <template #fallback>
      <p>Only a member of the Billing department can access this content.</p>
    </template>
    <slot />
  </Protect>
</template>
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { Protect } from '@clerk/clerk-expo'
import { Text } from 'react-native'

export default function Screen() {
  return (
    <Protect
      permission="org:billing"
      fallback={<Text>Only a member of the Billing department can access this content.</Text>}
    >
      <Text>Users with role org:billing can see this.</Text>
    </Protect>
  )
}
```

### [Render content conditionally](https://clerk.com/docs/components/protect\#render-content-conditionally)

The following example uses `<Protect>`'s `condition` prop to conditionally render its children if the user has the correct role.

Next.js

Astro

Vue

Expo

app/dashboard/settings/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import type { PropsWithChildren } from 'react'
import { Protect } from '@clerk/nextjs'

export default function SettingsLayout(props: PropsWithChildren) {
  return (
    <Protect
      condition={(has) => has({ role: 'org:admin' }) || has({ role: 'org:billing_manager' })}
      fallback={<p>Only an Admin or Billing Manager can access this content.</p>}
    >
      {props.children}
    </Protect>
  )
}
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
---
import { Protect } from '@clerk/astro/components'
---

<Protect condition={(has) => has({ role: 'org:admin' }) || has({ role: 'org:billing_manager' })}>
  <p slot="fallback">Only an Admin or Billing Manager can access this content.</p>
  <slot />
</Protect>
```

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
<script setup>
import { Protect } from '@clerk/vue'
</script>

<template>
  <Protect :condition="(has) => has({ role: 'org:admin' }) || has({ role: 'org:billing_manager' })">
    <template #fallback>
      <p>Only an Admin or Billing Manager can access this content.</p>
    </template>
    <p>Visible content.</p>
  </Protect>
</template>
```

app/dashboard/settings/\_layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Slot } from 'expo-router'
import { Protect } from '@clerk/clerk-expo'
import { Text } from 'react-native'

export default function SettingsLayout() {
  return (
    <Protect
      condition={(has) => has({ role: 'org:admin' }) || has({ role: 'org:billing_manager' })}
      fallback={<Text>Only an Admin or Billing Manager can access this content.</Text>}
    >
      <Slot />
    </Protect>
  )
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/components/protect.mdx)

Last updated onFeb 3, 2025

Support

## Waitlist Component Guide
[Skip to main content](https://clerk.com/docs/components/waitlist#main)

1. [Enable Waitlist mode](https://clerk.com/docs/components/waitlist#enable-waitlist-mode)
2. [Properties](https://clerk.com/docs/components/waitlist#properties)
3. [Usage with frameworks](https://clerk.com/docs/components/waitlist#usage-with-frameworks)
4. [Usage with JavaScript](https://clerk.com/docs/components/waitlist#usage-with-java-script)
1. [`mountWaitlist()`](https://clerk.com/docs/components/waitlist#mount-waitlist)
2. [`mountWaitlist()` params](https://clerk.com/docs/components/waitlist#mount-waitlist-params)
3. [`unmountWaitlist()`](https://clerk.com/docs/components/waitlist#unmount-waitlist)
4. [`openWaitlist()`](https://clerk.com/docs/components/waitlist#open-waitlist)
5. [`closeWaitlist()`](https://clerk.com/docs/components/waitlist#close-waitlist)
5. [Customization](https://clerk.com/docs/components/waitlist#customization)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/components/waitlist.mdx)

# `<Waitlist />` component

![The <Waitlist /> component renders a form that allows users to join for early access to your app.](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fui-components%2Fwaitlist.png&w=1920&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

In **Waitlist** mode, users can register their interest in your app by joining a waitlist. This mode is ideal for apps in early development stages or those wanting to generate interest before launch. [Learn more about additional features available in **Waitlist** mode](https://clerk.com/docs/authentication/configuration/restrictions#waitlist).

The `<Waitlist />` component renders a form that allows users to join for early access to your app.

Note

If you're using Next.js, the `<Waitlist />` component is available in `@clerk/nextjs@6.2.0` and above.

## [Enable Waitlist mode](https://clerk.com/docs/components/waitlist\#enable-waitlist-mode)

Before using the `<Waitlist />` component, you must enable **Waitlist** mode in the Clerk Dashboard:

1. In the Clerk Dashboard, navigate to the [**Restrictions**⁠](https://dashboard.clerk.com/last-active?path=user-authentication/restrictions) page.
2. Under the **Sign-up modes** section, enable **Waitlist**.

## [Properties](https://clerk.com/docs/components/waitlist\#properties)

All props are optional.

- Name`afterJoinWaitlistUrl`Type`string`Description





The full URL or path to navigate to after joining the waitlist.

- Name`appearance`Type`Appearance | undefined`Description





Optional object to style your components. Will only affect [Clerk components](https://clerk.com/docs/components/overview) and not [Account Portal](https://clerk.com/docs/account-portal/overview) pages.

- Name`fallback?`Type`ReactNode`Description





An optional element to be rendered while the component is mounting.

- Name`signInUrl`Type`string`Description





The full URL or path to the sign in page. Used for the 'Already have an account? Sign in' link that's rendered. It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.


## [Usage with frameworks](https://clerk.com/docs/components/waitlist\#usage-with-frameworks)

Warning

Before using the `<Waitlist />` component, you must provide the `waitlistUrl` prop either in the [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider#properties) or [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in#properties) component to ensure proper functionality.

The following example includes a basic implementation of the `<Waitlist />` component. You can use this as a starting point for your own implementation.

Next.js

React

Astro

Tanstack Start

Vue

app/waitlist/\[\[...waitlist\]\]/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Waitlist } from '@clerk/nextjs'

export default function WaitlistPage() {
  return <Waitlist />
}
```

src/waitlist.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Waitlist } from '@clerk/clerk-react'

export default function WaitlistPage() {
  return <Waitlist />
}
```

pages/waitlist.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { Waitlist as WaitlistAstro } from '@clerk/astro/components'
---

<WaitlistAstro />
```

app/routes/waitlist.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Waitlist } from '@clerk/tanstack-start'
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/waitlist')({
  component: Waitlist,
})

function WaitlistPage() {
  return <Waitlist />
}
```

waitlist.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { Waitlist } from '@clerk/vue'
</script>

<template>
  <Waitlist />
</template>
```

## [Usage with JavaScript](https://clerk.com/docs/components/waitlist\#usage-with-java-script)

The following methods available on an instance of the [`Clerk`](https://clerk.com/docs/references/javascript/clerk) class are used to render and control the `<Waitlist />` component:

- [`mountWaitlist()`](https://clerk.com/docs/components/waitlist#mount-waitlist)
- [`unmountWaitlist()`](https://clerk.com/docs/components/waitlist#unmount-waitlist)
- [`openWaitlist()`](https://clerk.com/docs/components/waitlist#open-waitlist)
- [`closeWaitlist()`](https://clerk.com/docs/components/waitlist#close-waitlist)

The following examples assume that you followed the [quickstart](https://clerk.com/docs/quickstarts/javascript) to add Clerk to your JavaScript app.

### [`mountWaitlist()`](https://clerk.com/docs/components/waitlist\#mount-waitlist)

Render the `<Waitlist />` component to an HTML `<div>` element.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function mountWaitlist(node: HTMLDivElement, props?: WaitlistProps): void
```

### [`mountWaitlist()` params](https://clerk.com/docs/components/waitlist\#mount-waitlist-params)

- Name`node`Type[`HTMLDivElement`⁠](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement)Description





The `<div>` element used to render in the `<Waitlist />` component

- Name`props?`Type[`WaitlistProps`](https://clerk.com/docs/components/waitlist#properties)Description





The properties to pass to the `<Waitlist />` component


#### [`mountWaitlist()` usage](https://clerk.com/docs/components/waitlist\#mount-waitlist-usage)

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

// Initialize Clerk with your Clerk Publishable Key
const clerk = new Clerk('YOUR_PUBLISHABLE_KEY')
await clerk.load()

document.getElementById('app').innerHTML = `
  <div id="waitlist"></div>
`

const waitlistDiv = document.getElementById('waitlist')

clerk.mountWaitlist(waitlistDiv)
```

### [`unmountWaitlist()`](https://clerk.com/docs/components/waitlist\#unmount-waitlist)

Unmount and run cleanup on an existing `<Waitlist />` component instance.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function unmountWaitlist(node: HTMLDivElement): void
```

#### [`unmountWaitlist()` params](https://clerk.com/docs/components/waitlist\#unmount-waitlist-params)

- Name`node`Type[`HTMLDivElement`⁠](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement)Description





The container `<div>` element with a rendered `<Waitlist />` component instance


#### [`unmountWaitlist()` usage](https://clerk.com/docs/components/waitlist\#unmount-waitlist-usage)

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

// Initialize Clerk with your Clerk Publishable Key
const clerk = new Clerk('YOUR_PUBLISHABLE_KEY')
await clerk.load()

document.getElementById('app').innerHTML = `
  <div id="waitlist"></div>
`

const waitlistDiv = document.getElementById('waitlist')

clerk.mountWaitlist(waitlistDiv)

// ...

clerk.unmountWaitlist(waitlistDiv)
```

### [`openWaitlist()`](https://clerk.com/docs/components/waitlist\#open-waitlist)

Opens the `<Waitlist />` component as an overlay at the root of your HTML `body` element.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function openWaitlist(props?: WaitlistProps): void
```

#### [`openWaitlist()` params](https://clerk.com/docs/components/waitlist\#open-waitlist-params)

- Name`props?`Type[`WaitlistProps`](https://clerk.com/docs/components/waitlist#properties)Description





The properties to pass to the `<Waitlist />` component


#### [`openWaitlist()` usage](https://clerk.com/docs/components/waitlist\#open-waitlist-usage)

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

// Initialize Clerk with your Clerk Publishable Key
const clerk = new Clerk('YOUR_PUBLISHABLE_KEY')
await clerk.load()

document.getElementById('app').innerHTML = `
  <div id="waitlist"></div>
`

const waitlistDiv = document.getElementById('waitlist')

clerk.openWaitlist(waitlistDiv)
```

### [`closeWaitlist()`](https://clerk.com/docs/components/waitlist\#close-waitlist)

Closes the waitlist overlay.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function closeWaitlist(): void
```

#### [`closeWaitlist()` usage](https://clerk.com/docs/components/waitlist\#close-waitlist-usage)

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

// Initialize Clerk with your Clerk Publishable Key
const clerk = new Clerk('YOUR_PUBLISHABLE_KEY')
await clerk.load()

document.getElementById('app').innerHTML = `
  <div id="waitlist"></div>
`

const waitlistDiv = document.getElementById('waitlist')

clerk.openWaitlist(waitlistDiv)

// ...

clerk.closeWaitlist(waitlistDiv)
```

## [Customization](https://clerk.com/docs/components/waitlist\#customization)

To learn about how to customize Clerk components, see the [customization guide](https://clerk.com/docs/customization/overview).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/components/waitlist.mdx)

Last updated onMar 6, 2025

Support

## Clerk Nuxt Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/nuxt#main)

1. [Install `@clerk/nuxt`](https://clerk.com/docs/quickstarts/nuxt#install-clerk-nuxt)
2. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/nuxt#set-your-clerk-api-keys)
3. [Configure `nuxt.config.ts`](https://clerk.com/docs/quickstarts/nuxt#configure-nuxt-config-ts)
4. [Create a header with Clerk components](https://clerk.com/docs/quickstarts/nuxt#create-a-header-with-clerk-components)
5. [Create your first user](https://clerk.com/docs/quickstarts/nuxt#create-your-first-user)
6. [More resources](https://clerk.com/docs/quickstarts/nuxt#more-resources)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/nuxt.mdx)

# Nuxt Quickstart

## You will learn the following:

- Install `@clerk/nuxt`
- Set your Clerk API keys
- Configure `nuxt.config.ts`
- Create a header with Clerk components
- Protect your API routes

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create a Nuxt application](https://nuxt.com/docs/getting-started/installation)

## Example repository

- [Nuxt Quickstart Repo](https://github.com/clerk/clerk-nuxt-quickstart)

## [Install `@clerk/nuxt`](https://clerk.com/docs/quickstarts/nuxt\#install-clerk-nuxt)

The [Clerk Nuxt SDK](https://clerk.com/docs/references/nuxt/overview) gives you access to prebuilt components, Vue composables, and helpers to make user authentication easier.

Run the following command to install the SDK:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/nuxt
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @clerk/nuxt
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/nuxt
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @clerk/nuxt
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/nuxt\#set-your-clerk-api-keys)

Add the following keys to your `.env` file. These keys can always be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in your Clerk Dashboard.

1. In the Clerk Dashboard, navigate to the [**API Keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk publishable and secret key.
3. Paste your key into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
NUXT_PUBLIC_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
NUXT_CLERK_SECRET_KEY=YOUR_SECRET_KEY
```

## [Configure `nuxt.config.ts`](https://clerk.com/docs/quickstarts/nuxt\#configure-nuxt-config-ts)

To enable Clerk in your Nuxt app, add `@clerk/nuxt` to your modules array in `nuxt.config.ts`. This automatically configures Clerk's middleware and plugins and imports Clerk's components.

nuxt.config.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export default defineNuxtConfig({
  modules: ['@clerk/nuxt'],
})
```

## [Create a header with Clerk components](https://clerk.com/docs/quickstarts/nuxt\#create-a-header-with-clerk-components)

Nuxt 3 automatically imports and makes all components in the `components/` directory globally available without requiring explicit imports. See the [Nuxt docs⁠](https://nuxt.com/docs/guide/concepts/auto-imports) for details.

You can control which content signed-in and signed-out users can see with Clerk's [prebuilt control components](https://clerk.com/docs/components/overview#control-components).

The following example creates a header using the following components:

- [`<SignedIn>`](https://clerk.com/docs/components/control/signed-in): Children of this component can only be seen while **signed in**.
- [`<SignedOut>`](https://clerk.com/docs/components/control/signed-out): Children of this component can only be seen while **signed out**.
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button): Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.
- [`<SignInButton />`](https://clerk.com/docs/components/unstyled/sign-in-button): An unstyled component that links to the sign-in page or displays the sign-in modal. In this example, since no props or [environment variables](https://clerk.com/docs/deployments/clerk-environment-variables) are set for the sign-in URL, this component links to the [Account Portal sign-in page](https://clerk.com/docs/account-portal/overview#sign-in).

app.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
// Components are automatically imported
</script>

<template>
  <header>
    <SignedOut>
      <SignInButton />
    </SignedOut>
    <SignedIn>
      <UserButton />
    </SignedIn>
  </header>

  <main>
    <NuxtPage />
  </main>
</template>
```

## [Create your first user](https://clerk.com/docs/quickstarts/nuxt\#create-your-first-user)

Run your project with the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm run dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun dev
```

Visit your app's homepage at [`http://localhost:3000`⁠](http://localhost:3000/). Sign up to create your first user.

## [More resources](https://clerk.com/docs/quickstarts/nuxt\#more-resources)

Learn more about Clerk components, how to customize them, and how to use Clerk's client-side helpers using the following guides.

### [ProtectAPIroutesusingclerkMiddleware()](https://clerk.com/docs/references/nuxt/clerk-middleware)

Learn how to protect specific API routes from unauthenticated users.

### [Readsessionanduserdata](https://clerk.com/docs/references/nuxt/read-session-data)

Learn how to use Clerk's composables and helpers to access the active session and user data in your Nuxt app.

### [Client-sidehelpers](https://clerk.com/docs/references/nuxt/overview\#client-side-helpers)

Learn more about Nuxt client-side helpers and how to use them.

### [Clerk+NuxtQuickstartRepo](https://github.com/clerk/clerk-nuxt-quickstart)

The official companion repo for Clerk's Nuxt Quickstart.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/nuxt.mdx)

Last updated onFeb 25, 2025

Support

## Clerk Security Overview
[Skip to main content](https://clerk.com/docs/security/overview#main)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/security/overview.mdx)

# Security

Account security is Clerk's most important responsibility and the top concern of every feature we build. Maintaining best-practice account security has become too challenging and time-consuming for most organizations, and we have seen too many organizations cut corners as a result.

Clerk has a secure-by-default philosophy. Our goal is to help customers overcome as many challenges as possible without additional configuration, and we work to avoid options that may lead to an insecure application.

This documentation lists some of the many protections included with Clerk. These features do not cost extra — they are included for every application by default.

- [Vulnerability disclosure policy](https://clerk.com/docs/security/vulnerability-disclosure-policy)
- [XSS Leak Protection](https://clerk.com/docs/security/xss-leak-protection)
- [CSRF Protection](https://clerk.com/docs/security/csrf-protection)
- [Fixation Protection](https://clerk.com/docs/security/fixation-protection)
- [Password protection and rules](https://clerk.com/docs/security/password-protection)
- [Brute force protection and user account locking](https://clerk.com/docs/security/user-lock-guide)

If we are missing a protection you'd like to see, [contact support⁠](https://clerk.com/contact/support).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/security/overview.mdx)

Last updated onNov 18, 2024

Support

## Clerk Deprecation Errors
[Skip to main content](https://clerk.com/docs/errors/deprecation#main)

1. [`BAPIEndpointDeprecated`](https://clerk.com/docs/errors/deprecation#bapi-endpoint-deprecated)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/deprecation.mdx)

# Deprecation errors

An index of Clerk errors related to deprecation.

## [`BAPIEndpointDeprecated`](https://clerk.com/docs/errors/deprecation\#bapi-endpoint-deprecated)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "endpoint is deprecated and pending removal",
  "longMessage": "<DeprecationMessage>",
  "code": "api_operation_deprecated_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/deprecation.mdx)

Last updated onAug 16, 2024

Support

## Clerk Organizations Overview
[Skip to main content](https://clerk.com/docs/organizations/overview#main)

01. [Enable organizations in your application](https://clerk.com/docs/organizations/overview#enable-organizations-in-your-application)
02. [Organization management](https://clerk.com/docs/organizations/overview#organization-management)
03. [Active organization](https://clerk.com/docs/organizations/overview#active-organization)
04. [Monthly Active Organization (MAO)](https://clerk.com/docs/organizations/overview#monthly-active-organization-mao)
05. [Create an organization](https://clerk.com/docs/organizations/overview#create-an-organization)
    1. [Create an organization in the Clerk Dashboard](https://clerk.com/docs/organizations/overview#create-an-organization-in-the-clerk-dashboard)
    2. [Create an organization in your application](https://clerk.com/docs/organizations/overview#create-an-organization-in-your-application)
06. [Roles and permissions](https://clerk.com/docs/organizations/overview#roles-and-permissions)
07. [Membership limit](https://clerk.com/docs/organizations/overview#membership-limit)
08. [Default ability to delete](https://clerk.com/docs/organizations/overview#default-ability-to-delete)
09. [Verified domains](https://clerk.com/docs/organizations/overview#verified-domains)
10. [Organization invitations](https://clerk.com/docs/organizations/overview#organization-invitations)
11. [Manage SSO](https://clerk.com/docs/organizations/overview#manage-sso)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/overview.mdx)

# Organizations

Organizations are a flexible and scalable way to manage users and their access to resources within your Clerk application. With organizations, you can assign specific roles and permissions to users, making them useful for managing projects, coordinating teams, or facilitating partnerships.

Note

To explore organizations in Clerk, see the demo repo:
[https://github.com/clerk/organizations-demo⁠](https://github.com/clerk/organizations-demo)

## [Enable organizations in your application](https://clerk.com/docs/organizations/overview\#enable-organizations-in-your-application)

Organizations are disabled by default.

To enable organizations:

1. In the Clerk Dashboard, navigate to the [**Organizations Settings**⁠](https://dashboard.clerk.com/last-active?path=organizations-settings) page.
2. Select **Enable Organizations**.

Once organizations are enabled, you will be presented with the default settings, roles, and permissions that are applied to all organizations in that application instance. The following sections will explain these settings in more detail.

## [Organization management](https://clerk.com/docs/organizations/overview\#organization-management)

As the application owner, you have control over all of the organizations within your application - both those created by you and those created by your users. You can create, update, and delete organizations, as well as manage their members and settings.

1. In the top in the Clerk Dashboard, select [**Organizations**⁠](https://dashboard.clerk.com/last-active?path=organizations). Here, you can view and manage all organizations in your application.
2. Select a specific organization to view its details, members, and settings. Here, you can update the organization's name, slug, and logo. You can also set the organization's [membership limit](https://clerk.com/docs/organizations/overview#membership-limit) and public and private metadata.

For managing organizations in your application, Clerk provides a set of prebuilt components:

- [`<CreateOrganization />`](https://clerk.com/docs/components/organization/create-organization) \- A form for a user to create a new organization.
- [`<OrganizationProfile />`](https://clerk.com/docs/components/organization/organization-profile) \- A profile page for the user's currently active organization.
- [`<OrganizationList />`](https://clerk.com/docs/components/organization/organization-list) \- A list of organizations that a user is a member of.
- [`<OrganizationSwitcher />`](https://clerk.com/docs/components/organization/organization-switcher) \- A dropdown menu that handles all organization flows. It allows a user to create an organization, switch between their personal account and their organization account(s), and view their organization's profile, which allows them to manage the organization's settings, invitations, and current members.

If the prebuilt components don't meet your specific needs or if you require more control over the logic, you can rebuild and customize the existing Clerk flows using the Clerk API. See the [custom flows](https://clerk.com/docs/custom-flows/overview) for more information.

## [Active organization](https://clerk.com/docs/organizations/overview\#active-organization)

When a user is a member of an organization, they can switch between their personal workspace and an organization workspace. The organization workspace that a user is currently viewing is called the **active organization**. The active organization determines which organization-specific data the user can access and which role and related permissions they have within the organization.

By default, when a user initially signs in to a Clerk-powered application, they are signed in to their personal workspace and no active organization is set. Even if they are a member of only one organization, they must explicitly set it as active or the application can have logic to set this automatically.

The easiest way to allow users to set an organization as active is to use the [`<OrganizationSwitcher />`](https://clerk.com/docs/components/organization/organization-switcher) component.

You can also use the `setActive()` method, which is returned by the [`useOrganizationList()`](https://clerk.com/docs/hooks/use-organization-list) hook. If you aren't using hooks, you can access the `setActive()` method from the [`Clerk`](https://clerk.com/docs/references/javascript/clerk#set-active) object.

If you would like to hide personal workspaces and require users to always have an organization set as active, see the [dedicated guide](https://clerk.com/docs/organizations/force-organizations).

## [Monthly Active Organization (MAO)](https://clerk.com/docs/organizations/overview\#monthly-active-organization-mao)

The number of organizations you can have in a single Clerk application depends on your [Clerk plan⁠](https://clerk.com/pricing) and the type of instance (development or production), and is measured by Monthly Active Organizations (MAOs). An MAO is an organization with at least two users that have signed in that month, at least one of which must have interacted with the organization during the current billing cycle.

With the Free plan:

- In development instances, you can have _up to_ 50 MAOs in a single Clerk application. Each MAO can have _up to_ 5 members.
- In production instances, you can have up to 100 MAOs in a single Clerk application. Each MAO can have up to 5 members.

With the Pro plan:

- In development instances, you can have an unlimited number of MAOs in a single Clerk application _for free_. Each MAO can have an unlimited number of members.
- In production instances, you can have up to 100 MAOs in a single Clerk application _for free_. Each MAO after the first 100 costs $1.00 per month. Each MAO can have an unlimited number of members.

For more information on pricing, see the [pricing page⁠](https://clerk.com/pricing).

If you need more organizations or custom pricing, contact the [sales team⁠](https://clerk.com/contact/sales) to upgrade to the Enterprise plan.

## [Create an organization](https://clerk.com/docs/organizations/overview\#create-an-organization)

There are two ways to create an organization:

- [In the Clerk Dashboard](https://clerk.com/docs/organizations/overview#create-an-organization-in-the-clerk-dashboard)
- [In your application](https://clerk.com/docs/organizations/overview#create-an-organization-in-your-application)

How many organizations you can create depends on how many [MAOs](https://clerk.com/docs/organizations/overview#monthly-active-organization-mao) you have.

### [Create an organization in the Clerk Dashboard](https://clerk.com/docs/organizations/overview\#create-an-organization-in-the-clerk-dashboard)

To create an organization in the Clerk Dashboard:

1. In the top in the Clerk Dashboard, select [**Organizations**⁠](https://dashboard.clerk.com/last-active?path=organizations).
2. Select the **Create Organization** button.
3. Enter the organization's name. Optionally, upload the organization's logo, enter the organization's slug, and select the organization's owner. The slug is a unique identifier for the organization that is used in URLs, such as `example-name`.

### [Create an organization in your application](https://clerk.com/docs/organizations/overview\#create-an-organization-in-your-application)

By default, users have the permission to create organizations within your application. To configure this permission for all users:

1. In the Clerk Dashboard, navigate to the [**Organizations Settings**⁠](https://dashboard.clerk.com/last-active?path=organizations-settings) page.
2. At the bottom of the page, in the **Limit creation** section, enable/disable **Allow new users to create organizations**. You can also configure the number of organizations that can be created by each user. By default, each user can create an unlimited number of organizations.

If you want to only configure this permission for a specific user, you can override it on a per-user basis on the user's profile page in the Clerk Dashboard:

1. In the top in the Clerk Dashboard, select [**Users**⁠](https://dashboard.clerk.com/last-active?path=users).
2. Select the user you want to update.
3. In the **User permissions** section, enable/disable **Allow user to create organizations**.

When a user creates an organization, they become the organization's admin. As the organization's admin, they have full control over the organization, including the ability to update the organization's settings, invite users to join the organization, and manage the organization's members.

A single user within one of your applications can create _up to_ 100 organizations in that application. If you need users to be able to create more organizations than this, [contact support⁠](https://clerk.com/contact/support) to have the limit raised.

The easiest way to allow users to create organizations is to use the [`<CreateOrganization />`](https://clerk.com/docs/components/organization/create-organization) and/or [`<OrganizationSwitcher />`](https://clerk.com/docs/components/organization/organization-switcher) components. The `<OrganizationSwitcher />` component is more comprehensive, as it handles all organization flows.

## [Roles and permissions](https://clerk.com/docs/organizations/overview\#roles-and-permissions)

Roles determine a user's level of access and permissions within an organization. Learn more about [how roles and permissions work and how to create your own with Clerk](https://clerk.com/docs/organizations/roles-permissions).

## [Membership limit](https://clerk.com/docs/organizations/overview\#membership-limit)

There is no limit to the number of organizations a user can be a member of.

However, there is a limit to how many members total can be in a single organization. By default, the membership limit is set to 5 members. To change this limit, scroll to the **Default membership limit** section and update the membership limit.

If you are on the Free plan, you can update the membership limit to a maximum of 5 members.

If you have the Pro plan, you can set the membership limit to unlimited.

You can also change this limit on a per-organization basis:

1. In the top in the Clerk Dashboard, select [**Organizations**⁠](https://dashboard.clerk.com/last-active?path=organizations).
2. Select the organization you want to update.
3. In the **Membership limit** section, update the membership limit. Note that this will not apply to organizations that already exist.

## [Default ability to delete](https://clerk.com/docs/organizations/overview\#default-ability-to-delete)

By default, organizations are deletable. Any member with the "Delete organization" permission can delete an organization. To prevent organizations from being deleted, you can disable the ability to delete organizations by following these steps:

1. In the Clerk Dashboard, navigate to the [**Organizations Settings**⁠](https://dashboard.clerk.com/last-active?path=organizations-settings) page.
2. Scroll to the **Default ability to delete** section and uncheck the option. Note that this will not apply to organizations that already exist.

## [Verified domains](https://clerk.com/docs/organizations/overview\#verified-domains)

Verified domains can be used to streamline enrollment into an organization. For example, if the domain `@clerk.com` is added to an organization, any user with a `@clerk.com` email address can be automatically invited or be suggested to join this organization. This feature is useful for organizations that want to restrict membership to users with specific email domains. See the [guide on verified domains](https://clerk.com/docs/organizations/verified-domains) for more information.

## [Organization invitations](https://clerk.com/docs/organizations/overview\#organization-invitations)

Organization invitations are a way to invite users to join an organization. See the [guide on organization invitations](https://clerk.com/docs/organizations/invitations) for more information.

## [Manage SSO](https://clerk.com/docs/organizations/overview\#manage-sso)

Single Sign-On (SSO) can be configured at the organization level, allowing organizations to use their own Identity Provider (IdP) for authentication. When configured:

- Users can sign in through their organization's configured IdP
- Users are automatically added as members of the organization upon successful authentication
- Organizations can maintain their existing identity management workflows
- SAML 2.0 and OIDC protocols are supported

For instructions on how to set up and manage SSO for your organizations, see the [dedicated guide](https://clerk.com/docs/organizations/manage-sso).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/overview.mdx)

Last updated onMar 8, 2025

Support

## Clerk Astro Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/astro#main)

1. [Install `@clerk/astro`](https://clerk.com/docs/quickstarts/astro#install-clerk-astro)
2. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/astro#set-your-clerk-api-keys)
3. [Update `astro.config.mjs`](https://clerk.com/docs/quickstarts/astro#update-astro-config-mjs)
4. [Add `clerkMiddleware()` to your app](https://clerk.com/docs/quickstarts/astro#add-clerk-middleware-to-your-app)
5. [Add Clerk components to your app](https://clerk.com/docs/quickstarts/astro#add-clerk-components-to-your-app)
6. [Create your first user](https://clerk.com/docs/quickstarts/astro#create-your-first-user)
7. [Next steps](https://clerk.com/docs/quickstarts/astro#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/astro.mdx)

# Astro Quickstart

## You will learn the following:

- Install `@clerk/astro`
- Set your Clerk API keys
- Add `clerkMiddleware()`
- Create a header with Clerk components for users to sign in and out

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create an Astro application](https://docs.astro.build/en/install-and-setup)

## Example repository

- [Astro Quickstart Repo](https://github.com/clerk/clerk-astro-quickstart)

## [Install `@clerk/astro`](https://clerk.com/docs/quickstarts/astro\#install-clerk-astro)

The [Clerk Astro SDK](https://clerk.com/docs/references/astro/overview) provides a set of components, hooks, and stores that make it easy to build authentication and user management features in your Astro app.

Run the following command to install the SDK:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/astro
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @clerk/astro
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/astro
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @clerk/astro
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/astro\#set-your-clerk-api-keys)

Add the following keys to your `.env` file. These keys can always be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable and Secret Keys.
3. Paste your keys into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
PUBLIC_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
CLERK_SECRET_KEY=YOUR_SECRET_KEY
```

## [Update `astro.config.mjs`](https://clerk.com/docs/quickstarts/astro\#update-astro-config-mjs)

To configure Clerk in your Astro app, you will need to update your `astro.config.mjs`.

- Add the Clerk integration to the `integrations` list.
- Install an [SSR adapter⁠](https://docs.astro.build/en/guides/server-side-rendering/#official-adapters). This quickstart uses the [`@astrojs/node`⁠](https://docs.astro.build/en/guides/integrations-guide/node/) adapter.
- Set `output` to `server`. This is required when deploying to a host supporting SSR.

astro.config.mjs

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { defineConfig } from 'astro/config'
import node from '@astrojs/node'
import clerk from '@clerk/astro'

export default defineConfig({
  integrations: [clerk()],
  adapter: node({ mode: 'standalone' }),
  output: 'server',
})
```

## [Add `clerkMiddleware()` to your app](https://clerk.com/docs/quickstarts/astro\#add-clerk-middleware-to-your-app)

[`clerkMiddleware()`](https://clerk.com/docs/references/astro/clerk-middleware) grants you access to user authentication state throughout your app, on any route or page. It also allows you to protect specific routes from unauthenticated users. To add `clerkMiddleware()` to your app, follow these steps:

1. Create a `middleware.ts` file.


- If you're using the `/src` directory, create `middleware.ts` in the `/src` directory.
- If you're not using the `/src` directory, create `middleware.ts` in the root directory alongside `.env`.

2. In your `middleware.ts` file, export an `onRequest` constant and assign the result of the `clerkMiddleware()` function to it.src/middleware.ts

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkMiddleware } from '@clerk/astro/server'

export const onRequest = clerkMiddleware()
```

3. By default, `clerkMiddleware()` will not protect any routes. All routes are public and you must opt-in to protection for routes. See the [`clerkMiddleware()` reference](https://clerk.com/docs/references/astro/clerk-middleware) to learn how to require authentication for specific routes.

## [Add Clerk components to your app](https://clerk.com/docs/quickstarts/astro\#add-clerk-components-to-your-app)

You can control which content signed-in and signed-out users can see with Clerk's [prebuilt control components](https://clerk.com/docs/components/overview#control-components). Create a header using the following components:

- [`<SignedIn>`](https://clerk.com/docs/components/control/signed-in): Children of this component can only be seen while **signed in**.
- [`<SignedOut>`](https://clerk.com/docs/components/control/signed-out): Children of this component can only be seen while **signed out**.
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button): Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.
- [`<SignInButton />`](https://clerk.com/docs/components/unstyled/sign-in-button): An unstyled component that links to the sign-in page. In this example, since no props or [environment variables](https://clerk.com/docs/deployments/clerk-environment-variables) are set for the sign-in URL, this component links to the [Account Portal sign-in page](https://clerk.com/docs/account-portal/overview#sign-in).

src/layouts/SiteLayout.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { SignedIn, SignedOut, UserButton, SignInButton } from '@clerk/astro/components'

const { title } = Astro.props
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
  </head>
  <body>
    <header>
      <h1>{title}</h1>
      <nav>
        <SignedOut>
          <SignInButton mode="modal" />
        </SignedOut>
        <SignedIn>
          <UserButton />
        </SignedIn>
      </nav>
    </header>
    <article>
      <slot />
    </article>
  </body>
</html>
```

Then, use the layout on your homepage:

src/pages/index.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import SiteLayout from '../layouts/SiteLayout.astro'
---

<SiteLayout title="Clerk + Astro">
  <p>Sign in to try Clerk out!</p>
</SiteLayout>
```

## [Create your first user](https://clerk.com/docs/quickstarts/astro\#create-your-first-user)

Run your project with the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm run dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun dev
```

Now visit your app's homepage at [`http://localhost:4321`⁠](http://localhost:4321/). Sign up to create your first user.

## [Next steps](https://clerk.com/docs/quickstarts/astro\#next-steps)

### [ProtectroutesusingClerkMiddleware](https://clerk.com/docs/references/astro/clerk-middleware)

Learn how to protect specific routes from unauthenticated users.

### [Readsessionanduserdata](https://clerk.com/docs/references/astro/read-session-data)

Learn how to use Clerk's stores and helpers to access the active session and user data in your Astro app.

### [Clerk+AstroQuickstartRepo](https://github.com/clerk/clerk-astro-quickstart)

The official companion repo for Clerk's Astro Quickstart.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/astro.mdx)

Last updated onFeb 25, 2025

Support

## Clerk App Deployment
[Skip to main content](https://clerk.com/docs/deployments/overview#main)

1. [Create your production instance](https://clerk.com/docs/deployments/overview#create-your-production-instance)
2. [API keys and environment variables](https://clerk.com/docs/deployments/overview#api-keys-and-environment-variables)
3. [OAuth credentials](https://clerk.com/docs/deployments/overview#o-auth-credentials)
4. [DNS records](https://clerk.com/docs/deployments/overview#dns-records)
5. [Authentication across subdomains](https://clerk.com/docs/deployments/overview#authentication-across-subdomains)
6. [Configure `authorizedParties` for secure request authorization](https://clerk.com/docs/deployments/overview#configure-authorized-parties-for-secure-request-authorization)
1. [Examples](https://clerk.com/docs/deployments/overview#examples)
7. [Deploy certificates](https://clerk.com/docs/deployments/overview#deploy-certificates)
8. [Troubleshooting](https://clerk.com/docs/deployments/overview#troubleshooting)
1. [DNS records not propagating with Cloudflare](https://clerk.com/docs/deployments/overview#dns-records-not-propagating-with-cloudflare)
2. [Deployment stuck in certificate issuance](https://clerk.com/docs/deployments/overview#deployment-stuck-in-certificate-issuance)
3. [Incorrect domain](https://clerk.com/docs/deployments/overview#incorrect-domain)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/overview.mdx)

# Deploy your Clerk app to production

Before you begin:

1. You will need to have a domain you own.
2. You will need to be able to add DNS records on your domain.
3. You will need social sign-in (OAuth) credentials for any providers that you would like to use in production. Each [OAuth provider](https://clerk.com/docs/authentication/social-connections/oauth) has a dedicated guide on how to set up OAuth credentials for Clerk production apps.

## [Create your production instance](https://clerk.com/docs/deployments/overview\#create-your-production-instance)

1. Navigate to the [Clerk Dashboard⁠](https://dashboard.clerk.com/).
2. At the top of the Dashboard, select the **Development** button to reveal the instance selection dropdown. Select **Create production instance**.
3. You will be prompted with a modal to either clone your development instance settings to your production instance or create your production instance with Clerk's default settings.
4. The homepage of the dashboard will show you what is still required to deploy your production instance.

Warning

For security reasons, [**SSO connections**⁠](https://dashboard.clerk.com/last-active?path=user-authentication/sso-connections), [**Integrations**⁠](https://dashboard.clerk.com/last-active?path=integrations), and [**Paths**⁠](https://dashboard.clerk.com/last-active?path=paths) settings do not copy over. You will need to set these values again.

## [API keys and environment variables](https://clerk.com/docs/deployments/overview\#api-keys-and-environment-variables)

A common mistake when deploying to production is **forgetting to change your API keys to your production instances keys.** The best way to set this up is to make use of _environment variables_. All modern hosting providers, such as Vercel, AWS, GCP, Heroku, and Render, make it easy to add these values. Locally, you should use an `.env` file. This way, these values are being set dynamically depending on your environment. Here's a list of Clerk variables you'll need to change:

1. **Publishable Key:** Formatted as `pk_test_` in development and `pk_live_` in production. This is passed to the `<ClerkProvider>` during initialization.

2. **Secret Key:** Formatted as `sk_test_` in development and `sk_live_` in production. These values are used to access Clerk's Backend API.


Tip

Be sure to update these values in your hosting provider's environment variables.

## [OAuth credentials](https://clerk.com/docs/deployments/overview\#o-auth-credentials)

In development, for most social providers, Clerk provides you with a set of shared OAuth credentials.

In production, these are not secure and you will need to provide your own. Each [OAuth provider](https://clerk.com/docs/authentication/social-connections/oauth) has a dedicated guide on how to set up OAuth credentials for Clerk production apps.

## [DNS records](https://clerk.com/docs/deployments/overview\#dns-records)

Clerk uses DNS records to provide session management and emails verified from your domain.

To see what DNS records you need, navigate to the [**Domains**⁠](https://dashboard.clerk.com/last-active?path=domains) page in the Clerk Dashboard.

Note

It can take up to 24hrs for DNS Records to fully propagate, so be patient.

## [Authentication across subdomains](https://clerk.com/docs/deployments/overview\#authentication-across-subdomains)

When you set a root domain for your production deployment, Clerk's authentication will work across all subdomains. User sessions will also be shared across the subdomains.

**Examples**

- `example-site.com` and `dashboard.example-site.com`
- `dashboard.example-site.com` and `accounts.example-site.com`

Note

If you're using [passkeys](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options#passkeys), only the first scenario in the above example will work due to restrictions in the [WebAuthn standard⁠](https://www.w3.org/TR/webauthn-2/#sctn-rp-operations).

To share sessions and authentication across two different domains with the same Clerk application, see the [Authentication across different domains guide](https://clerk.com/docs/advanced-usage/satellite-domains).

## [Configure `authorizedParties` for secure request authorization](https://clerk.com/docs/deployments/overview\#configure-authorized-parties-for-secure-request-authorization)

For enhanced security, it's highly recommended to explicitly set the `authorizedParties` option when authorizing requests. This option acts as an allowlist of origins to verify against, protecting your application from subdomain cookie leaking attacks. Without this setting, if an app on another subdomain of the same root domain as your Clerk app is compromised, that app could potentially generate valid sessions for your Clerk app.

The `authorizedParties` value should include a list of domains allowed to make requests to your application. Omitting this setting can expose your application to [CSRF attacks⁠](https://owasp.org/www-community/attacks/csrf).

### [Examples](https://clerk.com/docs/deployments/overview\#examples)

The following examples show how to set `authorizedParties` with different Clerk helpers.

#### [Set `authorizedParties` with `clerkMiddleware()`](https://clerk.com/docs/deployments/overview\#set-authorized-parties-with-clerk-middleware)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
clerkMiddleware({
  authorizedParties: ['https://example.com'],
})
```

#### [Set `authorizedParties` with `authenticateRequest()`](https://clerk.com/docs/deployments/overview\#set-authorized-parties-with-authenticate-request)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
clerkClient.authenticateRequest(req, {
  authorizedParties: ['https://example.com'],
})
```

## [Deploy certificates](https://clerk.com/docs/deployments/overview\#deploy-certificates)

The Clerk Dashboard home page will tell you what steps are still required to deploy your production instance. Once you have completed all of the necessary steps, a **Deploy certificates** button will appear. Selecting this button will deploy your production instance.

## [Troubleshooting](https://clerk.com/docs/deployments/overview\#troubleshooting)

### [DNS records not propagating with Cloudflare](https://clerk.com/docs/deployments/overview\#dns-records-not-propagating-with-cloudflare)

Clerk uses a DNS check to validate this CNAME record. If this subdomain is reverse proxied behind a service that points to generic hostnames, such as Cloudflare, the DNS check will fail. Set the DNS record for this subdomain to a "DNS only" mode on your host to prevent proxying.

### [Deployment stuck in certificate issuance](https://clerk.com/docs/deployments/overview\#deployment-stuck-in-certificate-issuance)

If your instance is stuck during TLS certificate issuance for longer than a few minutes, this might be caused due to certain [CAA DNS records⁠](https://en.wikipedia.org/wiki/DNS_Certification_Authority_Authorization) set on your primary domain.

CAA are DNS records you may set to denote which certificate authorities (CA) are permitted to issue certificates for your domain, as a security measure against certain attacks. When you deploy your application, Clerk attempts to provision certificates using either the [LetsEncrypt⁠](https://letsencrypt.org/) or [Google Trust Services⁠](https://pki.goog/) certificate authorities.

Ensure that your primary domain (e.g., example.com) does not have any CAA records that prevent either LetsEncrypt or Google Trust Services from issuing certificates for your domain. To check this, run the following command in your terminal, replacing `example.com` with your app’s domain:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
dig example.com +short CAA
```

If the command returns an empty response, your domain is correctly configured. If it returns any text, you need to remove the CAA records from your primary domain to avoid potential downtime during certificate renewal.

### [Incorrect domain](https://clerk.com/docs/deployments/overview\#incorrect-domain)

If you accidentally set the wrong domain, you can change it through the Clerk Dashboard or the Backend API. For more information, see the [dedicated guide](https://clerk.com/docs/deployments/changing-domains).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/overview.mdx)

Last updated onMar 8, 2025

Support

## Clerk Maintenance Mode
[Skip to main content](https://clerk.com/docs/maintenance-mode#main)

1. [Production instances](https://clerk.com/docs/maintenance-mode#production-instances)
1. [API errors](https://clerk.com/docs/maintenance-mode#api-errors)
2. [UI components](https://clerk.com/docs/maintenance-mode#ui-components)
2. [Development instances](https://clerk.com/docs/maintenance-mode#development-instances)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/maintenance-mode.mdx)

# Maintenance Mode

Important

Maintenance mode will be deprecated in 2025 as we upgrade our infrastructure.

Once or twice per year, Clerk undergoes maintenance on its infrastructure and enters **Maintenance Mode**. During this time, users who are already signed in will not be signed out, and will continue to have access to your app. However, new sign-ups, sign-ins and user mutations will return an error. **Maintenance Mode** is a special operational state designed to minimize disruption for signed-in users during critical database upgrades or outages.

## [Production instances](https://clerk.com/docs/maintenance-mode\#production-instances)

Mutation methods ( `POST`, `PATCH`, `PUT`, `DELETE`) will be rejected with a `SystemUnderMaintenance` error. This includes all new sign-ups and sign-ins.

Active sessions, and session refresh requests **are not** affected. This applies to `GET` requests as well as session refresh requests ( [`/touch`](https://clerk.com/docs/reference/frontend-api/tag/Sessions#operation/touchSession) and [`/tokens`](https://clerk.com/docs/reference/frontend-api/tag/Sessions#operation/createSessionToken) endpoints). Users who are already signed in will not be signed out and will continue to have access to your app. However, any mutations to their user or org data will return the same `SystemUnderMaintenance` error.

### [API errors](https://clerk.com/docs/maintenance-mode\#api-errors)

All mutations from both the Frontend API and the Backend API will return the following `SystemUnderMaintenance` error.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
// 503 StatusServiceUnavailable
{
  "shortMessage": "System under maintenance",
  "longMessage": "We are currently undergoing maintenance and only essential operations are permitted. We will be back shortly.",
  "code": "maintenance_mode"
}
```

### [UI components](https://clerk.com/docs/maintenance-mode\#ui-components)

During **Maintenance Mode**, Clerk's UI components will display the following error for sign-ins, sign-ups, and all mutations to user and org data.

![The <SignIn /> component with a maintenance mode error.](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fmaintenance-mode%2Fmaintenance-mode-error-sm.png&w=828&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## [Development instances](https://clerk.com/docs/maintenance-mode\#development-instances)

For development instances, all requests will return a `SystemUnderMaintenance ` error, and the instance will be completely unavailable.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/maintenance-mode.mdx)

Last updated onNov 22, 2024

Support

## Clerk Testing Overview
[Skip to main content](https://clerk.com/docs/testing/overview#main)

1. [Test with one time passcodes](https://clerk.com/docs/testing/overview#test-with-one-time-passcodes)
2. [Get a valid session token](https://clerk.com/docs/testing/overview#get-a-valid-session-token)
3. [Testing Tokens](https://clerk.com/docs/testing/overview#testing-tokens)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/testing/overview.mdx)

# Testing

Testing is an important part of every application. Each framework may require a slightly different setup. If you're having trouble getting testing to work properly, [contact support⁠](https://clerk.com/contact/support).

## [Test with one time passcodes](https://clerk.com/docs/testing/overview\#test-with-one-time-passcodes)

To avoid sending an email or SMS message with a one time passcode (OTP) during testing, you can use a fake email address or phone number that has a fixed code. Read the complete documentation [here](https://clerk.com/docs/testing/test-emails-and-phones).

## [Get a valid session token](https://clerk.com/docs/testing/overview\#get-a-valid-session-token)

When writing tests using Clerk, if you need to get a valid session token, use the following flow:

1. If you have not already, [create a new user⁠](https://clerk.com/docs/reference/backend-api/tag/Users#operation/CreateUser).
2. [Create a new session⁠](https://clerk.com/docs/reference/backend-api/tag/Sessions#operation/createSession) for the user.
3. [Create a session token⁠](https://clerk.com/docs/reference/backend-api/tag/Sessions#operation/CreateSessionToken) using the session ID returned in the previous step.
4. Pass the returned session token as the value of an Authorization header to any other requests you're making, as such: `Authorization: Bearer <session_token>`.

Note that Clerk's session tokens are short-lived and are valid only for 60 seconds. Read more [here](https://clerk.com/docs/how-clerk-works/overview).

If the session token expires, you will need to refresh it with the same [create session token endpoint⁠](https://clerk.com/docs/reference/backend-api/tag/Sessions#operation/CreateSessionToken). The most common ways to do this are to either hit this endpoint before every test to ensure you have a valid session token, or to run an interval timer that refreshes the token before it expires.

For more information, feedback or issues, visit the [`@clerk/testing`⁠](https://github.com/clerk/javascript/tree/main/packages/testing) package.

## [Testing Tokens](https://clerk.com/docs/testing/overview\#testing-tokens)

Testing Tokens allow you to bypass bot detection mechanisms that protect Clerk applications from malicious bots, ensuring your test suites run smoothly. Without Testing Tokens, you may encounter "Bot traffic detected" errors in your requests.

Note

While you can manually implement the following logic in your test suite, Clerk provides [Playwright](https://clerk.com/docs/testing/playwright/overview) and [Cypress](https://clerk.com/docs/testing/cypress/overview) integrations that handle this automatically.

Obtained via the [Backend API⁠](https://clerk.com/docs/reference/backend-api/tag/Testing-Tokens), Testing Tokens are short-lived and valid only for the specific instance for which they are issued.

Once retrieved, include the token value in the `__clerk_testing_token` query parameter in your Frontend API requests. For example, a sign-up request using a Testing Token would look like this:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
POST https://happy-hippo-1.clerk.accounts.dev/v1/client/sign_ups?__clerk_testing_token=1713877200-c_2J2MvPu9PnXcuhbPZNao0LOXqK9A7YrnBn0HmIWxy
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/testing/overview.mdx)

Last updated onDec 20, 2024

Support

## Clerk Routing Guide
[Skip to main content](https://clerk.com/docs/guides/routing#main)

1. [`routing` prop](https://clerk.com/docs/guides/routing#routing-prop)
1. [`path` routing](https://clerk.com/docs/guides/routing#path-routing)
2. [`hash` routing](https://clerk.com/docs/guides/routing#hash-routing)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/routing.mdx)

# Routing in Clerk

Some of Clerk's components have their own internal routing.

For example, say a user uses their email address to fill out the [`<SignUp />`](https://clerk.com/docs/components/authentication/sign-up) form. Once they submit the form, they are redirected from `/sign-up` to `/sign-up/verify-email-address`, which renders Clerk's UI for verifying a user's email address. This redirect is handled by Clerk's internal routing.

## [`routing` prop](https://clerk.com/docs/guides/routing\#routing-prop)

The following Clerk components accept a `routing` prop in order to define the routing strategy:

- [`<SignUp />`](https://clerk.com/docs/components/authentication/sign-up)
- [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in)
- [`<UserProfile />`](https://clerk.com/docs/components/user/user-profile)
- [`<CreateOrganization />`](https://clerk.com/docs/components/organization/create-organization)
- [`<OrganizationProfile />`](https://clerk.com/docs/components/organization/organization-profile)

There following routing strategies can be passed:

- [`path`](https://clerk.com/docs/guides/routing#path-routing)
- [`hash`](https://clerk.com/docs/guides/routing#hash-routing)

Clerk will attempt to select the routing strategy that best integrates with your framework of choice. If for some reason the default routing strategy doesn't work for you, use the information below to pick a strategy that will work for your setup.

### [`path` routing](https://clerk.com/docs/guides/routing\#path-routing)

`path` routing uses the path in the URL to determine the route. This is useful for server-rendered pages where SEO and server-side routing are crucial, such as Next.js or Remix applications.

For example, say you have a Clerk + Next.js application with the `<SignUp />` component on a dedicated `/sign-up` page. A user visit this page and uses their email address to fill out the `<SignUp />` form. Once they submit the form, they are redirected from `/sign-up` to `/sign-up/verify-email-address`.

For the following SDKs, `path` routing is set _by default_ on all Clerk components, as these frameworks support server-side routing out-of-the-box. There is no need to pass the `routing` or `path` props to Clerk components in these frameworks.

- Next.js
- Remix
- Tanstack Start
- React Router

### [`hash` routing](https://clerk.com/docs/guides/routing\#hash-routing)

`hash` routing uses [the hash (#) portion of the URL⁠](https://developer.mozilla.org/en-US/docs/Web/API/URL/hash) to determine the route. This is useful for single-page applications that use client-side routing.

For example, say you have a Clerk + React application with the `<SignUp />` component on a dedicated `/sign-up` page. A user visit this page and uses their email address to fill out the `<SignUp />` form. Once they submit the form, they are redirected from `/sign-up` to `/sign-up#verify-email-address`.

In Clerk applications that use any SDK other than Next.js or Remix, `hash` routing is set _by default_ on all Clerk components.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/routing.mdx)

Last updated onFeb 25, 2025

Support

## Next.js Clerk Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/nextjs#main)

1. [Create a new Next.js application](https://clerk.com/docs/quickstarts/nextjs#create-a-new-next-js-application)
2. [Install `@clerk/nextjs`](https://clerk.com/docs/quickstarts/nextjs#install-clerk-nextjs)
3. [Add `clerkMiddleware()` to your app](https://clerk.com/docs/quickstarts/nextjs#add-clerk-middleware-to-your-app)
4. [Add `<ClerkProvider>` and Clerk components to your app](https://clerk.com/docs/quickstarts/nextjs#add-clerk-provider-and-clerk-components-to-your-app)
5. [Create your first user](https://clerk.com/docs/quickstarts/nextjs#create-your-first-user)
6. [It's time to build!](https://clerk.com/docs/quickstarts/nextjs#its-time-to-build)
7. [Next steps](https://clerk.com/docs/quickstarts/nextjs#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/nextjs.mdx)

# Next.js Quickstart (App Router)

## You will learn the following:

- Install `@clerk/nextjs`
- Add `clerkMiddleware()`
- Add `<ClerkProvider>` and Clerk components
- Create your first user

## Example repository

- [App Router Quickstart Repo](https://github.com/clerk/clerk-nextjs-app-quickstart)

## [Create a new Next.js application](https://clerk.com/docs/quickstarts/nextjs\#create-a-new-next-js-application)

Run the following command to [create a new Next.js application⁠](https://nextjs.org/docs/getting-started/installation):

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm create next-app@latest
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn create next-app
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm create next-app
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun create next-app
```

## [Install `@clerk/nextjs`](https://clerk.com/docs/quickstarts/nextjs\#install-clerk-nextjs)

Run the following command to install the Next.js SDK:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/nextjs
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @clerk/nextjs
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/nextjs
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @clerk/nextjs
```

## [Add `clerkMiddleware()` to your app](https://clerk.com/docs/quickstarts/nextjs\#add-clerk-middleware-to-your-app)

`clerkMiddleware()` grants you access to user authentication state throughout your app.

1. Create a `middleware.ts` file.



- If you're using the `/src` directory, create `middleware.ts` in the `/src` directory.
- If you're not using the `/src` directory, create `middleware.ts` in the root directory.

2. In your `middleware.ts` file, export the `clerkMiddleware()` helper:


middleware.ts

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkMiddleware } from '@clerk/nextjs/server'

export default clerkMiddleware()

export const config = {
     matcher: [\
       // Skip Next.js internals and all static files, unless found in search params\
       '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\
       // Always run for API routes\
       '/(api|trpc)(.*)',\
     ],
}
```

3. By default, `clerkMiddleware()` will not protect any routes. All routes are public and you must opt-in to protection for routes. See the [`clerkMiddleware()` reference](https://clerk.com/docs/references/nextjs/clerk-middleware) to learn how to require authentication for specific routes.


## [Add `<ClerkProvider>` and Clerk components to your app](https://clerk.com/docs/quickstarts/nextjs\#add-clerk-provider-and-clerk-components-to-your-app)

1. Add the [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider) component to your app's layout. This component provides Clerk's authentication context to your app.
2. Copy and paste the following file into your `layout.tsx` file. This creates a header with Clerk's [prebuilt components](https://clerk.com/docs/components/overview) to allow users to sign in and out.

app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import type { Metadata } from 'next'
import {
  ClerkProvider,
  SignInButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from '@clerk/nextjs'
import { Geist, Geist_Mono } from 'next/font/google'
import './globals.css'

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
})

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
})

export const metadata: Metadata = {
  title: 'Clerk Next.js Quickstart',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          <header className="flex justify-end items-center p-4 gap-4 h-16">
            <SignedOut>
              <SignInButton />
              <SignUpButton />
            </SignedOut>
            <SignedIn>
              <UserButton />
            </SignedIn>
          </header>
          {children}
        </body>
      </html>
    </ClerkProvider>
  )
}
```

## [Create your first user](https://clerk.com/docs/quickstarts/nextjs\#create-your-first-user)

1. Run your project with the following command:











npm







yarn







pnpm







bun













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm run dev
```













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn dev
```













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm dev
```













terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun dev
```

2. Visit your app's homepage at [http://localhost:3000⁠](http://localhost:3000/).

3. Click "Sign up" in the header and authenticate to create your first user.


## [It's time to build!](https://clerk.com/docs/quickstarts/nextjs\#its-time-to-build)

You've added Clerk to your Next.js app 🎉. From here, you can continue developing your application.

To make configuration changes to your Clerk development instance, claim the Clerk keys that were generated for you by selecting **Claim your application** in the bottom right of your app. This will associate the application with your Clerk account.

## [Next steps](https://clerk.com/docs/quickstarts/nextjs\#next-steps)

### [Createacustomsign-inorsign-uppage](https://clerk.com/docs/references/nextjs/custom-sign-in-or-up-page)

This tutorial gets you started with Clerk's `<SignInButton />` component, which uses the Account Portal. If you don't want to use the Account Portal, read this guide about creating a custom authentication page.

### [Addcustomonboardingtoyourauthenticationflow](https://clerk.com/docs/references/nextjs/add-onboarding-flow)

If you need to collect additional information about users that Clerk's Account Portal or prebuilt components don't collect, read this guide about adding a custom onboarding flow to your authentication flow.

### [Protectspecificroutes](https://clerk.com/docs/references/nextjs/clerk-middleware)

This tutorial taught you that by default, `clerkMiddleware()` will not protect any routes. Read this reference doc to learn how to protect specific routes from unauthenticated users.

### [Readuserandsessiondata](https://clerk.com/docs/references/nextjs/read-session-data)

Learn how to use Clerk's hooks and helpers to access the active session and user data in your Next.js app.

### [Next.jsSDKReference](https://clerk.com/docs/references/nextjs/overview)

Learn more about the Clerk Next.js SDK and how to use it.

### [DeploytoProduction](https://clerk.com/docs/deployments/overview)

Learn how to deploy your Clerk app to production.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/nextjs.mdx)

Last updated onMar 5, 2025

Support

## Organization Metadata Management
[Skip to main content](https://clerk.com/docs/organizations/metadata#main)

1. [Set organization metadata](https://clerk.com/docs/organizations/metadata#set-organization-metadata)
1. [In the Clerk Dashboard](https://clerk.com/docs/organizations/metadata#in-the-clerk-dashboard)
2. [Using the Backend SDK](https://clerk.com/docs/organizations/metadata#using-the-backend-sdk)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/metadata.mdx)

# Organization metadata

Organization metadata allows you to store information about an organization that is not part of the standard fields, such as custom attributes that are specific to your application.

There are two types of metadata: **public** and **private**.

- Both **public** and **private** metadata are set and can be accessed from the [Backend API⁠](https://clerk.com/docs/reference/backend-api).
- Only **public** metadata can be accessed from the [Frontend API⁠](https://clerk.com/docs/reference/frontend-api/).

Both the `Organization` and `Organization Membership` objects have the metadata fields: `publicMetadata` and `privateMetadata`.

- Use the `publicMetadata` property if you need to set some metadata from your backend and have them displayed as read-only on the frontend.
- Use the `privateMetadata` property if the custom attributes contain sensitive information that should not be displayed on the frontend.

## [Set organization metadata](https://clerk.com/docs/organizations/metadata\#set-organization-metadata)

There are two ways to set organization metadata:

- In the Clerk Dashboard
- Using the [Backend SDK](https://clerk.com/docs/references/backend/overview)

### [In the Clerk Dashboard](https://clerk.com/docs/organizations/metadata\#in-the-clerk-dashboard)

1. In the Clerk Dashboard, navigate to the [**Organizations**⁠](https://dashboard.clerk.com/last-active?path=organizations) page.
2. Select the organization you want to update.
3. In the **Organization metadata** section, select **Edit** next to the metadata you want to update.

### [Using the Backend SDK](https://clerk.com/docs/organizations/metadata\#using-the-backend-sdk)

To ease the flow of setting metadata, Clerk provides the `updateOrganizationMetadata()` and `updateOrganizationMembershipMetadata()` methods from the [Backend SDK](https://clerk.com/docs/references/backend/overview), which is a wrapper around the [Backend API⁠](https://clerk.com/docs/reference/backend-api).

Warning

Metadata is limited to **8kb** maximum.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/metadata.mdx)

Last updated onFeb 17, 2025

Support

## Fastify Authentication Guide
[Skip to main content](https://clerk.com/docs/quickstarts/fastify#main)

1. [Install `@clerk/fastify`](https://clerk.com/docs/quickstarts/fastify#install-clerk-fastify)
2. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/fastify#set-your-clerk-api-keys)
3. [Configure `clerkPlugin()` for all routes](https://clerk.com/docs/quickstarts/fastify#configure-clerk-plugin-for-all-routes)
4. [Protect your routes using `getAuth()`](https://clerk.com/docs/quickstarts/fastify#protect-your-routes-using-get-auth)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/fastify.mdx)

# Fastify Quickstart

## You will learn the following:

- Install `@clerk/fastify`
- Set your Clerk API keys
- Configure `clerkPlugin` for all routes
- Use `getAuth()` to access the auth state and protect routes
- Configure `clerkPlugin` for specific routes

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Add Fastify as your backend](https://fastify.dev/docs/latest/Guides/Getting-Started)

## Example repository

- [Fastify Quickstart](https://github.com/clerk/clerk-fastify-quickstart)

Learn how to integrate Clerk into your Fastify backend for secure user authentication and management. This guide uses TypeScript and allows you to choose your frontend framework.

Important

[Fastify is only compatible with Next.js versions 13.4 and below⁠](https://github.com/fastify/fastify-nextjs). If you're using a newer version of Next.js, consider using a different backend framework that supports the latest Next.js features.

This guide uses ECMAScript Modules (ESM). To use ESM in your project, you must include `"type": "module"` in your `package.json`.

## [Install `@clerk/fastify`](https://clerk.com/docs/quickstarts/fastify\#install-clerk-fastify)

[Clerk's Fastify SDK⁠](https://github.com/clerk/javascript/tree/main/packages/fastify) provides a range of backend utilities to simplify user authentication and management in your application.

Run the following command to install the SDK:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/fastify
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/fastify\#set-your-clerk-api-keys)

Add the following keys to your `.env` file. These keys can always be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable and Secret Keys.
3. Paste your keys into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
CLERK_SECRET_KEY=YOUR_SECRET_KEY
```

## [Configure `clerkPlugin()` for all routes](https://clerk.com/docs/quickstarts/fastify\#configure-clerk-plugin-for-all-routes)

The `clerkPlugin()` function is a Fastify plugin provided by Clerk to integrate authentication into your Fastify application. To ensure that Clerk's authentication and user management features are applied across your Fastify application, configure the `clerkPlugin()` to handle all routes or limit it to specific ones.

The following example registers the plugin for all routes. To register the plugin for specific routes, see the [reference docs](https://clerk.com/docs/references/fastify/overview#configure-clerk-plugin-for-specific-routes).

Important

The `dotenv/config` module must be imported before any Clerk modules. This order is important because Clerk instances are created during the import process and rely on environment variables, such as API keys, to be initialized correctly. For more information, refer to the [Fastify docs⁠](https://fastify.dev/docs/latest/Guides/Getting-Started/#loading-order-of-your-plugins).

index.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import 'dotenv/config'
import Fastify from 'fastify'
import { clerkPlugin } from '@clerk/fastify'

const fastify = Fastify({ logger: true })

fastify.register(clerkPlugin)

const start = async () => {
  try {
    await fastify.listen({ port: 8080 })
  } catch (error) {
    fastify.log.error(error)
    process.exit(1)
  }
}

start()
```

## [Protect your routes using `getAuth()`](https://clerk.com/docs/quickstarts/fastify\#protect-your-routes-using-get-auth)

The [`getAuth()`](https://clerk.com/docs/references/fastify/overview#get-auth) helper retrieves the current user's authentication state from the `request` object. It returns the [`Auth` object⁠](https://clerk.com/docs/references/backend/types/auth-object#auth-object).

The following example uses `getAuth()` to protect a route and load the user's data. If the user is authenticated, their `userId` is passed to [`clerkClient.users.getUser()`⁠](https://clerk.com/docs/references/backend/user/get-user) to get the current user's [`User`⁠](https://clerk.com/docs/references/javascript/user) object. If not authenticated, the request is rejected with a `401` status code.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
// dotenv must be imported before @clerk/fastify
import 'dotenv/config'
import Fastify from 'fastify'
import { clerkClient, clerkPlugin, getAuth } from '@clerk/fastify'

const fastify = Fastify({ logger: true })

fastify.register(clerkPlugin)

// Use `getAuth()` to protect this route
fastify.get('/protected', async (request, reply) => {
  try {
    // Use `getAuth()` to get the user's ID
    const { userId } = getAuth(request)

    // If user isn't authenticated, return a 401 error
    if (!userId) {
      return reply.code(401).send({ error: 'User not authenticated' })
    }

    // Use `clerkClient` to access Clerk's Backend SDK methods
    // and get the user's User object
    const user = userId ? await clerkClient.users.getUser(userId) : null

    return reply.send({
      message: 'User retrieved successfully',
      user,
    })
  } catch (error) {
    fastify.log.error(error)
    return reply.code(500).send({ error: 'Failed to retrieve user' })
  }
})

const start = async () => {
  try {
    await fastify.listen({ port: 8080 })
  } catch (error) {
    fastify.log.error(error)
    process.exit(1)
  }
}

start()
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/fastify.mdx)

Last updated onFeb 12, 2025

Support

## SDK References
[Skip to main content](https://clerk.com/docs/references/overview#main)

1. [Frontend SDKs](https://clerk.com/docs/references/overview#frontend-sdks)
2. [Backend SDKs](https://clerk.com/docs/references/overview#backend-sdks)
3. [Build with community-maintained SDKs](https://clerk.com/docs/references/overview#build-with-community-maintained-sdks)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/overview.mdx)

# SDK References

## [Frontend SDKs](https://clerk.com/docs/references/overview\#frontend-sdks)

### [Next.js](https://clerk.com/docs/references/nextjs/overview)

Easily add secure, beautiful, and fast authentication to Next.js with Clerk.

### [React](https://clerk.com/docs/references/react/overview)

Get started installing and initializing Clerk in a new React + Vite app.

### [Astro](https://clerk.com/docs/references/astro/overview)

Easily add secure and SSR-friendly authentication to your Astro application with Clerk.

### [ChromeExtension](https://clerk.com/docs/references/chrome-extension/overview)

Use the Chrome Extension SDK to authenticate users in your Chrome extension.

### [Expo](https://clerk.com/docs/references/expo/overview)

Use Clerk with Expo to authenticate users in your React Native application.

### [iOSBeta](https://clerk.com/docs/references/ios/overview)

Use the Clerk iOS SDK to authenticate users in your native Apple applications.

### [JavaScript](https://clerk.com/docs/references/javascript/overview)

The Clerk JavaScript SDK gives you access to prebuilt components and helpers to make user authentication easier.

### [Nuxt](https://clerk.com/docs/references/nuxt/overview)

Easily add secure, beautiful, and fast authentication to Nuxt with Clerk.

### [ReactRouter](https://clerk.com/docs/references/react-router/overview)

Easily add secure, edge- and SSR-friendly authentication to React Router with Clerk.

### [Remix](https://clerk.com/docs/references/remix/overview)

Easily add secure, edge- and SSR-friendly authentication to Remix with Clerk.

![tanstack start logo](<Base64-Image-Removed>)

### [TanStackStartBeta](https://clerk.com/docs/references/tanstack-start/overview)

Easily add secure and SSR-friendly authentication to your TanStack Start application with Clerk.

### [Vue](https://clerk.com/docs/references/vue/overview)

Get started installing and initializing Clerk in a new Vue + Vite app.

## [Backend SDKs](https://clerk.com/docs/references/overview\#backend-sdks)

### [JSBackendSDK](https://clerk.com/docs/references/backend/overview)

The Clerk Backend SDK exposes our Backend API resources and low-level authentication utilities for JavaScript environments.

### [C\#](https://github.com/clerk/clerk-sdk-csharp/blob/main/README.md)

The Clerk C# SDK is a wrapper around our Backend API to make it easier to integrate Clerk into your backend.

### [Express](https://clerk.com/docs/references/express/overview)

Quickly add authentication and user management to your Express application.

### [Go](https://clerk.com/docs/references/go/overview)

The Clerk Go SDK is a wrapper around the Backend API written in Golang to make it easier to integrate Clerk into your backend.

### [Fastify](https://clerk.com/docs/references/fastify/overview)

Build secure authentication and user management flows for your Fastify server.

### [Python](https://github.com/clerk/clerk-sdk-python/blob/main/README.md)

The Clerk Python SDK is a wrapper around the Backend API written in Python to make it easier to integrate Clerk into your backend.

### [RubyonRails](https://clerk.com/docs/references/ruby/overview)

Integrate authentication and user management into your Ruby application.

## [Build with community-maintained SDKs](https://clerk.com/docs/references/overview\#build-with-community-maintained-sdks)

### [Angular](https://github.com/anagstef/ngx-clerk?tab=readme-ov-file\#ngx-clerk)

Visit the community-maintained repository to learn how to integrate Clerk into your Angular application.

### [Elysia](https://github.com/wobsoriano/elysia-clerk)

Visit the community-maintained plugin for integrating Clerk with Elysia.

### [Hono](https://github.com/honojs/middleware/tree/main/packages/clerk-auth)

Visit the community-maintained repository to learn how to integrate Clerk into your Hono application.

### [Koa](https://github.com/dimkl/clerk-koa/blob/main/README.md)

Visit the community-maintained repository to learn how to integrate Clerk into your Koa application.

### [SolidJS](https://github.com/spirit-led-software/clerk-solidjs)

Visit the community-maintained repository to learn how to integrate Clerk into your SolidJS application.

### [Svelte](https://github.com/wobsoriano/svelte-clerk)

Visit the community-maintained adapter for integrating Clerk with SvelteKit.

### [Redwood](https://redwoodjs.com/docs/auth/clerk)

Visit the RedwoodJS documentation to learn how to integrate Clerk into your RedwoodJS application.

### [Rust](https://github.com/DarrenBaldwin07/clerk-rs)

Visit the community-maintained Rust SDK to integrate Clerk with Rust.

## [Join our Discord](https://clerk.com/discord)

Join our official Discord server to chat with us directly and become a part of the Clerk community.

Join Discord

Join Discord

## [Need help?](https://clerk.com/support)

Contact us through Discord, Twitter, or email to receive answers to your questions and learn more about Clerk.

Get help

Get help

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/overview.mdx)

Last updated onMar 7, 2025

Support

## Clerk Entitlement Errors
[Skip to main content](https://clerk.com/docs/errors/entitlements#main)

1. [`FormInvalidEntitlementKey`](https://clerk.com/docs/errors/entitlements#form-invalid-entitlement-key)
2. [`EntitlementAlreadyAssociatedWithProduct`](https://clerk.com/docs/errors/entitlements#entitlement-already-associated-with-product)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/entitlements.mdx)

# Entitlement errors

An index of Clerk errors related to entitlements.

## [`FormInvalidEntitlementKey`](https://clerk.com/docs/errors/entitlements\#form-invalid-entitlement-key)

Signifies an error when no domain with the given ID was found.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "invalid key format",
  "longMessage": "<value> cannot be used as an entitlement key. An entitlement key should have the following format: <scope>:<feature> Both `scope` and `feature` should only contain alphanumeric characters without any spaces.",
  "code": "form_invalid_entitlement_key_code"
}
```

## [`EntitlementAlreadyAssociatedWithProduct`](https://clerk.com/docs/errors/entitlements\#entitlement-already-associated-with-product)

Signifies an error when the given entitlement is already associated with the product.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "already associated",
  "longMessage": "The given entitlement is already associated with the product.",
  "code": "entitlement_already_associated_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/entitlements.mdx)

Last updated onAug 16, 2024

Support

## Clerk Application Errors
[Skip to main content](https://clerk.com/docs/errors/application#main)

1. [`ApplicationNotFound`](https://clerk.com/docs/errors/application#application-not-found)
2. [`NotAuthorizedToDeleteSystemApplication`](https://clerk.com/docs/errors/application#not-authorized-to-delete-system-application)
3. [`NotAuthorizedToMoveApplicationToOrganization`](https://clerk.com/docs/errors/application#not-authorized-to-move-application-to-organization)
4. [`ApplicationAlreadyBelongsToOrganization`](https://clerk.com/docs/errors/application#application-already-belongs-to-organization)
5. [`ApplicationAlreadyBelongsToUser`](https://clerk.com/docs/errors/application#application-already-belongs-to-user)
6. [`InvalidPlanForResource`](https://clerk.com/docs/errors/application#invalid-plan-for-resource)
7. [`CannotTransferPaidAppToAccountWithoutBillingInformation`](https://clerk.com/docs/errors/application#cannot-transfer-paid-app-to-account-without-billing-information)
8. [`CannotTransferToAccountWithoutPaymentMethod`](https://clerk.com/docs/errors/application#cannot-transfer-to-account-without-payment-method)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/application.mdx)

# Application errors

An index of Clerk errors related to an application, such as when an application is not found, or when a user tries to perform an action that they are not authorized to do.

## [`ApplicationNotFound`](https://clerk.com/docs/errors/application\#application-not-found)

Signifies an error when no application with the given `appID` was found.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Application not found",
  "longMessage": "No application was found with id <appID>",
  "code": "resource_not_found_code"
}
```

## [`NotAuthorizedToDeleteSystemApplication`](https://clerk.com/docs/errors/application\#not-authorized-to-delete-system-application)

Signifies an error when a user tries to delete a system application that they are not authorized to delete.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Unauthorized request",
  "longMessage": "You are not authorized to delete system application <applicationID>",
  "code": "authorization_invalid_code"
}
```

## [`NotAuthorizedToMoveApplicationToOrganization`](https://clerk.com/docs/errors/application\#not-authorized-to-move-application-to-organization)

Signifies an error when trying to move an application to an organization that the requesting user does not belong to.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "unauthorized request",
  "longMessage": "You need to be a member of organization <OrgID>, in order to move application <AppID>.",
  "code": "authorization_invalid_code"
}
```

## [`ApplicationAlreadyBelongsToOrganization`](https://clerk.com/docs/errors/application\#application-already-belongs-to-organization)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "already belongs to organization",
  "longMessage": "Application already belongs to the selected organization.",
  "code": "application_already_belongs_to_organization_code"
}
```

## [`ApplicationAlreadyBelongsToUser`](https://clerk.com/docs/errors/application\#application-already-belongs-to-user)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "already belongs to user",
  "longMessage": "Application already belongs to the given user.",
  "code": "application_already_belongs_to_user_code"
}
```

## [`InvalidPlanForResource`](https://clerk.com/docs/errors/application\#invalid-plan-for-resource)

Returned when an invalid plan is selected for a resource.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid plan",
  "longMessage": "Plan <planID> can't be selected for <resourceType> <resourceID>",
  "code": "invalid_plan"
}
```

## [`CannotTransferPaidAppToAccountWithoutBillingInformation`](https://clerk.com/docs/errors/application\#cannot-transfer-paid-app-to-account-without-billing-information)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "cannot transfer paid application, missing billing info",
  "longMessage": "Paid applications can only be transferred to personal workspaces or organizations with billing info. Add the necessary billing info and try again.",
  "code": "transfer_paid_app_to_free_account_code"
}
```

- [Learn how to fix this error](https://clerk.com/docs/organizations/organization-workspaces#transfer-ownership-of-an-application).

## [`CannotTransferToAccountWithoutPaymentMethod`](https://clerk.com/docs/errors/application\#cannot-transfer-to-account-without-payment-method)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "cannot transfer paid application, missing payment method",
  "longMessage": "The selected account doesn't have any payment methods associated with it.",
  "code": "transfer_paid_app_to_account_with_no_payment_method_code"
}
```

- [Learn how to fix this error](https://clerk.com/docs/organizations/organization-workspaces#transfer-ownership-of-an-application).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/application.mdx)

Last updated onFeb 25, 2025

Support

## Clerk and Loops Integration
[Skip to main content](https://clerk.com/docs/webhooks/loops#main)

1. [Create a Clerk webhook endpoint in Loops](https://clerk.com/docs/webhooks/loops#create-a-clerk-webhook-endpoint-in-loops)
2. [Create a webhook in the Clerk Dashboard](https://clerk.com/docs/webhooks/loops#create-a-webhook-in-the-clerk-dashboard)
3. [Add your signing secret in Loops](https://clerk.com/docs/webhooks/loops#add-your-signing-secret-in-loops)
4. [Configure Loops events](https://clerk.com/docs/webhooks/loops#configure-loops-events)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/webhooks/loops.mdx)

# Integrate Loops with Clerk

## You will learn the following:

- Sync Clerk users to your Loops audience and send automated emails.

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Set up a Loops account](https://app.loops.so/)

[Loops⁠](https://loops.so/) is an email platform that helps you send marketing and transactional emails to help increase revenue and engagement or improve your user's experience of your app.

This tutorial demonstrates how to sync your Clerk users to Loops so you can email users with Loop's email marketing tools. You will also learn how to send email sequences to new Clerk users.

## [Create a Clerk webhook endpoint in Loops](https://clerk.com/docs/webhooks/loops\#create-a-clerk-webhook-endpoint-in-loops)

Loops' [Incoming webhooks⁠](https://loops.so/docs/integrations/incoming-webhooks) feature lets Loops accept webhooks directly from external platforms like Clerk.

To create a new webhook endpoint in Loops:

1. Navigate to the **Clerk** settings page in the [Loops dashboard⁠](https://app.loops.so/settings?page=clerk).
2. Save the **Endpoint URL** somewhere secure; you're going to need it for Clerk's webhook configuration.

## [Create a webhook in the Clerk Dashboard](https://clerk.com/docs/webhooks/loops\#create-a-webhook-in-the-clerk-dashboard)

You must create a new Clerk webhook endpoint so that it can send data to Loops. Here is where you will provide the **Endpoint URL** from the last step, and then choose the events you want to listen to.

1. In the Clerk Dashboard, navigate to the [**Webhooks**⁠](https://dashboard.clerk.com/last-active?path=webhooks) page.
2. Select the **Add Endpoint** button.
3. In the **Endpoint URL** field, paste the **Endpoint URL** that you saved from Loops.
4. In the **Message Filtering** section, select the `user.created` and/or `user.updated` events, depending on your desired setup.
5. Select the **Create** button.
6. You will be redirected to your endpoint's settings page. Leave this page open.

## [Add your signing secret in Loops](https://clerk.com/docs/webhooks/loops\#add-your-signing-secret-in-loops)

To keep communication secure between the two platforms:

1. On the Clerk endpoint's settings page, copy the **Signing Secret**. It should be on the right side of the page with an eye icon next to it.
2. Back in the Loops dashboard, add the **Signing Secret**.

## [Configure Loops events](https://clerk.com/docs/webhooks/loops\#configure-loops-events)

The final step is to configure which events Loops should accept from Clerk and what Loops should do with the data.

In the Loops dashboard, under **Complete Setup**, enable the events you selected in Clerk in step 2. Doing this will sync your Clerk users to Loops when they are created or updated in Clerk.

For each event, you can optionally choose to trigger a " [loop⁠](https://loops.so/docs/loop-builder)" when new webhooks are sent to Loops, by selecting an event in the **Trigger an event** field. This is useful, for example, if you want to send an email welcome sequence to new Clerk users.

You can also choose to assign a user group value for each Clerk user, which will help you organize and segment contacts in Loops.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/webhooks/loops.mdx)

Last updated onDec 12, 2024

Support

## Clerk Authentication Overview
[Skip to main content](https://clerk.com/docs/authentication/overview#main)

1. [Configuration](https://clerk.com/docs/authentication/overview#configuration)
2. [SSO authentication](https://clerk.com/docs/authentication/overview#sso-authentication)
3. [Web3 authentication](https://clerk.com/docs/authentication/overview#web3-authentication)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/authentication/overview.mdx)

# Sign-up & sign-in overview

Clerk supports multiple authentication strategies so that you can implement the strategy that makes sense for _your_ users. You can use the [Account Portal](https://clerk.com/docs/account-portal/overview), [prebuilt components](https://clerk.com/docs/components/overview), or build your own [custom flows](https://clerk.com/docs/custom-flows/overview).

## [Configuration](https://clerk.com/docs/authentication/overview\#configuration)

Configuring your application is done through the [Clerk Dashboard⁠](https://dashboard.clerk.com/). The Clerk Dashboard is where you, as the application owner, can manage your application's settings, users, and organizations. For example, if you want to enable phone number authentication, multi-factor authentication, social providers like Google, delete users, or create organizations, you can do all of this and more in the Clerk Dashboard. You can even invite other users to join your [organization workspace](https://clerk.com/docs/organizations/organization-workspaces) and help configure and manage your application with you.

## [SSO authentication](https://clerk.com/docs/authentication/overview\#sso-authentication)

SSO authentication allows users to sign in to your application using an existing account from an external identity provider (IdP), such as Google.

Clerk supports the following SSO types:

- [OAuth SSO, also known as social connections or social providers](https://clerk.com/docs/authentication/social-connections/oauth)
- [Enterprise SSO](https://clerk.com/docs/authentication/enterprise-connections/overview)


- SAML
- OIDC
  - EASIE

## [Web3 authentication](https://clerk.com/docs/authentication/overview\#web3-authentication)

Clerk supports the following Web3 providers:

- [Coinbase Wallet](https://clerk.com/docs/authentication/web3/coinbase-wallet)
- [Metamask](https://clerk.com/docs/authentication/web3/metamask)
- [OKX Wallet](https://clerk.com/docs/authentication/web3/okx-wallet)

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/authentication/overview.mdx)

Last updated onMar 8, 2025

Support

## Clerk Component Customization
[Skip to main content](https://clerk.com/docs/customization/overview#main)

1. [Properties](https://clerk.com/docs/customization/overview#properties)
2. [Using a prebuilt theme](https://clerk.com/docs/customization/overview#using-a-prebuilt-theme)
3. [Customize the layout](https://clerk.com/docs/customization/overview#customize-the-layout)
4. [Customize the base theme](https://clerk.com/docs/customization/overview#customize-the-base-theme)
5. [Customize elements of a Clerk component](https://clerk.com/docs/customization/overview#customize-elements-of-a-clerk-component)
1. [Use global CSS to style Clerk components](https://clerk.com/docs/customization/overview#use-global-css-to-style-clerk-components)
2. [Use custom CSS classes to style Clerk components](https://clerk.com/docs/customization/overview#use-custom-css-classes-to-style-clerk-components)
3. [Use inline CSS objects to style Clerk components](https://clerk.com/docs/customization/overview#use-inline-css-objects-to-style-clerk-components)
6. [Next steps](https://clerk.com/docs/customization/overview#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/overview.mdx)

# `Appearance` prop

Customizing the appearance of Clerk components is a powerful way to make your application look and feel unique. Clerk provides a way to customize the appearance of its components using the `appearance` prop.

The `appearance` prop can be applied to [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider) to share styles across every component, or individually to any of the Clerk components.

This applies to all of the React-based packages, like [Next.js](https://clerk.com/docs/quickstarts/nextjs), as well as [the pure JavaScript ClerkJS package](https://clerk.com/docs/references/javascript/overview).

## [Properties](https://clerk.com/docs/customization/overview\#properties)

The `appearance` prop accepts the following properties:

- Name`baseTheme?`Type`BaseTheme | BaseTheme[]`Description





A theme used as the base theme for the components. For more information, see [Themes](https://clerk.com/docs/customization/themes).

- Name`layout?`Type`Layout`Description





Configuration options that affect the layout of the components, allowing customizations that are hard to implement with just CSS. For more information, see [Layout](https://clerk.com/docs/customization/layout).

- Name`variables?`Type`Variables`Description





General theme overrides. This styles will be merged with our base theme. Can override global styles like colors, fonts, etc. For more information, see [Variables](https://clerk.com/docs/customization/variables).

- Name`elements?`Type`Elements`Description





Fine-grained theme overrides. Useful when you want to style specific elements or elements that are under a specific state. For more information, see the [Customize elements of a Clerk component](https://clerk.com/docs/customization/overview#customize-elements-of-a-clerk-component) section.

- Name`captcha?`Type`Captcha`Description





Configuration options that affect the appearance of the CAPTCHA widget. For more information, see the [dedicated guide](https://clerk.com/docs/customization/captcha).


## [Using a prebuilt theme](https://clerk.com/docs/customization/overview\#using-a-prebuilt-theme)

Clerk offers a set of prebuilt themes that can be used to quickly style Clerk components. See the [Themes](https://clerk.com/docs/customization/themes) docs for more information.

## [Customize the layout](https://clerk.com/docs/customization/overview\#customize-the-layout)

The `layout` property is used to adjust the layout of the [`<SignIn/>`](https://clerk.com/docs/components/authentication/sign-in) and [`<SignUp/>`](https://clerk.com/docs/components/authentication/sign-up) components, as well as set important links to your support, terms, and privacy pages. See the [Layout](https://clerk.com/docs/customization/layout) docs for more information.

## [Customize the base theme](https://clerk.com/docs/customization/overview\#customize-the-base-theme)

The `variables` property is used to adjust the general styles of a component's base theme, like colors, backgrounds, and typography. See the [Variables](https://clerk.com/docs/customization/variables) docs for more information.

## [Customize elements of a Clerk component](https://clerk.com/docs/customization/overview\#customize-elements-of-a-clerk-component)

If you want full control over the appearance of a Clerk component, you can target the underlying elements by using their CSS classes and then apply your own styles.

First, you need to identify the underlying element of the Clerk component you want to style. You can do this by **inspecting** the HTML of the component.

For example, if you want to style the primary button in a Clerk component, you can right-click on the primary button and select "Inspect" from the menu. This will open the browser's developer tools and highlight the element in the HTML, as shown in the following image:

![The inspect element tab opened with an element selected. It shows a list of classes and a lock icon in between human-readible classnames and randomly generated ones](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fcustomization%2Fidentifying_elements.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

When you select an element that is part of a Clerk component, you'll notice a list of classes like so:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
cl-formButtonPrimary cl-button 🔒️ cl-internal-1ta0xpz
```

Any of the classes listed before the lock icon (🔒️) are safe to rely on, such as `cl-formButtonPrimary` or `cl-button` from the previous example. You'll use these classes to target the necessary elements of the Clerk component.

Note

Anything after the lock icon (🔒️) are internal classes used for Clerk's internal styling and should not be modified.

Once you have identified the classes of the element you want to target, there are many ways to apply your custom styles depending on your preference:

1. [Use global CSS styling](https://clerk.com/docs/customization/overview#use-global-css-to-style-clerk-components)
2. [Pass custom CSS classes](https://clerk.com/docs/customization/overview#use-custom-css-classes-to-style-clerk-components)


- [Using Tailwind](https://clerk.com/docs/customization/overview#use-tailwind-classes-to-style-clerk-components)
- [Using CSS modules](https://clerk.com/docs/customization/overview#use-css-modules-to-style-clerk-components)

3. [Pass inline CSS to your Clerk options](https://clerk.com/docs/customization/overview#use-inline-css-objects-to-style-clerk-components)

### [Use global CSS to style Clerk components](https://clerk.com/docs/customization/overview\#use-global-css-to-style-clerk-components)

You can style the elements of a Clerk component with global CSS.

For this example, say you want to style the primary button in a Clerk component. You inspect the primary button to find the classes that you can use to target the element:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
cl-formButtonPrimary cl-button 🔒️ cl-internal-1ta0xpz
```

You can then create a global CSS file, use the classes you identified to target the primary button, and apply your custom styles. In this case, `cl-formButtonPrimary` is the class you want to use because it's specific to the primary button:

styles/global.css

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
.cl-formButtonPrimary {
  font-size: 14px;
  text-transform: none;
  background-color: #611bbd;
}

.cl-formButtonPrimary:hover,
.cl-formButtonPrimary:focus,
.cl-formButtonPrimary:active {
  background-color: #49247a;
}
```

### [Use custom CSS classes to style Clerk components](https://clerk.com/docs/customization/overview\#use-custom-css-classes-to-style-clerk-components)

You can pass additional classes to Clerk component elements by using the `elements` property on the `appearance` prop.

For example, an element in a Clerk component will have classes that look something like this:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
cl-formButtonPrimary cl-button 🔒️ cl-internal-1ta0xpz
```

Remove the `cl-` prefix from a class and use it as the key for a new object in the `elements` property. The value of this object should be the string of classes you want to apply to the element.

The following example shows how to style the primary button in a `<SignIn />` component with custom CSS classes:

Next.js

App Router

Pages Router

app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider, SignIn } from '@clerk/nextjs'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          <SignIn
            appearance={{
              elements: {
                formButtonPrimary: 'your-org-button org-red-button',
              },
            }}
          />
        </body>
      </html>
    </ClerkProvider>
  )
}
```

app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider, SignIn } from '@clerk/nextjs'
import type { AppProps } from 'next/app'

function MyApp({ pageProps }: AppProps) {
  return (
    <ClerkProvider {...pageProps}>
      <SignIn
        appearance={{
          elements: {
            formButtonPrimary: 'your-org-button org-red-button',
          },
        }}
      />
    </ClerkProvider>
  )
}

export default MyApp
```

#### [Use Tailwind classes to style Clerk components](https://clerk.com/docs/customization/overview\#use-tailwind-classes-to-style-clerk-components)

You can style the elements of a Clerk component with Tailwind.

The following example shows how to style the primary button in a `<SignIn />` component with Tailwind classes:

Next.js

App Router

Pages Router

app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider, SignIn } from '@clerk/nextjs'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          <SignIn
            appearance={{
              elements: {
                formButtonPrimary: 'bg-slate-500 hover:bg-slate-400 text-sm',
              },
            }}
          />
        </body>
      </html>
    </ClerkProvider>
  )
}
```

app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider, SignIn } from '@clerk/nextjs'
import type { AppProps } from 'next/app'

function MyApp({ pageProps }: AppProps) {
  return (
    <ClerkProvider {...pageProps}>
      <SignIn
        appearance={{
          elements: {
            formButtonPrimary: 'bg-slate-500 hover:bg-slate-400 text-sm',
          },
        }}
      />
    </ClerkProvider>
  )
}

export default MyApp
```

#### [Use CSS modules to style Clerk components](https://clerk.com/docs/customization/overview\#use-css-modules-to-style-clerk-components)

CSS modules are a great way to scope your CSS to a specific component.

Create your module file and add the CSS you want to apply, as shown in the following example for the `<SignIn />` component:

styles/SignIn.module.css

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
.primaryColor {
  background-color: bisque;
  color: black;
}
```

Then you can apply this by importing the file and using the classes whenever required:

Next.js

App Router

Pages Router

app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import styles from '../styles/SignIn.module.css'
import { ClerkProvider, SignIn } from '@clerk/nextjs'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          <SignIn
            appearance={{
              elements: {
                formButtonPrimary: styles.primaryColor,
              },
            }}
          />
        </body>
      </html>
    </ClerkProvider>
  )
}
```

app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import styles from '../styles/SignIn.module.css'
import { ClerkProvider, SignIn } from '@clerk/nextjs'
import type { AppProps } from 'next/app'

function MyApp({ pageProps }: AppProps) {
  return (
    <ClerkProvider {...pageProps}>
      <SignIn
        appearance={{
          elements: {
            formButtonPrimary: styles.primaryColor,
          },
        }}
      />
    </ClerkProvider>
  )
}

export default MyApp
```

### [Use inline CSS objects to style Clerk components](https://clerk.com/docs/customization/overview\#use-inline-css-objects-to-style-clerk-components)

You can style the elements of a Clerk component with inline CSS objects.

The following example shows how to style the primary button in a `<SignIn />` component with an inline CSS object:

Next.js

App Router

Pages Router

app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import styles from '../styles/SignIn.module.css'
import { ClerkProvider, SignIn } from '@clerk/nextjs'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>
          <SignIn
            appearance={{
              elements: {
                formButtonPrimary: {
                  fontSize: 14,
                  textTransform: 'none',
                  backgroundColor: '#611BBD',
                  '&:hover, &:focus, &:active': {
                    backgroundColor: '#49247A',
                  },
                },
              },
            }}
          />
        </body>
      </html>
    </ClerkProvider>
  )
}
```

app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider, SignIn } from '@clerk/nextjs'
import type { AppProps } from 'next/app'

function MyApp({ pageProps }: AppProps) {
  return (
    <ClerkProvider {...pageProps}>
      <SignIn
        appearance={{
          elements: {
            formButtonPrimary: {
              fontSize: 14,
              textTransform: 'none',
              backgroundColor: '#611BBD',
              '&:hover, &:focus, &:active': {
                backgroundColor: '#49247A',
              },
            },
          },
        }}
      />
    </ClerkProvider>
  )
}

export default MyApp
```

## [Next steps](https://clerk.com/docs/customization/overview\#next-steps)

Here are a few resources you can utilize to customize your Clerk components further:

### [Localization](https://clerk.com/docs/customization/localization)

Learn how to localize your Clerk components.

### [prebuiltthemes](https://clerk.com/docs/customization/themes)

Explore the prebuilt themes that you can use to quickly style your Clerk components.

### [Customizelayouts](https://clerk.com/docs/customization/layout)

Learn how to change the layout and links of your Clerk components.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/overview.mdx)

Last updated onMar 5, 2025

Support

## Clerk Billing Errors
[Skip to main content](https://clerk.com/docs/errors/billing#main)

1. [`CheckoutLocked`](https://clerk.com/docs/errors/billing#checkout-locked)
2. [`CheckoutSessionMismatch`](https://clerk.com/docs/errors/billing#checkout-session-mismatch)
3. [`UnsupportedSubscriptionPlanFeatures`](https://clerk.com/docs/errors/billing#unsupported-subscription-plan-features)
4. [`InvalidSubscriptionPlanSwitch`](https://clerk.com/docs/errors/billing#invalid-subscription-plan-switch)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/billing.mdx)

# Billing errors

An index of Clerk errors related to billing.

## [`CheckoutLocked`](https://clerk.com/docs/errors/billing\#checkout-locked)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Checkout is still processing",
  "longMessage": "Checkout is still processing for application ID <appID>",
  "code": "checkout_locked_code"
}
```

## [`CheckoutSessionMismatch`](https://clerk.com/docs/errors/billing\#checkout-session-mismatch)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Checkout session ID mismatch",
  "longMessage": "Application ID <APPID> has no matching checkout session ID <SESSID>",
  "code": "checkout_session_mismatch_code"
}
```

## [`UnsupportedSubscriptionPlanFeatures`](https://clerk.com/docs/errors/billing\#unsupported-subscription-plan-features)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Unsupported plan features",
  "longMessage": "Some features are not supported in your current plan. Upgrade your subscription to unlock them.",
  "code": "unsupported_subscription_plan_features_code"
}
```

## [`InvalidSubscriptionPlanSwitch`](https://clerk.com/docs/errors/billing\#invalid-subscription-plan-switch)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Unsupported plan features",
  "longMessage": "Some application features are not supported in your new plan. Stay with your current plan to avoid breaking changes.",
  "code": "invalid_subscription_plan_switch_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/billing.mdx)

Last updated onAug 16, 2024

Support

## Clerk Component Customization
[Skip to main content](https://clerk.com/docs/customization/variables#main)

1. [Properties](https://clerk.com/docs/customization/variables#properties)
2. [Usage](https://clerk.com/docs/customization/variables#usage)
1. [Apply `variables` to all Clerk components](https://clerk.com/docs/customization/variables#apply-variables-to-all-clerk-components)
2. [Apply `variables` to all instances of a Clerk component](https://clerk.com/docs/customization/variables#apply-variables-to-all-instances-of-a-clerk-component)
3. [Apply `variables` to a single Clerk component](https://clerk.com/docs/customization/variables#apply-variables-to-a-single-clerk-component)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/variables.mdx)

# `Variables` prop

The `variables` property is used to adjust the general styles of the component's base theme, like colors, backgrounds, and typography.

## [Properties](https://clerk.com/docs/customization/variables\#properties)

- Name`colorPrimary`Type`string`Description





The primary color used throughout the components.

- Name`colorDanger`Type`string`Description





The color used for error states.

- Name`colorSuccess`Type`string`Description





The color used for success states.

- Name`colorWarning`Type`string`Description





The color used for warning states.

- Name`colorNeutral`Type`string`Description





The color that will be used for all to generate the neutral shades the components use. This option applies to borders, backgrounds for hovered elements, hovered dropdown options.

- Name`colorText`Type`string`Description





The color used for text.

- Name`colorTextOnPrimaryBackground`Type`string`Description





The color used for text on the primary background.

- Name`colorTextSecondary`Type`string`Description





The color used for secondary text.

- Name`colorBackground`Type`string`Description





The background color for the card container.

- Name`colorInputText`Type`string`Description





The color used for text in input fields.

- Name`colorInputBackground`Type`string`Description





The background color used for input fields.

- Name`colorShimmer`Type`string`Description





The color of the avatar shimmer.

- Name`fontFamily`Type`string`Description





The font family used throughout the components. By default, it is set to `inherit`.

- Name`fontFamilyButtons`Type`string`Description





The font family used for buttons. By default, it is set to `inherit`.

- Name`fontSize`Type`string`Description





The font size used throughout the components. By default, this is set to `0.8125rem`.

- Name`fontWeight`Type`{normal: number, medium: number, semibold: number, bold: number}`Description





The font weight used throughout the components. By default, this is set to `{normal: 400, medium: 500, semibold: 600, bold: 700}`.

- Name`borderRadius`Type`string`Description





The border radius used throughout the components. By default, this is set to `0.375rem`.

- Name`spacingUnit`Type`string`Description





The spacing unit used throughout the components. By default, this is set to `1rem`.


## [Usage](https://clerk.com/docs/customization/variables\#usage)

You can customize Clerk components by passing an object of variables to the `variables` property of the [`appearance`](https://clerk.com/docs/customization/overview) prop.

### [Apply `variables` to all Clerk components](https://clerk.com/docs/customization/variables\#apply-variables-to-all-clerk-components)

To customize all Clerk components, pass the `variables` property to the `appearance` prop of the [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider) component.

In the following example, the primary color is set to blue and the text color is set to white. Because these styles are applied to the `<ClerkProvider>`, which wraps the entire application, these styles will be applied to all Clerk components that use the primary color and text color.

Next.js

React

Remix

Astro

Vue

Nuxt

App Router

Pages Router

/src/app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider
      appearance={{
        variables: {
          colorPrimary: 'blue',
          colorText: 'black',
        },
      }}
    >
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

\_app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import type { AppProps } from 'next/app'

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ClerkProvider
      appearance={{
        variables: {
          colorPrimary: 'blue',
          colorText: 'black',
        },
      }}
    >
      <Component {...pageProps} />
    </ClerkProvider>
  )
}

export default MyApp
```

app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import React from 'react'
import './App.css'
import { ClerkProvider } from '@clerk/clerk-react'

if (!process.env.REACT_APP_CLERK_PUBLISHABLE_KEY) {
  throw new Error('Missing Publishable Key')
}
const clerkPubKey = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY

function App() {
  return (
    <ClerkProvider
      appearance={{
        variables: {
          colorPrimary: 'blue',
          colorText: 'black',
        },
      }}
      publishableKey={clerkPubKey}
    >
      <div>Hello from clerk</div>
    </ClerkProvider>
  )
}

export default App
```

app/root.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
// Import ClerkApp
import { ClerkApp } from '@clerk/remix'
import type { MetaFunction, LoaderFunction } from '@remix-run/node'

import { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration } from '@remix-run/react'

import { rootAuthLoader } from '@clerk/remix/ssr.server'

export const meta: MetaFunction = () => ({
  charset: 'utf-8',
  title: 'New Remix App',
  viewport: 'width=device-width,initial-scale=1',
})

export const loader: LoaderFunction = (args) => rootAuthLoader(args)

function App() {
  return (
    <html lang="en">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  )
}

export default ClerkApp(App, {
  appearance: {
    variables: {
      colorPrimary: 'blue',
      colorText: 'black',
    },
  },
})
```

astro.config.mjs

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import clerk from '@clerk/astro'

export default defineConfig({
  integrations: [\
    clerk({\
      appearance: {\
        variables: {\
          colorPrimary: 'blue',\
          colorText: 'black',\
        },\
      },\
    }),\
  ],
})
```

src/main.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { createApp } from 'vue'
import App from './App.vue'
import { clerkPlugin } from '@clerk/vue'

const app = createApp(App)
app.use(clerkPlugin, {
  appearance: {
    variables: {
      colorPrimary: 'blue',
      colorText: 'black',
    },
  },
})
app.mount('#app')
```

nuxt.config.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export default defineNuxtConfig({
  modules: ['@clerk/nuxt'],
  clerk: {
    appearance: {
      variables: {
        colorPrimary: 'blue',
        colorText: 'black',
      },
    },
  },
})
```

### [Apply `variables` to all instances of a Clerk component](https://clerk.com/docs/customization/variables\#apply-variables-to-all-instances-of-a-clerk-component)

You can customize all instances of a Clerk component by passing the component to the `appearance` prop of the `<ClerkProvider>`. The `appearance` prop accepts the name of the Clerk component you want to style as a key.

In the following example, the primary color is set to blue and the text color is set to white for all instances of the [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in) component.

Next.js

React

Remix

Astro

Vue

Nuxt

App Router

Pages Router

/src/app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider
      appearance={{
        signIn: {
          variables: {
            colorPrimary: 'blue',
            colorText: 'black',
          },
        },
      }}
    >
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

\_app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import type { AppProps } from 'next/app'

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ClerkProvider
      appearance={{
        signIn: {
          variables: {
            colorPrimary: 'blue',
            colorText: 'black',
          },
        },
      }}
    >
      <Component {...pageProps} />
    </ClerkProvider>
  )
}

export default MyApp
```

app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import React from 'react'
import './App.css'
import { ClerkProvider } from '@clerk/clerk-react'

if (!process.env.REACT_APP_CLERK_PUBLISHABLE_KEY) {
  throw new Error('Missing Publishable Key')
}
const clerkPubKey = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY

function App() {
  return (
    <ClerkProvider
      appearance={{
        signIn: {
          variables: {
            colorPrimary: 'blue',
            colorText: 'black',
          },
        },
      }}
      publishableKey={clerkPubKey}
    >
      <div>Hello from clerk</div>
    </ClerkProvider>
  )
}

export default App
```

app/root.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
// Import ClerkApp
import { ClerkApp } from '@clerk/remix'
import type { MetaFunction, LoaderFunction } from '@remix-run/node'

import { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration } from '@remix-run/react'

import { rootAuthLoader } from '@clerk/remix/ssr.server'

export const meta: MetaFunction = () => ({
  charset: 'utf-8',
  title: 'New Remix App',
  viewport: 'width=device-width,initial-scale=1',
})

export const loader: LoaderFunction = (args) => rootAuthLoader(args)

function App() {
  return (
    <html lang="en">
      <head>
        <Meta />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  )
}

export default ClerkApp(App, {
  appearance: {
    signIn: {
      variables: {
        colorPrimary: 'blue',
        colorText: 'black',
      },
    },
  },
})
```

astro.config.mjs

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import clerk from '@clerk/astro'

export default defineConfig({
  integrations: [\
    clerk({\
      appearance: {\
        signIn: {\
          variables: {\
            colorPrimary: 'blue',\
            colorText: 'black',\
          },\
        },\
      },\
    }),\
  ],
})
```

src/main.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { createApp } from 'vue'
import App from './App.vue'
import { clerkPlugin } from '@clerk/vue'

const app = createApp(App)
app.use(clerkPlugin, {
  appearance: {
    signIn: {
      variables: {
        colorPrimary: 'blue',
        colorText: 'black',
      },
    },
  },
})
app.mount('#app')
```

nuxt.config.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export default defineNuxtConfig({
  modules: ['@clerk/nuxt'],
  clerk: {
    appearance: {
      signIn: {
        variables: {
          colorPrimary: 'blue',
          colorText: 'black',
        },
      },
    },
  },
})
```

### [Apply `variables` to a single Clerk component](https://clerk.com/docs/customization/variables\#apply-variables-to-a-single-clerk-component)

To customize a single Clerk component, pass the `variables` property to the `appearance` prop of the Clerk component.

The following example shows how to customize the [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in) component by setting the primary color to blue and the text color to white.

Next.js

React

Remix

Astro

Vue

Nuxt

App Router

Pages Router

app/sign-in/\[\[...sign-in\]\]/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { SignIn } from '@clerk/nextjs'

export default function Page() {
  return (
    <SignIn
      appearance={{
        variables: {
          colorPrimary: 'blue',
          colorText: 'black',
        },
      }}
    />
  )
}
```

/pages/sign-in/\[\[...index\]\].tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { SignIn } from '@clerk/nextjs'

const SignInPage = () => (
  <SignIn
    appearance={{
      variables: {
        colorPrimary: 'blue',
        colorText: 'black',
      },
    }}
  />
)

export default SignInPage
```

/src/sign-in/\[\[...index\]\].tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { SignIn } from '@clerk/clerk-react'

const SignInPage = () => (
  <SignIn
    appearance={{
      variables: {
        colorPrimary: 'blue',
        colorText: 'black',
      },
    }}
  />
)

export default SignInPage
```

app/routes/sign-in/$.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { SignIn } from '@clerk/remix'

export default function SignInPage() {
  return (
    <div style={{ border: '2px solid blue', padding: '2rem' }}>
      <h1>Sign In route</h1>
      <SignIn
        appearance={{
          variables: {
            colorPrimary: 'blue',
            colorText: 'black',
          },
        }}
      />
    </div>
  )
}
```

pages/sign-in.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { SignIn } from '@clerk/astro/components'
---

<SignIn
  appearance={{
    colorPrimary: 'blue',
    colorText: 'black',
  }}
/>
```

src/pages/sign-in.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { SignIn } from '@clerk/vue'
</script>

<template>
  <SignIn :appearance="{ colorPrimary: 'blue', colorText: 'black' }" />
</template>
```

pages/sign-in.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
// Components are automatically imported
</script>

<template>
  <SignIn :appearance="{ colorPrimary: 'blue', colorText: 'black' }" />
</template>
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/variables.mdx)

Last updated onJan 30, 2025

Support

## Clerk Authentication Errors
[Skip to main content](https://clerk.com/docs/errors/authentication#main)

01. [`InvalidClerkSecretKey`](https://clerk.com/docs/errors/authentication#invalid-clerk-secret-key)
02. [`InvalidAuthentication`](https://clerk.com/docs/errors/authentication#invalid-authentication)
03. [`InvalidAuthorizationHeaderFormat`](https://clerk.com/docs/errors/authentication#invalid-authorization-header-format)
04. [`InvalidAuthorization`](https://clerk.com/docs/errors/authentication#invalid-authorization)
05. [`InvalidCSRFToken`](https://clerk.com/docs/errors/authentication#invalid-csrf-token)
06. [`MissingRequestHeaders`](https://clerk.com/docs/errors/authentication#missing-request-headers)
    1. [For standard browsers](https://clerk.com/docs/errors/authentication#for-standard-browsers)
    2. [For non-standard browsers](https://clerk.com/docs/errors/authentication#for-non-standard-browsers)
07. [`InvalidOriginHeader`](https://clerk.com/docs/errors/authentication#invalid-origin-header)
08. [`DevBrowserUnauthenticated`](https://clerk.com/docs/errors/authentication#dev-browser-unauthenticated)
09. [`URLBasedSessionSyncingDisabled`](https://clerk.com/docs/errors/authentication#url-based-session-syncing-disabled)
10. [`InvalidRequestForEnvironment`](https://clerk.com/docs/errors/authentication#invalid-request-for-environment)
11. [`RequestInvalidForInstance`](https://clerk.com/docs/errors/authentication#request-invalid-for-instance)
12. [`InvalidHost`](https://clerk.com/docs/errors/authentication#invalid-host)
13. [`IdentificationExists`](https://clerk.com/docs/errors/authentication#identification-exists)
    1. [External account exists](https://clerk.com/docs/errors/authentication#external-account-exists)
    2. [Email address exists](https://clerk.com/docs/errors/authentication#email-address-exists)
    3. [Phone number exists](https://clerk.com/docs/errors/authentication#phone-number-exists)
    4. [Username exists](https://clerk.com/docs/errors/authentication#username-exists)
    5. [SAML account exists](https://clerk.com/docs/errors/authentication#saml-account-exists)
14. [`IdentifierNotAllowedAccess`](https://clerk.com/docs/errors/authentication#identifier-not-allowed-access)
15. [`SignedOut`](https://clerk.com/docs/errors/authentication#signed-out)
16. [`InvalidUserSettings`](https://clerk.com/docs/errors/authentication#invalid-user-settings)
17. [`InvalidHandshake`](https://clerk.com/docs/errors/authentication#invalid-handshake)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/authentication.mdx)

# Authentication errors

An index of Clerk errors related to authentication, such as when a Clerk Secret Key is invalid, or when a request is not authenticated.

## [`InvalidClerkSecretKey`](https://clerk.com/docs/errors/authentication\#invalid-clerk-secret-key)

Signifies an error when the supplied client key is invalid.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "The provided Clerk Secret Key is invalid. Make sure that your Clerk Secret Key is correct.",
  "code": "clerk_key_invalid_code"
}
```

## [`InvalidAuthentication`](https://clerk.com/docs/errors/authentication\#invalid-authentication)

Signifies an error when the request is not authenticated.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid authentication",
  "longMessage": "Unable to authenticate the request, you need to supply an active session",
  "code": "authentication_invalid_code"
}
```

## [`InvalidAuthorizationHeaderFormat`](https://clerk.com/docs/errors/authentication\#invalid-authorization-header-format)

Signifies an error when the Authorization header has no proper format.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid Authorization header format",
  "longMessage": "Invalid Authorization header format. Must be 'Bearer <YOUR_API_KEY>'",
  "code": "authorization_header_format_invalid_code"
}
```

## [`InvalidAuthorization`](https://clerk.com/docs/errors/authentication\#invalid-authorization)

Signifies an error when the request is not authorized to perform the given operation.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Unauthorized request",
  "longMessage": "You are not authorized to perform this request",
  "code": "authorization_invalid_code"
}
```

## [`InvalidCSRFToken`](https://clerk.com/docs/errors/authentication\#invalid-csrf-token)

Signifies an error when the request does not contain a CSRF token or the given token is invalid.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid or missing CSRF token",
  "longMessage": "To protect against CSRF attacks, the given request must include a valid CSRF token.",
  "code": "invalid_csrf_token_code"
}
```

## [`MissingRequestHeaders`](https://clerk.com/docs/errors/authentication\#missing-request-headers)

Signifies an error when the incoming request is missing mandatory headers.

### [For standard browsers](https://clerk.com/docs/errors/authentication\#for-standard-browsers)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid request headers",
  "longMessage": "Your Clerk Frontend API is accessible from browsers and native applications. To protect against standard web attacks, the HTTP Origin header is required in browser requests. If you see this error, you probably accessed Clerk Frontend API directly from the address bar or a browser extension is intercepting your browser requests, removing the HTTP Origin header. For more information refer to https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin.",
  "code": "request_header_missing_code"
}
```

### [For non-standard browsers](https://clerk.com/docs/errors/authentication\#for-non-standard-browsers)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid request headers",
  "longMessage": "Your Clerk Frontend API is accessible from browsers and native applications. To protect against common web attacks, we require the HTTP Authorization header to be present in native application requests. Make sure the HTTP Authorization header is set a valid Clerk client JWT or set it to an empty string for your first Frontend API request that will return your Clerk client JWT.",
  "code": "request_header_missing_code"
}
```

## [`InvalidOriginHeader`](https://clerk.com/docs/errors/authentication\#invalid-origin-header)

Signifies an error when the origin header of the incoming request is invalid.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid HTTP Origin header",
  "longMessage": "The Request HTTP Origin header must be equal to or a subdomain of the requesting URL.",
  "code": "origin_invalid_code"
}
```

## [`DevBrowserUnauthenticated`](https://clerk.com/docs/errors/authentication\#dev-browser-unauthenticated)

Signifies an error when the dev browser is not authenticated.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Browser unauthenticated",
  "longMessage": "Unable to authenticate this browser for your development instance. Check your Clerk cookies and try again. If the issue persists reach out to support@clerk.com.",
  "code": "dev_browser_unauthenticated_code"
}
```

## [`URLBasedSessionSyncingDisabled`](https://clerk.com/docs/errors/authentication\#url-based-session-syncing-disabled)

Signifies an error when the incoming request attempts to use an endpoint with URL-based session syncing, when the instance operates with third-party cookies instead.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "URL-based session syncing is disabled for this instance",
  "longMessage": "This is a development instance operating with legacy, third-party cookies. To enable URL-based session syncing refer to https://clerk.com/docs/upgrade-guides/url-based-session-syncing.",
  "code": "url_based_session_syncing_disabled_code"
}
```

## [`InvalidRequestForEnvironment`](https://clerk.com/docs/errors/authentication\#invalid-request-for-environment)

Signifies an error when the incoming request is invalid for given environment(s).

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid request for environment",
  "longMessage": "Request only valid for <envTypesAsString> instances.",
  "code": "request_invalid_for_environment_code"
}
```

## [`RequestInvalidForInstance`](https://clerk.com/docs/errors/authentication\#request-invalid-for-instance)

Signifies an error when the incoming request is invalid for the given instance, due to the `auth_config`.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid request for instance",
  "longMessage": "This request is not valid for your instance. Modify your instance settings to use this request.",
  "code": "request_invalid_for_instance_code"
}
```

## [`InvalidHost`](https://clerk.com/docs/errors/authentication\#invalid-host)

Signifies an error when the incoming request has an invalid host.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid host",
  "longMessage": "We were unable to attribute this request to an instance running on Clerk. Make sure that your Clerk Publishable Key is correct.",
  "code": "host_invalid_code"
}
```

## [`IdentificationExists`](https://clerk.com/docs/errors/authentication\#identification-exists)

Signifies an error when the identifier already exists.

### [External account exists](https://clerk.com/docs/errors/authentication\#external-account-exists)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "already exists",
  "longMessage": "This external account already exists.",
  "code": "external_account_exists_code"
}
```

### [Email address exists](https://clerk.com/docs/errors/authentication\#email-address-exists)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "already exists",
  "longMessage": "This email address already exists.",
  "code": "email_address_exists_code"
}
```

### [Phone number exists](https://clerk.com/docs/errors/authentication\#phone-number-exists)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "already exists",
  "longMessage": "This phone number already exists.",
  "code": "phone_number_exists_code"
}
```

### [Username exists](https://clerk.com/docs/errors/authentication\#username-exists)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "already exists",
  "longMessage": "This username already exists.",
  "code": "username_exists_code"
}
```

### [SAML account exists](https://clerk.com/docs/errors/authentication\#saml-account-exists)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "already exists",
  "longMessage": "This SAML account already exists.",
  "code": "external_account_exists_code"
}
```

## [`IdentifierNotAllowedAccess`](https://clerk.com/docs/errors/authentication\#identifier-not-allowed-access)

Signifies an error when the identifier provided is not allowed to access the application.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Access not allowed.",
  "longMessage": "You are not allowed to access this application.",
  "code": "identifier_not_allowed_access_code"
}
```

## [`SignedOut`](https://clerk.com/docs/errors/authentication\#signed-out)

Signifies an error when a user is signed out.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Signed out",
  "longMessage": "You are signed out",
  "code": "signed_out_code"
}
```

## [`InvalidUserSettings`](https://clerk.com/docs/errors/authentication\#invalid-user-settings)

Signifies an error where the auth settings of the instance are not well configured, which results in sign in and sign up endpoints to be restricted.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "invalid auth configuration",
  "longMessage": "The authentication settings are invalid.",
  "code": "invalid_user_settings_code"
}
```

## [`InvalidHandshake`](https://clerk.com/docs/errors/authentication\#invalid-handshake)

Signifies an error when the handshake request is invalid.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "invalid handshake",
  "longMessage": "The handshake request is invalid: <REASON>",
  "code": "invalid_handshake_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/authentication.mdx)

Last updated onAug 16, 2024

Support

## Clerk Domain Errors
[Skip to main content](https://clerk.com/docs/errors/domains#main)

1. [`DomainNotFound`](https://clerk.com/docs/errors/domains#domain-not-found)
2. [`DomainUpdateForbidden`](https://clerk.com/docs/errors/domains#domain-update-forbidden)
3. [`OperationNotAllowedOnSatelliteDomain`](https://clerk.com/docs/errors/domains#operation-not-allowed-on-satellite-domain)
4. [`OperationNotAllowedOnPrimaryDomain`](https://clerk.com/docs/errors/domains#operation-not-allowed-on-primary-domain)
5. [`SyncNonceAlreadyConsumed`](https://clerk.com/docs/errors/domains#sync-nonce-already-consumed)
6. [`PrimaryDomainAlreadyExists`](https://clerk.com/docs/errors/domains#primary-domain-already-exists)
7. [`InvalidProxyConfiguration`](https://clerk.com/docs/errors/domains#invalid-proxy-configuration)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/domains.mdx)

# Domain errors

An index of Clerk errors related to domains.

## [`DomainNotFound`](https://clerk.com/docs/errors/domains\#domain-not-found)

Signifies an error when no domain with the given ID was found.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Domain not found",
  "longMessage": "No domain was found with <id>",
  "code": "resource_not_found_code"
}
```

## [`DomainUpdateForbidden`](https://clerk.com/docs/errors/domains\#domain-update-forbidden)

Signifies an error when trying to update a domain for any instance that is not a production instance.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Domain update was forbidden",
  "longMessage": "Domain can be only updated for production instances",
  "code": "domain_update_forbidden_code"
}
```

## [`OperationNotAllowedOnSatelliteDomain`](https://clerk.com/docs/errors/domains\#operation-not-allowed-on-satellite-domain)

Signifies an error when trying to perform an operation on a satellite domain that is not allowed.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "operation not allowed",
  "longMessage": "This operation is not allowed on a satellite domain. Try again using the primary domain of your instance.",
  "code": "operation_not_allowed_on_satellite_domain_code"
}
```

## [`OperationNotAllowedOnPrimaryDomain`](https://clerk.com/docs/errors/domains\#operation-not-allowed-on-primary-domain)

Signifies an error when trying to perform an operation on a primary domain that is not allowed.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "operation not allowed",
  "longMessage": "This operation is not allowed on a primary domain. Try again with a satellite domain of the instance.",
  "code": "operation_not_allowed_on_primary_domain_code"
}
```

## [`SyncNonceAlreadyConsumed`](https://clerk.com/docs/errors/domains\#sync-nonce-already-consumed)

Signifies an error when the nonce that was given during the sync flow is already consumed.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "sync nonce already consumed",
  "longMessage": "The given sync nonce has already been consumed and cannot be re-used.",
  "code": "sync_nonce_already_consumed_code"
}
```

## [`PrimaryDomainAlreadyExists`](https://clerk.com/docs/errors/domains\#primary-domain-already-exists)

Signifies an error when a new domain is added as primary while there is already one in the instance. Currently, we only support a single primary domain per instance.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "primary domain already exists",
  "longMessage": "Currently, only a single primary domain is supported and the current instance already has one. All new domains need to be set a satellites.",
  "code": "primary_domain_already_exists_code"
}
```

## [`InvalidProxyConfiguration`](https://clerk.com/docs/errors/domains\#invalid-proxy-configuration)

Signifies an error when the proxy URL is not configured correctly.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "longMessage": "Clerk Frontend API cannot be accessed through the proxy URL. Make sure your proxy is configured correctly.",
  "code": "invalid_proxy_configuration_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/domains.mdx)

Last updated onAug 16, 2024

Support

## JavaScript Quickstart Guide
[Skip to main content](https://clerk.com/docs/quickstarts/javascript#main)

1. [More resources](https://clerk.com/docs/quickstarts/javascript#more-resources)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/javascript.mdx)

# JavaScript Quickstart

## You will learn the following:

- Add the JavaScript SDK to your JavaScript app
- Use Clerk components to allow users to sign in or out

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)

## Example repository

- [JavaScript Quickstart Repo](https://github.com/clerk/clerk-javascript-quickstart)

To add the [JavaScript SDK](https://clerk.com/docs/references/javascript/overview) to your JavaScript app, you have two options:

1. Install the package using a package manager, like `npm`.
2. Use the `<script>` tag to load the ClerkJS package from our CDN.

Use the following tabs to choose your preferred method.

NPM module

<script>

## [Set up a JavaScript app using Vite](https://clerk.com/docs/quickstarts/javascript\#set-up-a-java-script-app-using-vite)

To install Clerk's JavaScript SDK, you need to use a bundler like [Vite⁠](https://vitejs.dev/) or [Webpack⁠](https://webpack.js.org/).

For this tutorial, run the following commands to create a JavaScript app using [Vite⁠](https://vitejs.dev/guide/#scaffolding-your-first-vite-project). From the prompts, choose the **Vanilla** framework, and then choose the **JavaScript** variant.

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm create vite@latest clerk-javascript
cd clerk-javascript
npm install
npm run dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn create vite clerk-javascript
cd clerk-javascript
yarn install
yarn dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm create vite clerk-javascript
cd clerk-javascript
pnpm install
pnpm dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun create vite clerk-javascript
cd clerk-javascript
bun install
bun dev
```

## [Install `@clerk/clerk-js`](https://clerk.com/docs/quickstarts/javascript\#install-clerk-clerk-js)

Run the following command to add the JavaScript SDK to your project:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/clerk-js
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @clerk/clerk-js
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/clerk-js
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @clerk/clerk-js
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/javascript\#set-your-clerk-api-keys)

It's recommended to use environment variables to store your Clerk Publishable Key. In JavaScript projects, you can add these values in an `.env` file and load them into your app using a package like [`dotenv`⁠](https://www.npmjs.com/package/dotenv). For Vite projects, environment variables in an `.env` file at the project root are automatically accessible through the [`import.meta.env` object⁠](https://vitejs.dev/guide/env-and-mode.html#env-variables).

Add your Clerk Publishable Key to your `.env` file. It can always be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable Key.
3. Paste your key into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
VITE_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
```

In your `main.js` file, import the Publishable Key using Vite's `import.meta.env` object.

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
const clerkPubKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY
```

## [Initialize Clerk](https://clerk.com/docs/quickstarts/javascript\#initialize-clerk)

To initialize Clerk, import the `Clerk` class and instantiate it with your Clerk Publishable Key. Then, call the `load()` method, as shown in the following example:

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

const publishableKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

const clerk = new Clerk(publishableKey)
await clerk.load({
  // Set load options here
})
```

Note

Calling the `load()` method initializes Clerk. For more information on the `load()` method and what options you can pass to it, see the [reference documentation](https://clerk.com/docs/references/javascript/clerk#load).

## [Add Clerk components to your app](https://clerk.com/docs/quickstarts/javascript\#add-clerk-components-to-your-app)

Clerk's [prebuilt components](https://clerk.com/docs/components/overview) are the easiest way to add authentication and user management to your app. They come styled out-of-the-box and are customizable to fit your app's design.

To get started, add the following components to your app:

- [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in): Renders a user interface for signing in.
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button): Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.

Your `main.js` file should look something like this:

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

const clerkPubKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

const clerk = new Clerk(clerkPubKey)
await clerk.load()

if (clerk.user) {
  document.getElementById('app').innerHTML = `
    <div id="user-button"></div>
  `

  const userButtonDiv = document.getElementById('user-button')

  clerk.mountUserButton(userButtonDiv)
} else {
  document.getElementById('app').innerHTML = `
    <div id="sign-in"></div>
  `

  const signInDiv = document.getElementById('sign-in')

  clerk.mountSignIn(signInDiv)
}
```

And your `index.html` file should look something like this:

index.html

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/main.js"></script>
  </body>
</html>
```

## [Create your first user](https://clerk.com/docs/quickstarts/javascript\#create-your-first-user)

Run your project with the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm run dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun dev
```

Now visit your app's homepage at [`http://localhost:5173`⁠](http://localhost:5173/). Sign up to create your first user.

## [Add the SDK using a `<script>` tag](https://clerk.com/docs/quickstarts/javascript\#add-the-sdk-using-a-script-tag)

This `<script>` tag will load Clerk's JavaScript SDK from our CDN and initialize it with your Clerk **Publishable Key** and **Frontend API URL**. It should be placed before any other `<script>` tags that use the JavaScript SDK.

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, select **JavaScript** from the dropdown menu.
3. Copy the `<script>` tag and paste it into your HTML file, as shown in the following example:

index.html

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<!-- Rest of your HTML file -->

<script
  async
  crossorigin="anonymous"
  data-clerk-publishable-key="YOUR_PUBLISHABLE_KEY"
  src="https://YOUR_FRONTEND_API_URL/npm/@clerk/clerk-js@5/dist/clerk.browser.js"
  type="text/javascript"
></script>
```

## [Listen for the `load` event](https://clerk.com/docs/quickstarts/javascript\#listen-for-the-load-event)

Below the `<script` \> tag that initializes the SDK, create another `<script>` tag that listens for the `load` event and call Clerk's [`load()`](https://clerk.com/docs/references/javascript/clerk#load) method to load the SDK, as shown in the following example:

index.html

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<!-- Rest of your HTML file -->

<script>
  window.addEventListener('load', async function () {
    await Clerk.load()

    console.log('ClerkJS is loaded')
  })
</script>
```

## [Allow users to sign in or out](https://clerk.com/docs/quickstarts/javascript\#allow-users-to-sign-in-or-out)

Clerk's [prebuilt components](https://clerk.com/docs/components/overview) are the easiest way to add authentication and user management to your app. They come styled out-of-the-box and are customizable to fit your app's design.

To get started, you will use:

- [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in): renders a user interface for signing in.
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button): Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.

index.html

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<div id="app"></div>

<!-- Initialize Clerk with your
Clerk Publishable Key and Frontend API URL -->
<script
  async
  crossorigin="anonymous"
  data-clerk-publishable-key="YOUR_PUBLISHABLE_KEY"
  src="https://YOUR_FRONTEND_API_URL/npm/@clerk/clerk-js@latest/dist/clerk.browser.js"
  type="text/javascript"
></script>

<script>
  window.addEventListener('load', async function () {
    await Clerk.load()

    if (Clerk.user) {
      document.getElementById('app').innerHTML = `
        <div id="user-button"></div>
      `

      const userButtonDiv = document.getElementById('user-button')

      Clerk.mountUserButton(userButtonDiv)
    } else {
      document.getElementById('app').innerHTML = `
        <div id="sign-in"></div>
      `

      const signInDiv = document.getElementById('sign-in')

      Clerk.mountSignIn(signInDiv)
    }
  })
</script>
```

## [More resources](https://clerk.com/docs/quickstarts/javascript\#more-resources)

### [Clerkclassreference](https://clerk.com/docs/references/javascript/clerk)

Learn more about the `Clerk` class and how to use it.

### [Prebuiltcomponents](https://clerk.com/docs/components/overview)

Learn more about Clerk's suite of components that let you quickly add authentication to your app.

### [Customization&localization](https://clerk.com/docs/customization/overview)

Learn how to customize and localize Clerk components.

### [JavaScriptSDKReference](https://clerk.com/docs/references/javascript/overview)

Learn more about additional JavaScript methods.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/javascript.mdx)

Last updated onFeb 21, 2025

Support

## Clerk Deployment Environments
[Skip to main content](https://clerk.com/docs/deployments/environments#main)

1. [Development instance](https://clerk.com/docs/deployments/environments#development-instance)
2. [Production instance](https://clerk.com/docs/deployments/environments#production-instance)
3. [Staging environments](https://clerk.com/docs/deployments/environments#staging-environments)
4. [Preview environments](https://clerk.com/docs/deployments/environments#preview-environments)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/environments.mdx)

# Instances / Environments

When creating a new application within Clerk, you are provided with two instances: `Development` and `Production`. These instances vary slightly and should only be used appropriately.

## [Development instance](https://clerk.com/docs/deployments/environments\#development-instance)

A `Development` instance is Clerk's default instance type and has characteristics that allow it to be more useful for local development. To facilitate development and local authentication, `Development` instances have a more relaxed security posture and are not suitable for production workloads.

Some notable examples of `Development`-only characteristics in a Clerk application are:

- A `Development` banner is shown prominently in the Clerk Dashboard to make clear you're managing or configuring non-production data
- Email and SMS templates are prefixed with the environment type to prevent against using `Development` instances for production purposes
- Some social connections use shared credentials by default
- [The Account Portal](https://clerk.com/docs/account-portal/overview) will use a Clerk development domain that ends with `accounts.dev` instead of your app's production domain
- OAuth consent screens will show the development domain that ends with `accounts.dev` instead of your production domain
- Search engines will not be able to crawl and index your application
- Development instances have a 100 users cap and user data can not be transferred between instances

Note

All paid functionality is available in a `Development` instance. However, when you deploy your application to `Production`, you will be asked to upgrade to a `Pro` account. See [our pricing page](https://clerk.com/pricing) for full details.

## [Production instance](https://clerk.com/docs/deployments/environments\#production-instance)

A `Production` instance is the more robust option of Clerk's instance types. `Production` instances are meant to support high volumes of traffic and by default, have a more strict security posture.

Some notable differences between `Production` and `Development` instances in a Clerk application are:

- You must associate a production domain within the Clerk Dashboard
- You are required to provision your own SSO credentials

When deploying to production, you must first activate your `Production` environment. See the [Deploying to Production](https://clerk.com/docs/deployments/overview#deploying-to-production) guide to learn about the process and avoid common pitfalls.

## [Staging environments](https://clerk.com/docs/deployments/environments\#staging-environments)

Clerk does not currently support staging instances in Clerk applications. However, you can set up a "staging environment" by creating a separate Clerk application with a separate domain. For more information, see the [staging guide](https://clerk.com/docs/deployments/set-up-staging).

## [Preview environments](https://clerk.com/docs/deployments/environments\#preview-environments)

See [the preview environment guide](https://clerk.com/docs/deployments/set-up-preview-environment) to learn how to use Clerk with your preview deployments.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/environments.mdx)

Last updated onFeb 28, 2025

Support

## Clerk Cookie Errors
[Skip to main content](https://clerk.com/docs/errors/cookie#main)

1. [`MissingClaims`](https://clerk.com/docs/errors/cookie#missing-claims)
2. [`InvalidCookie`](https://clerk.com/docs/errors/cookie#invalid-cookie)
3. [`InvalidRotatingToken`](https://clerk.com/docs/errors/cookie#invalid-rotating-token)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/cookie.mdx)

# Cookie errors

An index of Clerk errors related to cookies.

## [`MissingClaims`](https://clerk.com/docs/errors/cookie\#missing-claims)

Signifies an error when token is missing claim.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "<invalidCookieMessage>",
  "longMessage": "The token is missing the following claims: <claims>",
  "code": "cookie_invalid_code"
}
```

## [`InvalidCookie`](https://clerk.com/docs/errors/cookie\#invalid-cookie)

Signifies an error when cookie is invalid.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "The provided cookie is invalid.",
  "code": "cookie_invalid_code"
}
```

## [`InvalidRotatingToken`](https://clerk.com/docs/errors/cookie\#invalid-rotating-token)

Signifies an error when rotating token does not match the client's rotating token.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "<invalidCookieMessage>",
  "longMessage": "The client's rotating key does not match the given one <token>",
  "code": "cookie_invalid_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/cookie.mdx)

Last updated onAug 16, 2024

Support

## API Versioning Overview
[Skip to main content](https://clerk.com/docs/versioning/overview#main)

1. [What constitutes a breaking change](https://clerk.com/docs/versioning/overview#what-constitutes-a-breaking-change)
2. [When using an SDK](https://clerk.com/docs/versioning/overview#when-using-an-sdk)
1. [Choosing an API version](https://clerk.com/docs/versioning/overview#choosing-an-api-version)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/versioning/overview.mdx)

# Versioning overview

When backwards incompatible changes are necessary for an API, new versions are released to prevent disruption to existing applications. These versions are identified by their release date, such as 2021-02-05. Both the frontend and backend APIs follow the same version.

A complete list of all the available versions with their changes can be found on the [API versions](https://clerk.com/docs/versioning/available-versions) page.

## [What constitutes a breaking change](https://clerk.com/docs/versioning/overview\#what-constitutes-a-breaking-change)

A breaking change is any modification that would require users to alter their existing setups. These include:

- **Change in property type**: Altering the data type of a property in either requests or responses.
- **Removal of a property**: Deleting a property or parameter from a request or response.
- **Change in property name**: Renaming a property in request or response payloads.
- **Backwards incompatible endpoint changes**: Implementing changes in an endpoint's functionality that older client versions cannot support. For instance, adding a new status to the sign-in process.
- **Endpoint removal**: Discontinuing access to an existing endpoint, which remains accessible in earlier versions.

## [When using an SDK](https://clerk.com/docs/versioning/overview\#when-using-an-sdk)

Each Clerk SDK version corresponds to a specific API version, so by updating the SDK, you're also updating to the latest compatible API version.

### [Choosing an API version](https://clerk.com/docs/versioning/overview\#choosing-an-api-version)

When making direct API calls to an endpoint, there are two options to specify the version:

1. **Query parameter**: Set the `__clerk_api_version` query parameter in your request URL.
2. **Clerk-API-Version header**: Include a `Clerk-API-Version` header in your requests.

Note

You must choose only one method to specify a version. Using both the query parameter and the header simultaneously will lead to an invalid request.
The same is also true when the version is invalid.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/versioning/overview.mdx)

Last updated onFeb 25, 2025

Support

## Clerk Webhooks Overview
[Skip to main content](https://clerk.com/docs/webhooks/overview#main)

1. [Clerk webhooks](https://clerk.com/docs/webhooks/overview#clerk-webhooks)
2. [Supported webhook events](https://clerk.com/docs/webhooks/overview#supported-webhook-events)
3. [Payload structure](https://clerk.com/docs/webhooks/overview#payload-structure)
4. [How Clerk handles delivery issues](https://clerk.com/docs/webhooks/overview#how-clerk-handles-delivery-issues)
1. [Retry](https://clerk.com/docs/webhooks/overview#retry)
2. [Replay](https://clerk.com/docs/webhooks/overview#replay)
5. [Sync data to your database](https://clerk.com/docs/webhooks/overview#sync-data-to-your-database)
6. [Protect your webhooks from abuse](https://clerk.com/docs/webhooks/overview#protect-your-webhooks-from-abuse)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/webhooks/overview.mdx)

# Webhooks overview

A webhook is an _event-driven_ method of communication between applications.

Unlike typical APIs where you would need to poll for data very frequently to get it "real-time", webhooks only send data when there is an event to trigger the webhook. This makes webhooks seem "real-time", but it's important to note that they are asynchronous.

For example, if you are onboarding a new user, you can't rely on the webhook delivery as part of that flow. Typically the delivery will happen quickly, but it's not guaranteed to be delivered immediately or at all. Webhooks are best used for things like sending a notification or updating a database, but not for synchronous flows where you need to know the webhook was delivered before moving on to the next step. If you need a synchronous flow, see the [onboarding guide](https://clerk.com/docs/references/nextjs/add-onboarding-flow) for an example.

## [Clerk webhooks](https://clerk.com/docs/webhooks/overview\#clerk-webhooks)

Clerk webhooks allow you to receive event notifications from Clerk, such as when a user is created or updated. When an event occurs, Clerk will send an HTTP `POST` request to your webhook endpoint configured for the event type. The payload carries a JSON object. You can then use the information from the request's JSON payload to trigger actions in your app, such as sending a notification or updating a database.

Clerk uses [Svix⁠](https://svix.com/) to send our webhooks.

You can find the Webhook signing secret when you select the endpoint you created on the [**Webhooks**⁠](https://dashboard.clerk.com/last-active?path=webhooks) page in the Clerk Dashboard.

## [Supported webhook events](https://clerk.com/docs/webhooks/overview\#supported-webhook-events)

To find a list of all the events Clerk supports:

1. In the Clerk Dashboard, navigate to the [**Webhooks**⁠](https://dashboard.clerk.com/last-active?path=webhooks) page.
2. Select the **Event Catalog** tab.

## [Payload structure](https://clerk.com/docs/webhooks/overview\#payload-structure)

The payload of a webhook is a JSON object that contains the following properties:

- `data`: contains the actual payload sent by Clerk. The payload can be a different object depending on the `event` type. For example, for `user.*` events, the payload will always be the [User](https://clerk.com/docs/references/javascript/user) object.
- `object`: always set to `event`.
- `type`: the type of event that triggered the webhook.
- `timestamp`: timestamp in milliseconds of when the event occurred.
- `instance_id`: the identifier of your Clerk instance.

The following example shows the payload of a `user.created` event:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "data": {
    "birthday": "",
    "created_at": 1654012591514,
    "email_addresses": [\
      {\
        "email_address": "example@example.org",\
        "id": "idn_29w83yL7CwVlJXylYLxcslromF1",\
        "linked_to": [],\
        "object": "email_address",\
        "verification": {\
          "status": "verified",\
          "strategy": "ticket"\
        }\
      }\
    ],
    "external_accounts": [],
    "external_id": "567772",
    "first_name": "Example",
    "gender": "",
    "id": "user_29w83sxmDNGwOuEthce5gg56FcC",
    "image_url": "https://img.clerk.com/xxxxxx",
    "last_name": "Example",
    "last_sign_in_at": 1654012591514,
    "object": "user",
    "password_enabled": true,
    "phone_numbers": [],
    "primary_email_address_id": "idn_29w83yL7CwVlJXylYLxcslromF1",
    "primary_phone_number_id": null,
    "primary_web3_wallet_id": null,
    "private_metadata": {},
    "profile_image_url": "https://www.gravatar.com/avatar?d=mp",
    "public_metadata": {},
    "two_factor_enabled": false,
    "unsafe_metadata": {},
    "updated_at": 1654012591835,
    "username": null,
    "web3_wallets": []
  },
  "instance_id": "ins_123",
  "object": "event",
  "timestamp": 1654012591835,
  "type": "user.created"
}
```

The payload should always be treated as unsafe until you validate the incoming webhook. Webhooks will originate from another server and be sent to your application as a POST request. A bad actor would fake a webhook event to try and gain access to your application or data.

## [How Clerk handles delivery issues](https://clerk.com/docs/webhooks/overview\#how-clerk-handles-delivery-issues)

### [Retry](https://clerk.com/docs/webhooks/overview\#retry)

Svix will use a set schedule and retry any webhooks that fail. To see the up-to-date schedule, see the [Svix Retry Schedule⁠](https://docs.svix.com/retries).

If Svix is attempting and failing to send a webhook, and that endpoint is removed or disabled from the [**Webhooks**⁠](https://dashboard.clerk.com/last-active?path=webhooks) page in the Clerk Dashboard, then the attempts will also be disabled.

### [Replay](https://clerk.com/docs/webhooks/overview\#replay)

If a webhook message or multiple webhook messages fail to send, you have the option to replay the webhook messages. This protects against your service having downtime or against a misconfigured endpoint.

To replay webhook messages:

1. In the Clerk Dashboard, navigate to the [**Webhooks**⁠](https://dashboard.clerk.com/last-active?path=webhooks) page.
2. Select the affected endpoint.
3. In the **Message Attempts** section, next to the message you want to replay, select the menu icon on the right side, and then select **Replay**.
4. The **Replay Messages** menu will appear. You can choose to:

- Resend the specific message you selected.
- Resend all failed messages since the first failed message in that date range.
- Resend all missing messages since the first failed message in that date range.

## [Sync data to your database](https://clerk.com/docs/webhooks/overview\#sync-data-to-your-database)

You can find a guide on how to use webhooks to sync your data to your database [here](https://clerk.com/docs/webhooks/sync-data).

## [Protect your webhooks from abuse](https://clerk.com/docs/webhooks/overview\#protect-your-webhooks-from-abuse)

To ensure that the API route receiving the webhook can only be hit by your app, there are a few protections you can put in place:

- **Verify the request signature**: Svix webhook requests are [signed⁠](https://www.wikiwand.com/en/Digital_signature) and can be verified to ensure the request is not malicious. To learn more, see Svix's guide on [how to verify webhooks with the svix libraries⁠](https://docs.svix.com/receiving/verifying-payloads/how) or [how to verify webhooks manually⁠](https://docs.svix.com/receiving/verifying-payloads/how-manual).

- **Only accept requests coming from [Svix's webhook IPs⁠](https://docs.svix.com/webhook-ips.json)**: To further prevent attackers from flooding your servers or wasting your compute, you can ensure that your webhook-receiving api routes only accept requests coming from [Svix's webhook IPs⁠](https://docs.svix.com/webhook-ips.json), rejecting all other requests.


## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/webhooks/overview.mdx)

Last updated onFeb 21, 2025

Support

## Inngest Webhook Guide
[Skip to main content](https://clerk.com/docs/webhooks/inngest#main)

1. [Setting up the Inngest webhook](https://clerk.com/docs/webhooks/inngest#setting-up-the-inngest-webhook)
2. [Viewing webhook events within Inngest](https://clerk.com/docs/webhooks/inngest#viewing-webhook-events-within-inngest)
3. [Creating a function to sync a new user to a database](https://clerk.com/docs/webhooks/inngest#creating-a-function-to-sync-a-new-user-to-a-database)
4. [Creating a function to send a welcome email](https://clerk.com/docs/webhooks/inngest#creating-a-function-to-send-a-welcome-email)
1. [Sending a delayed follow-up email](https://clerk.com/docs/webhooks/inngest#sending-a-delayed-follow-up-email)
5. [Testing webhook events using the Inngest Dev Server](https://clerk.com/docs/webhooks/inngest#testing-webhook-events-using-the-inngest-dev-server)
6. [Conclusion](https://clerk.com/docs/webhooks/inngest#conclusion)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/webhooks/inngest.mdx)

# Handling webhooks with Inngest

Webhooks allow you to [synchronize data](https://clerk.com/docs/webhooks/sync-data) from Clerk to your application backend. You can either handle them directly in your backend with an endpoint or use a tool like [Inngest⁠](https://www.inngest.com/) which receives the webhook events for you and reliably executes functions in your codebase. When handling webhooks, Inngest receives the [webhook events](https://clerk.com/docs/webhooks/overview#supported-webhook-events) for you and uses a built-in queue to reliably execute longer running functions with additional functionality including:

- [Limiting concurrency⁠](https://www.inngest.com/docs/guides/concurrency) to handle spikes in events without overwhelming your API or database.
- Triggering multiple functions from a single event ( [fan-out jobs⁠](https://www.inngest.com/docs/guides/fan-out-jobs)).
- [Delaying code⁠](https://www.inngest.com/docs/functions/multi-step) to run after a period of time.
- [Debouncing events⁠](https://www.inngest.com/docs/reference/functions/debounce) to reduce duplicate processing.

In this guide, you'll learn how to set up Inngest to receive Clerk webhook events and how to define Inngest functions in your application using Clerk events including synchronizing data and sending welcome emails.

To follow this guide, you need an Inngest account (free tier is enough) and have Inngest [set up⁠](https://www.inngest.com/docs/quick-start) in your codebase.

## [Setting up the Inngest webhook](https://clerk.com/docs/webhooks/inngest\#setting-up-the-inngest-webhook)

To create an Inngest webhook endpoint and add it to your Clerk account, navigate to the [**Webhooks**⁠](https://dashboard.clerk.com/last-active?path=webhooks) page in the Clerk Dashboard. Next, select **Add Endpoint**.

![The Webhooks page in the Clerk Dashboard. A red arrow points to the button for Add Endpoint](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Fwebhook-page.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

On the next page, select the **Transformation template** tab and the **Inngest** template, then select the **Connect to Inngest** button.

![The Webhooks page in the Clerk Dashboard showing the Inngest transformation template. Red arrows point to the Transformation Template tab, the Inngest template, and the Connect to Inngest button](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Fwebhook-transformation-template.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

A popup window will appear to complete the setup. Select **Approve** to create the webhook.

![The Inngest permissions popup window showing the Approve button](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Finngest-permissions-dialog.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

After the popup window disappears, the Webhooks page will now display **Connected** with the webhook URL underneath. There is one more step to complete setup.

![The Webhooks page in the Clerk Dashboard showing a connected Inngest account. A red arrow points to the Connected button](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Fwebhook-endpoint-connected.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

To complete the setup, scroll down and select **Create**.

![The Webhooks page in the Clerk Dashboard showing the end of the page to create a new endpoint. A red arrow points to the Create button](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Fwebhook-create.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

You'll be redirected to the new endpoint. In your Inngest dashboard, you will see a new webhook created in your account's [production environment⁠](https://app.inngest.com/env/production/manage/webhooks).

## [Viewing webhook events within Inngest](https://clerk.com/docs/webhooks/inngest\#viewing-webhook-events-within-inngest)

After setup, as webhook events are sent from Clerk to Inngest, new `clerk` events will appear in your [Inngest dashboard⁠](https://app.inngest.com/env/production/events). Event names will be the prefixed `clerk/` followed by the event name. See [webhook events](https://clerk.com/docs/webhooks/overview#supported-webhook-events) for a full list.

![The Events page in the Inngest Dashboard showing a list of Clerk events](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Finngest-clerk-events.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## [Creating a function to sync a new user to a database](https://clerk.com/docs/webhooks/inngest\#creating-a-function-to-sync-a-new-user-to-a-database)

With Inngest already set up in your codebase, you can now use these events as triggers for your functions.

Suppose you need to write a function which will insert a new user into the database which will be triggered whenever `clerk/user.created` event occurs. You would use the `inngest.createFunction` method, like in the example below:

src/inngest/sync-user.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
const syncUser = inngest.createFunction(
  { id: 'sync-user-from-clerk' }, // ←The 'id' is an arbitrary string used to identify the function in the dashboard
  { event: 'clerk/user.created' }, // ← This is the function's triggering event
  async ({ event }) => {
    const user = event.data // The event payload's data will be the Clerk User json object
    const { id, first_name, last_name } = user
    const email = user.email_addresses.find(
      (e) => e.id === user.primary_email_address_id,
    ).email_address
    await database.users.insert({ id, email, first_name, last_name })
  },
)
```

The `event` object contains all of the relevant data for the event. The `event.data` will match the `data` object from the standard Clerk webhook [payload structure](https://clerk.com/docs/webhooks/overview#payload-structure). With this `clerk/user.created` event, the `event.data` will be a Clerk User json object.

As you can see, you can choose which events you want to handle with each function. You might write a separate function for `clerk/user.updated` and `clerk/user.deleted` handling the entire lifecycle end to end.

Note that multiple functions can also listen to the same event. This pattern is called “ [fan-out⁠](https://www.inngest.com/docs/guides/fan-out-jobs).”

## [Creating a function to send a welcome email](https://clerk.com/docs/webhooks/inngest\#creating-a-function-to-send-a-welcome-email)

Often, applications need to perform additional tasks when a new user is created, like send a welcome email with tips and useful information.

While it is possible to add this logic at the end of your sync function as seen in the [previous section](https://clerk.com/docs/webhooks/inngest#creating-a-function-to-sync-a-new-user-to-a-database), it’s better to decouple unrelated tasks into different functions so issues with one task do not affect the other ones. For example, if your email fails to send, it should not affect starting a trial for that user in Stripe.

With Inngest, each function has automatic retries, so only the code that has issues is re-run.

The code below creates another function using the same `clerk/user.created` event and adds the logic to send the welcome email:

src/inngest/welcome-emails.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
const sendWelcomeEmail = inngest.createFunction(
  { id: 'send-welcome-email' },
  { event: 'clerk/user.created' },
  async ({ event }) => {
    const user = event.data
    const { first_name } = user
    const email = user.email_addresses.find(
      (e) => e.id === user.primary_email_address_id,
    ).email_address
    // `emails` is a placeholder for the function in your codebase to send email
    await emails.sendWelcomeEmail({ email, first_name })
  },
)
```

Now, you have a function that utilizes the same Clerk webhook event for another purpose. Clerk webhook events can be used for all sorts of application lifecycle use cases. For example, adding users to a marketing email list, starting a Stripe trial, or provisioning new account resources.

### [Sending a delayed follow-up email](https://clerk.com/docs/webhooks/inngest\#sending-a-delayed-follow-up-email)

Every Inngest function handler has an additional `step` object which provides tools to create more complex functions. Using `step.run` allows you to encapsulate specific code that will be automatically retried ensuring that issues with one part of your function don't force the entire function to re-run. Additionally, [other tools like `step.sleep`⁠](https://www.inngest.com/docs/reference/functions/step-sleep), are available to extend functionality.

The code below sends a welcome email, then uses `step.sleep` to wait for three days before sending another email offering a free trial:

src/inngest/welcome-emails.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
const sendOnboardingEmails = inngest.createFunction(
  { id: 'onboarding-emails' },
  { event: 'clerk/user.created' },
  async ({ event, step }) => {
    // ← step is available in the handler's arguments
    const user = event.data
    const { first_name } = user
    const email = user.email_addresses.find(
      (e) => e.id === user.primary_email_address_id,
    ).email_address

    await step.run('welcome-email', async () => {
      // `emails` is a placeholder for the function in your codebase to send email
      await emails.sendWelcomeEmail({ email, first_name })
    })

    // wait 3 days before second email
    await step.sleep('wait-3-days', '3 days')

    await step.run('trial-offer-email', async () => {
      await emails.sendTrialOfferEmail({ email, first_name })
    })
  },
)
```

Now, you've extended the usefulness of Clerk webhook events even further to build an onboarding drip email campaign in just a few lines of code.

## [Testing webhook events using the Inngest Dev Server](https://clerk.com/docs/webhooks/inngest\#testing-webhook-events-using-the-inngest-dev-server)

During local development with Inngest, you can use the [Inngest Dev Server⁠](https://www.inngest.com/docs/local-development) to run and test your functions on your own machine. Run the following command to start the server:

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npx inngest-cli@latest dev
```

In your browser open [http://localhost:8288⁠](http://localhost:8288/) to see the Inngest Dev Server.

To quickly get events to test within Dev Server, you can select any individual event from the **Events** tab then select the **Send to Dev Server**.

![The Inngest Dashboard showing an individual event payload. Red arrows point to the Events tab and the Send to Dev Server button](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Finngest-send-to-dev-server.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

You'll now see the event in the Inngest Dev Server's **Stream** tab alongside any functions that it triggered.

![The Inngest Dev Server showing the Stream tab. The forwarded event is visible in the stream](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Finngest-dev-server.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

From here you can select the event, replay it to re-run any functions or edit and replay to edit the event payload to test different types of events.

![The Inngest Dev Server showing the forwarded event payload. A red arrow points to the Replay button](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Finngest%2Finngest-replay-event.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## [Conclusion](https://clerk.com/docs/webhooks/inngest\#conclusion)

Congratulations! You've now learned how to use Inngest to create functions that use Clerk Webhook events.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/webhooks/inngest.mdx)

Last updated onJan 21, 2025

Support

## CAPTCHA Customization
[Skip to main content](https://clerk.com/docs/customization/captcha#main)

1. [Properties](https://clerk.com/docs/customization/captcha#properties)
2. [Usage](https://clerk.com/docs/customization/captcha#usage)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/captcha.mdx)

# `captcha` prop

The `captcha` property can be used to change the appearance of the CAPTCHA widget. It is passed as a parameter to the [`appearance` prop](https://clerk.com/docs/customization/overview).

## [Properties](https://clerk.com/docs/customization/captcha\#properties)

- Name`theme`Type`'auto' | 'light' | 'dark'`Description





The CAPTCHA widget theme. Defaults to `auto`.

- Name`size`Type`'normal' | 'flexible' | 'compact'`Description





The CAPTCHA widget size. Defaults to `normal`.

- Name`language`Type`string`Description





The CAPTCHA widget language/locale. When setting the language for CAPTCHA, this is how localization is prioritized:



- `appearance.captcha.language`: Set by this `language` property.
- `localization.locale`: Set by the [`localization` prop on `<ClerkProvider>`](https://clerk.com/docs/customization/localization). Some languages are [supported by Clerk](https://clerk.com/docs/customization/localization) but not by Cloudflare Turnstile, which is used for the CAPTCHA widget. See [Cloudflare Turnstile's supported languages⁠](https://developers.cloudflare.com/turnstile/reference/supported-languages).
- `en-US`: Clerk's default language.

## [Usage](https://clerk.com/docs/customization/captcha\#usage)

Next.js

Astro

React

Remix

Nuxt

Vue

app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs';

<ClerkProvider
  appearance={{
    captcha: {
      theme: 'dark',
      size: 'flexible',
      language: 'es-ES',
    }
  }}
>
  {/* ... */}
</ClerkProvider>;
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/captcha.mdx)

Last updated onMar 5, 2025

Support

## Clerk iOS Quickstart
[Skip to main content](https://clerk.com/docs/quickstarts/ios#main)

1. [Enable the Native API](https://clerk.com/docs/quickstarts/ios#enable-the-native-api)
2. [Create an iOS Project](https://clerk.com/docs/quickstarts/ios#create-an-i-os-project)
3. [Install the Clerk iOS SDK](https://clerk.com/docs/quickstarts/ios#install-the-clerk-i-os-sdk)
4. [Load Clerk](https://clerk.com/docs/quickstarts/ios#load-clerk)
5. [Conditionally render content](https://clerk.com/docs/quickstarts/ios#conditionally-render-content)
6. [Create views for sign-up and sign-in](https://clerk.com/docs/quickstarts/ios#create-views-for-sign-up-and-sign-in)
7. [Allow users to sign up or sign in](https://clerk.com/docs/quickstarts/ios#allow-users-to-sign-up-or-sign-in)
8. [Allow users to sign out](https://clerk.com/docs/quickstarts/ios#allow-users-to-sign-out)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/ios.mdx)

# iOS Quickstart (beta)

## You will learn the following:

- Create a new Xcode project
- Install the Clerk iOS SDK
- Configure `Clerk` with your Publishable Key
- Use Clerk to enable users to sign in and out of your application

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)

## [Enable the Native API](https://clerk.com/docs/quickstarts/ios\#enable-the-native-api)

The Native API is disabled by default for all Clerk instances.

To enable the Native API:

1. In the Clerk Dashboard, navigate to the [**Native Applications**⁠](https://dashboard.clerk.com/last-active?path=/native-applications) page.
2. Enable the **Native API**.

## [Create an iOS Project](https://clerk.com/docs/quickstarts/ios\#create-an-i-os-project)

To get started using Clerk with iOS, create a new project in Xcode. Select SwiftUI as your interface and Swift as your language.
See the [Xcode documentation⁠](https://developer.apple.com/documentation/xcode/creating-an-xcode-project-for-an-app) for more information.

## [Install the Clerk iOS SDK](https://clerk.com/docs/quickstarts/ios\#install-the-clerk-i-os-sdk)

Follow [the Swift Package Manager instructions⁠](https://developer.apple.com/documentation/xcode/adding-package-dependencies-to-your-app) to install Clerk as a dependency.
When prompted for the package URL, enter [https://github.com/clerk/clerk-ios⁠](https://github.com/clerk/clerk-ios). Be sure to add the package to your target.

## [Load Clerk](https://clerk.com/docs/quickstarts/ios\#load-clerk)

To use Clerk in your app, you must first configure and load `Clerk`.

- Inside your new project in Xcode, open your `@main` app file.
- Import `Clerk`.
- Create a reference to the shared `Clerk` instance.
- Replace `ContentView()` with the below `ZStack`.
- Inject your reference to the shared `clerk` instance into the environment.
- Attach a `.task` modifier to the new `ZStack`. In the body of the task, configure `clerk` with your Publishable Key, and then load `clerk`. You can get your Publishable Key from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

ClerkQuickstartApp.swift

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import SwiftUI
import Clerk

@main
struct ClerkQuickstartApp: App {
  private var clerk = Clerk.shared

  var body: some Scene {
    WindowGroup {
      ZStack {
        if clerk.isLoaded {
          ContentView()
        } else {
          ProgressView()
        }
      }
      .environment(clerk)
      .task {
        clerk.configure(publishableKey: "YOUR_PUBLISHABLE_KEY")
        try? await clerk.load()
      }
    }
  }
}
```

## [Conditionally render content](https://clerk.com/docs/quickstarts/ios\#conditionally-render-content)

To render content based on whether a user is authenticated or not:

- Open your `ContentView` file.
- Import `Clerk`.
- Access the shared `Clerk` instance that you injected into the environment in the previous step.
- Replace the content of the view body with a conditional that checks for a `clerk.user`.

ContentView.swift

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import SwiftUI
import Clerk

struct ContentView: View {
  @Environment(Clerk.self) private var clerk

  var body: some View {
    VStack {
      if let user = clerk.user {
        Text("Hello, \(user.id)")
      } else {
        Text("You are signed out")
      }
    }
  }
}
```

## [Create views for sign-up and sign-in](https://clerk.com/docs/quickstarts/ios\#create-views-for-sign-up-and-sign-in)

### [`SignUpView`](https://clerk.com/docs/quickstarts/ios\#sign-up-view)

The following example creates a `SignUpView` that allows users to sign up using their email address and password, and sends an email verification code to confirm their email address.

SignUpView.swift

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import SwiftUI
import Clerk

struct SignUpView: View {
  @State private var email = ""
  @State private var password = ""
  @State private var code = ""
  @State private var isVerifying = false

  var body: some View {
    VStack {
      Text("Sign Up")
      if isVerifying {
        TextField("Code", text: $code)
        Button("Verify") {
          Task { await verify(code: code) }
        }
      } else {
        TextField("Email", text: $email)
        SecureField("Password", text: $password)
        Button("Continue") {
          Task { await signUp(email: email, password: password) }
        }
      }
    }
    .padding()
  }
}

extension SignUpView {

  func signUp(email: String, password: String) async {
    do {
      let signUp = try await SignUp.create(
        strategy: .standard(emailAddress: email, password: password)
      )

      try await signUp.prepareVerification(strategy: .emailCode)

      isVerifying = true
    } catch {
      dump(error)
    }
  }

  func verify(code: String) async {
    do {
      guard let signUp = Clerk.shared.client?.signUp else {
        isVerifying = false
        return
      }

      try await signUp.attemptVerification(.emailCode(code: code))
    } catch {
      dump(error)
    }
  }

}
```

### [`SignInView`](https://clerk.com/docs/quickstarts/ios\#sign-in-view)

The following example creates a `SignInView` that allows users to sign in using their email address and password.

SignInView.swift

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import SwiftUI
import Clerk

struct SignInView: View {
  @State private var email = ""
  @State private var password = ""

  var body: some View {
    VStack {
      Text("Sign In")
      TextField("Email", text: $email)
      SecureField("Password", text: $password)
      Button("Continue") {
        Task { await submit(email: email, password: password) }
      }
    }
    .padding()
  }
}

extension SignInView {

  func submit(email: String, password: String) async {
    do {
      try await SignIn.create(
        strategy: .identifier(email, password: password)
      )
    } catch {
      dump(error)
    }
  }

}
```

### [`SignUpOrSignInView`](https://clerk.com/docs/quickstarts/ios\#sign-up-or-sign-in-view)

Finally, create a `SignUpOrSignInView` container view that allows users to switch between sign up and sign in.

SignUporSignInView.swift

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import SwiftUI

struct SignUpOrSignInView: View {
  @State private var isSignUp = true

  var body: some View {
    ScrollView {
      if isSignUp {
        SignUpView()
      } else {
        SignInView()
      }

      Button {
        isSignUp.toggle()
      } label: {
        if isSignUp {
          Text("Already have an account? Sign In")
        } else {
          Text("Don't have an account? Sign Up")
        }
      }
      .padding()
    }
  }
}
```

## [Allow users to sign up or sign in](https://clerk.com/docs/quickstarts/ios\#allow-users-to-sign-up-or-sign-in)

Go back to your `ContentView` and render your newly created `SignUpOrSignInView` when the user isn't signed in.

ContentView.swift

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import SwiftUI
import Clerk

struct ContentView: View {
  @Environment(Clerk.self) private var clerk

  var body: some View {
    VStack {
      if let user = clerk.user {
        Text("Hello, \(user.id)")
      } else {
        SignUpOrSignInView()
      }
    }
  }
}
```

## [Allow users to sign out](https://clerk.com/docs/quickstarts/ios\#allow-users-to-sign-out)

Finally, provide users with a way to sign out of your app:

- Open your `ContentView`.
- Add a button that ends a user's session.

ContentView.swift

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import SwiftUI
import Clerk

struct ContentView: View {
  @Environment(Clerk.self) private var clerk

  var body: some View {
    VStack {
      if let user = clerk.user {
        Text("Hello, \(user.id)")
        Button("Sign Out") {
          Task { try? await clerk.signOut() }
        }
      } else {
        SignUpOrSignInView()
      }
    }
  }
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/ios.mdx)

Last updated onFeb 28, 2025

Support

## Clerk Feature Errors
[Skip to main content](https://clerk.com/docs/errors/features#main)

1. [`FeatureNotEnabled`](https://clerk.com/docs/errors/features#feature-not-enabled)
2. [`NotImplemented`](https://clerk.com/docs/errors/features#not-implemented)
3. [`FeatureRequiresPSU`](https://clerk.com/docs/errors/features#feature-requires-psu)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/features.mdx)

# Feature errors

An index of Clerk errors related to features.

## [`FeatureNotEnabled`](https://clerk.com/docs/errors/features\#feature-not-enabled)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "not enabled",
  "longMessage": "This feature is not enabled on this instance",
  "code": "feature_not_enabled_code"
}
```

## [`NotImplemented`](https://clerk.com/docs/errors/features\#not-implemented)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "not implemented",
  "longMessage": "Feature `<feature>` is not available yet",
  "code": "feature_not_implemented_code"
}
```

## [`FeatureRequiresPSU`](https://clerk.com/docs/errors/features\#feature-requires-psu)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "not a Progressive Sign Up instance",
  "longMessage": "<feature> can only be used in instances that migrated to Progressive Sign Up (https://clerk.com/docs/upgrade-guides/progressive-sign-up)",
  "code": "feature_requires_psu_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/features.mdx)

Last updated onAug 16, 2024

Support

## Clerk Guides Overview
[Skip to main content](https://clerk.com/docs/guides/overview#main)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/overview.mdx)

# Clerk guides

Clerk offers a variety of guides to help you build and work with Clerk. These guides cover a broad range of topics, from understanding key concepts like [routing](https://clerk.com/docs/guides/routing) to practical code examples, such as [adding a custom onboarding flow to your sign-up process](https://clerk.com/docs/references/nextjs/add-onboarding-flow).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/overview.mdx)

Last updated onFeb 25, 2025

Support

## Image Optimization Guide
[Skip to main content](https://clerk.com/docs/guides/image-optimization#main)

1. [Add query parameters to `imageUrl`](https://clerk.com/docs/guides/image-optimization#add-query-parameters-to-image-url)
2. [Example](https://clerk.com/docs/guides/image-optimization#example)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/image-optimization.mdx)

# Use image optimization to improve app performance

When displaying your users' profile images, you should use query parameters to specify a maximum size and minimum quality. Doing so can allow you to improve your app's overall page load times by reducing the file sizes of the images you're fetching.

## [Add query parameters to `imageUrl`](https://clerk.com/docs/guides/image-optimization\#add-query-parameters-to-image-url)

Some types in Clerk's JavaScript SDK, such as [`User`](https://clerk.com/docs/references/javascript/user), [`PublicUserData`](https://clerk.com/docs/references/javascript/types/public-user-data#properties), and [`Organization`](https://clerk.com/docs/references/javascript/organization#properties), have an `imageUrl`. The URL returned from this property can be scaled down with the following image optimization options:

- `"width"`: Sets the minimum width of the image in pixels.
- `"height"`: Sets the minimum height of the image in pixels.
- `"fit"`: Describes how the image should fit its container. It can take the following values:


- `"scale-down"`: The image will scale down to fit the sizes specified in `"width"` and `"height"` if it's bigger, but will not scale up if it's smaller.
- `"crop"`: The image will scale down and be cropped to fit within the area specified in `"width"` and `"height"`.

- `"quality"`: Specifies the image quality for JPEG, WebP, PNG, and AVIF files. Accepts values from `1` to `100`. Defaults to `85`.

## [Example](https://clerk.com/docs/guides/image-optimization\#example)

The following example demonstrates how you can get the `imageUrl` from the currently active user in a session, and display their profile picture using Clerk's image optimization options:

Next.js

React

app/image-optimization/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { currentUser } from '@clerk/nextjs/server'

export default async function ImageOptimization() {
  const user = await currentUser()
  if (!user) return <p>No Image URL found</p>

  const { imageUrl } = user
  const params = new URLSearchParams()

  params.set('height', '200')
  params.set('width', '200')
  params.set('quality', '100')
  params.set('fit', 'crop')

  const imageSrc = `${imageUrl}?${params.toString()}`

  return (
    <div>
      <h1>Image source:</h1>
      <p>{imageSrc}</p>
      <h2>Image:</h2>
      <img src={imageSrc} alt="User image" />
    </div>
  )
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/image-optimization.mdx)

Last updated onFeb 21, 2025

Support

## Clerk iOS SDK
[Skip to main content](https://clerk.com/docs/references/ios/overview#main)

1. [SDK Reference](https://clerk.com/docs/references/ios/overview#sdk-reference)
2. [Installation with Swift Package Manager](https://clerk.com/docs/references/ios/overview#installation-with-swift-package-manager)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/ios/overview.mdx)

# Clerk iOS SDK (beta)

The Clerk iOS SDK gives you access to prebuilt components, React hooks, and helpers to make user authentication easier. Refer to the [quickstart guide](https://clerk.com/docs/quickstarts/ios) to get started.

## [SDK Reference](https://clerk.com/docs/references/ios/overview\#sdk-reference)

The full SDK Reference is available on [Swift Package Index⁠](https://swiftpackageindex.com/clerk/clerk-ios/main/documentation/clerk).

## [Installation with Swift Package Manager](https://clerk.com/docs/references/ios/overview\#installation-with-swift-package-manager)

To install the Clerk iOS SDK using Swift Package Manager, follow the instructions in the [GitHub README⁠](https://github.com/clerk/clerk-ios?tab=readme-ov-file#-installation).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/ios/overview.mdx)

Last updated onFeb 6, 2025

Support

## Staging Environment Setup
[Skip to main content](https://clerk.com/docs/deployments/staging-alternatives#main)

1. [Shared production credentials](https://clerk.com/docs/deployments/staging-alternatives#shared-production-credentials)
1. [Limitations of shared production credentials](https://clerk.com/docs/deployments/staging-alternatives#limitations-of-shared-production-credentials)
2. [Set up staging with shared production credentials](https://clerk.com/docs/deployments/staging-alternatives#set-up-staging-with-shared-production-credentials)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/staging-alternatives.mdx)

# Staging alternatives

## [Shared production credentials](https://clerk.com/docs/deployments/staging-alternatives\#shared-production-credentials)

Caution

This is not recommended. Instead, you should either [set up a staging environment with a subdomain and separate Clerk app](https://clerk.com/docs/deployments/set-up-staging) or [use a preview deployment](https://clerk.com/docs/deployments/set-up-preview-environment).

If you would like to share settings and data between your production and staging environments, you can use a subdomain of your production domain to set up a staging environment.

### [Limitations of shared production credentials](https://clerk.com/docs/deployments/staging-alternatives\#limitations-of-shared-production-credentials)

The limitations of using shared production credentials to set up a staging environment with Clerk include:

- You will be combining staging data with live production data.
- When you enable Clerk features to test in staging, they will be enabled in your Production environment as well.

### [Set up staging with shared production credentials](https://clerk.com/docs/deployments/staging-alternatives\#set-up-staging-with-shared-production-credentials)

1. **Add your subdomain to your hosting provider** \- Ensure that your subdomain is associated with your staging branch so that it will point to new staging deployments. This process will vary based on your provider. The following are some guides from popular hosting providers:


- [Vercel⁠](https://vercel.com/guides/set-up-a-staging-environment-on-vercel)
- [Netlify⁠](https://docs.netlify.com/domains-https/netlify-dns/delegate-a-subdomain-to-netlify-dns/)
- [Cloudflare⁠](https://developers.cloudflare.com/dns/manage-dns-records/how-to/create-subdomain/)

2. **Add your CNAME record to your domain provider** \- Depending on the provider, the verification process can take hours or days.
3. **Add your production instance's API keys to your staging deployment** \- In your staging deployment's environment variables, add your production instance's API keys. To find them, visit the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard and ensure that the instance at the top of the Dashboard is set to **Production**. The following are environment variable guides from some popular providers:


- [Vercel⁠](https://vercel.com/docs/projects/environment-variables#declare-an-environment-variable)
- [Netlify⁠](https://docs.netlify.com/environment-variables/get-started/#create-environment-variables)
- [Cloudflare⁠](https://developers.cloudflare.com/workers/configuration/environment-variables/#add-environment-variables-via-the-dashboard)

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/staging-alternatives.mdx)

Last updated onDec 4, 2024

Support

## Clerk Authentication Setup
[Skip to main content](https://docs.redwoodjs.com/docs/auth/clerk/#__docusaurus_skipToContent_fallback)

Version: 8.4

On this page

Did you set up Clerk a while ago?

If you set up Clerk a while ago, you may be using a deprecated `authDecoder` that's subject to rate limiting.
This decoder will be removed in the next major.
There's a new decoder you can use right now!
See the [migration guide](https://github.com/redwoodjs/redwood/releases/tag/v5.3.2) for how to upgrade.

To get started, run the setup command:

```codeBlockLines_e6Vv
yarn rw setup auth clerk

```

This installs all the packages, writes all the files, and makes all the code modifications you need.
For a detailed explanation of all the api- and web-side changes that aren't exclusive to Clerk, see the top-level [Authentication](https://docs.redwoodjs.com/docs/authentication) doc.
But for now, let's focus on Clerk's side of things.

If you don't have a Clerk account yet, now's the time to make one: navigate to [https://clerk.dev](https://clerk.dev/), sign up, and create an application.
The defaults are good enough to get us going, but feel free to configure things as you wish.
We'll get the application's API keys from its dashboard next.

we'll only focus on the development instance

By default, Clerk applications have two instances, "Development" and "Production".
We'll only focus on the "Development" instance here, which is used for local development.
When you're ready to deploy, switch the instance the dashboard is displaying by clicking "Development" in the header at the top.
How you get your API keys to production depends on your deploy provider.

After you create the application, you should be redirected to its dashboard where you should see the RedwoodJS logo.
Click on it and copy the two API keys it shows into your project's `.env` file:

.env

```codeBlockLines_e6Vv
CLERK_PUBLISHABLE_KEY="..."
CLERK_SECRET_KEY="..."

```

Lastly, in your project's `redwood.toml` file, include `CLERK_PUBLISHABLE_KEY` in the list of env vars that should be available to the web side:

redwood.toml

```codeBlockLines_e6Vv
[web]
  # ...
  includeEnvironmentVariables = [\
    "CLERK_PUBLISHABLE_KEY",\
  ]

```

That should be enough; now, things should just work.
Let's make sure: if this is a brand new project, generate a home page:

```codeBlockLines_e6Vv
yarn rw g page Home /

```

There we'll try to sign up by destructuring `signUp` from the `useAuth` hook (import that from `'src/auth'`). We'll also destructure and display `isAuthenticated` to see if it worked:

web/src/pages/HomePage/HomePage.tsx

```codeBlockLines_e6Vv
import { useAuth } from 'src/auth'

const HomePage = () => {
  const { isAuthenticated, signUp } = useAuth()

  return (
    <>
      {/* MetaTags, h1, paragraphs, etc. */}

      <p>{JSON.stringify({ isAuthenticated })}</p>
      <button onClick={signUp}>sign up</button>
    </>
  )
}

```

Clicking sign up should open a sign-up box and after you sign up, you should see `{"isAuthenticated":true}` on the page.

## Customizing the session token [​](https://docs.redwoodjs.com/docs/auth/clerk/\#customizing-the-session-token "Direct link to Customizing the session token")

There's not a lot to the default session token.
Besides the standard claims, the only thing it really has is the user's `id`.
Eventually, you'll want to customize it so that you can get back more information from Clerk.
You can do so by navigating to the "Sessions" section in the nav on the left, then clicking on "Edit" in the "Customize session token" box:

![clerk_customize_session_token](https://github.com/redwoodjs/redwood/assets/32992335/6d30c616-b4d2-4b44-971b-8addf3b79e5a)

As long as you're using the `clerkJwtDecoder`
all the properties you add will be available to the `getCurrentUser` function:

api/src/lib/auth.ts

```codeBlockLines_e6Vv
export const getCurrentUser = async (
  decoded, // 👈 All the claims you add will be available on the `decoded` object
  // ...
) => {
  decoded.myClaim...

  // ...
}

```

## Avoiding feature duplication [​](https://docs.redwoodjs.com/docs/auth/clerk/\#avoiding-feature-duplication "Direct link to Avoiding feature duplication")

Redwood's Clerk integration is based on [Clerk's React SDK](https://clerk.dev/docs/reference/clerk-react/installation).
This means that there's some duplication between the features in the SDK and the ones in `@redwoodjs/auth-clerk-web`.
For example, the SDK ha a `SignedOut` component that redirects a user away from a private page—very much like wrapping a route with Redwood's `Private` component.
We recommend you use Redwood's way of doing things as much as possible since it's much more likely to get along with the rest of the framework.

## Deep dive: the `ClerkStatusUpdater` component [​](https://docs.redwoodjs.com/docs/auth/clerk/\#deep-dive-the-clerkstatusupdater-component "Direct link to deep-dive-the-clerkstatusupdater-component")

With Clerk, there's a bit more going on in the `web/src/auth.tsx` file than other auth providers.
This is because Clerk is a bit unlike the other auth providers Redwood integrates with in that it puts an instance of its client SDK on the browser's `window` object.
That means Redwood has to wait for it to be ready.
With other providers, Redwood instantiates their client SDK in `web/src/auth.ts{x}`, then passes it to `createAuth`.
With Clerk, instead Redwood uses Clerk components and hooks, like `ClerkLoaded` and `useUser`, to update Redwood's auth context with the client when it's ready.

- [Customizing the session token](https://docs.redwoodjs.com/docs/auth/clerk/#customizing-the-session-token)
- [Avoiding feature duplication](https://docs.redwoodjs.com/docs/auth/clerk/#avoiding-feature-duplication)
- [Deep dive: the `ClerkStatusUpdater` component](https://docs.redwoodjs.com/docs/auth/clerk/#deep-dive-the-clerkstatusupdater-component)

## Clerk Sinatra Integration
[Skip to main content](https://clerk.com/docs/references/ruby/sinatra#main)

1. [Install `clerk-sdk-ruby`](https://clerk.com/docs/references/ruby/sinatra#install-clerk-sdk-ruby)
2. [Configuration](https://clerk.com/docs/references/ruby/sinatra#configuration)
3. [Add Clerk's Sinatra extension](https://clerk.com/docs/references/ruby/sinatra#add-clerks-sinatra-extension)
4. [Example: Protect routes](https://clerk.com/docs/references/ruby/sinatra#example-protect-routes)
1. [Override the default behavior of the `auth` filter](https://clerk.com/docs/references/ruby/sinatra#override-the-default-behavior-of-the-auth-filter)
5. [Example: Reverification](https://clerk.com/docs/references/ruby/sinatra#example-reverification)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/ruby/sinatra.mdx)

# Sinatra integration

The Clerk Ruby SDK provides a seamless integration with Sinatra through a dedicated extension that gives you access to authentication, user management, and organization management features.

## [Install `clerk-sdk-ruby`](https://clerk.com/docs/references/ruby/sinatra\#install-clerk-sdk-ruby)

The [Clerk Ruby SDK](https://clerk.com/docs/references/ruby/overview) provides a range of backend utilities to simplify user authentication and management in your application.

1. Add the following code to your application's `Gemfile`.Gemfile

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
gem 'clerk-sdk-ruby', require: "clerk"
```

2. Run the following command to install the SDK:terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
$ bundle install
```


## [Configuration](https://clerk.com/docs/references/ruby/sinatra\#configuration)

The configuration object provides a flexible way to configure the SDK. When a configuration value is not explicitly provided, it will fall back to checking the corresponding [environment variable](https://clerk.com/docs/references/ruby/overview#available-environment-variables). You must provide your Clerk Secret Key, which can be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

The following example shows how to set up your configuration object:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
Clerk.configure do |c|
  c.secret_key = `YOUR_SECRET_KEY` # if omitted: ENV["CLERK_SECRET_KEY"] - API calls will fail if unset
  c.logger = Logger.new(STDOUT) # if omitted, no logging
end
```

For more information, see [Faraday's documentation⁠](https://lostisland.github.io/faraday/#/).

## [Add Clerk's Sinatra extension](https://clerk.com/docs/references/ruby/sinatra\#add-clerks-sinatra-extension)

The `clerk` object provides access to the [Ruby SDK's available methods](https://clerk.com/docs/references/ruby/overview#available-methods). To get access to the `clerk` object, you must `register` the `Sinatra::Clerk` extension.

The following example demonstrates how to register the `Sinatra::Clerk` extension and access the user's [`User`⁠](https://github.com/clerk/clerk-http-client-ruby/blob/main/.generated/docs/User.md) object.

app.rb

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
require "clerk/sinatra"
require "sinatra/base"

class App < Sinatra::Base
  register Sinatra::Clerk

  # Access the user's `User` object
  get "/" do
    @user = clerk.user
    erb :index, format: :html5
  end

  run! if app_file == $0
end
```

## [Example: Protect routes](https://clerk.com/docs/references/ruby/sinatra\#example-protect-routes)

The `auth` filter can be added to any route to protect it from unauthenticated users. If a user is not authenticated, by default, `auth` will redirect them to the sign-in page.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
require "clerk/sinatra"
require "sinatra/base"

class App < Sinatra::Base
  register Sinatra::Clerk

  get "/" do
    erb :index, format: :html5
  end

  # Protect the "/admin" route with the `auth` filter
  # If the user is not authenticated, they will be redirected to the sign-in page
  get "/admin", auth: true do
    @user = clerk.user
    erb :admin, format: :html5
  end

  run! if app_file == $0
end
```

### [Override the default behavior of the `auth` filter](https://clerk.com/docs/references/ruby/sinatra\#override-the-default-behavior-of-the-auth-filter)

By default, the `auth` filter will redirect to the sign-in page if the user is not authenticated. You can override this behavior by using `set(:auth)`.

In the following example, the `auth` filter is overridden to redirect to the homepage if the user is not authenticated.

app.rb

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
require "clerk/sinatra"
require "sinatra/base"

class App < Sinatra::Base
  register Sinatra::Clerk

  # Set `auth` to perform custom behavior
  set(:auth) do |active|
    condition do
      # If the user is not authenticated, redirect to the homepage
      if active && !clerk.session
        puts "User is not authenticated, redirecting to the homepage"
        redirect '/'
      end
    end
  end

  get "/" do
    erb :index, format: :html5
  end

  # Protect the "/admin" route with the `auth` filter
  # which will perform the custom behavior set in `set(:auth)`
  get "/admin", auth: true do
    @user = clerk.user
    erb :admin, format: :html5
  end

  run! if app_file == $0
end
```

## [Example: Reverification](https://clerk.com/docs/references/ruby/sinatra\#example-reverification)

For actions requiring additional security, Clerk provides a `reverify` filter that prompts users to re-authenticate. This filter accepts an optional [preset](https://clerk.com/docs/references/ruby/overview#reverification) parameter to customize the reverification requirements.

In the following example, the `/super-secret-admin` or `/chill-admin` routes will be protected from unauthenticated users. If the user is authenticated, they will be required to reverify their session, depending on when they last verified their session.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
require "clerk/sinatra"
require "sinatra/base"

class App < Sinatra::Base
  register Sinatra::Clerk

  get "/" do
    erb :index, format: :html5
  end

  # Protect the "/super-secret-admin" route with the `auth` and `reverify` filters
  # Reverification preset defaults to `STRICT`
  post "/super-secret-admin", auth: true, reverify: true do
    {message: clerk.user? ? "Valid session" : "Not logged in"}.to_json
  end

  # Protect the "/chill-admin" route with the `auth` and `reverify` filters
  # Reverification preset is set to `LAX`
  post "/chill-admin", auth: true, reverify: Clerk::StepUp::Preset::LAX do
    {message: clerk.user? ? "Valid session" : "Not logged in"}.to_json
  end

  run! if app_file == $0
end
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/ruby/sinatra.mdx)

Last updated onJan 28, 2025

Support

## Clerk React Router Guide
[Skip to main content](https://clerk.com/docs/quickstarts/react-router#main)

1. [Install `@clerk/react-router`](https://clerk.com/docs/quickstarts/react-router#install-clerk-react-router)
2. [Set your Clerk API keys](https://clerk.com/docs/quickstarts/react-router#set-your-clerk-api-keys)
3. [Configure `rootAuthLoader()`](https://clerk.com/docs/quickstarts/react-router#configure-root-auth-loader)
4. [Add `<ClerkProvider>` and Clerk components to your app](https://clerk.com/docs/quickstarts/react-router#add-clerk-provider-and-clerk-components-to-your-app)
5. [Create your first user](https://clerk.com/docs/quickstarts/react-router#create-your-first-user)
6. [Next steps](https://clerk.com/docs/quickstarts/react-router#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/react-router.mdx)

# React Router Quickstart

## You will learn the following:

- Install `@clerk/react-router`
- Set your Clerk API keys
- Configure `rootAuthLoader()`
- Add `<ClerkProvider>` and Clerk components

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create a React Router application](https://reactrouter.com/start/framework/installation)

## Example repository

- [React Router Quickstart Repo](https://github.com/clerk/clerk-react-router-quickstart)

This guide assumes that you're using React Router **v7.1.2 or later** in framework mode. To use React Router as a library instead, see the [library mode guide](https://clerk.com/docs/references/react-router/library-mode).

## [Install `@clerk/react-router`](https://clerk.com/docs/quickstarts/react-router\#install-clerk-react-router)

The [Clerk React Router SDK](https://clerk.com/docs/references/react-router/overview) provides prebuilt components, hooks, and helpers to make it easy to integrate authentication and user management in your React Router app.

Run the following command to install the SDK:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm install @clerk/react-router
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @clerk/react-router
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/react-router
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @clerk/react-router
```

## [Set your Clerk API keys](https://clerk.com/docs/quickstarts/react-router\#set-your-clerk-api-keys)

Add the following keys to your `.env` file. These keys can always be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable and Secret Key.
3. Paste your keys into your `.env` file.

The final result should resemble the following:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
VITE_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
CLERK_SECRET_KEY=YOUR_SECRET_KEY
```

## [Configure `rootAuthLoader()`](https://clerk.com/docs/quickstarts/react-router\#configure-root-auth-loader)

The `rootAuthLoader()` function provides access to authentication state in any React Router route.

The following code shows how to add this function to your `root.tsx` file. If you're using [Clerk's React Router quickstart⁠](https://github.com/clerk/clerk-react-router-quickstart) or the [React Router template⁠](https://reactrouter.com/start/framework/installation), most of this code will already be present.

To load additional data or configure options, see the [`rootAuthLoader()`](https://clerk.com/docs/references/react-router/root-auth-loader) reference.

app/root.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { rootAuthLoader } from '@clerk/react-router/ssr.server'
import { isRouteErrorResponse, Links, Meta, Outlet, Scripts, ScrollRestoration } from 'react-router'
import type { Route } from './+types/root'
import stylesheet from './app.css?url'

export async function loader(args: Route.LoaderArgs) {
  return rootAuthLoader(args)
}

export const links: Route.LinksFunction = () => [\
  { rel: 'preconnect', href: 'https://fonts.googleapis.com' },\
  {\
    rel: 'preconnect',\
    href: 'https://fonts.gstatic.com',\
    crossOrigin: 'anonymous',\
  },\
  {\
    rel: 'stylesheet',\
    href: 'https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap',\
  },\
  { rel: 'stylesheet', href: stylesheet },\
]

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  )
}

export default function App() {
  return <Outlet />
}

export function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {
  let message = 'Oops!'
  let details = 'An unexpected error occurred.'
  let stack: string | undefined

  if (isRouteErrorResponse(error)) {
    message = error.status === 404 ? '404' : 'Error'
    details =
      error.status === 404 ? 'The requested page could not be found.' : error.statusText || details
  } else if (import.meta.env.DEV && error && error instanceof Error) {
    details = error.message
    stack = error.stack
  }

  return (
    <main className="pt-16 p-4 container mx-auto">
      <h1>{message}</h1>
      <p>{details}</p>
      {stack && (
        <pre className="w-full p-4 overflow-x-auto">
          <code>{stack}</code>
        </pre>
      )}
    </main>
  )
}
```

Expand code

## [Add `<ClerkProvider>` and Clerk components to your app](https://clerk.com/docs/quickstarts/react-router\#add-clerk-provider-and-clerk-components-to-your-app)

The [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider) component provides session and user context to Clerk's hooks and components. It's recommended to wrap your entire app at the entry point with `<ClerkProvider>` to make authentication globally accessible. See the [reference docs](https://clerk.com/docs/components/clerk-provider) for other configuration options.

It's required to pass `loaderData` to the `<ClerkProvider>` component. This data is provided by the `rootAuthLoader()` function. It's also recommended to pass the `signUpFallbackRedirectUrl` and `signInFallbackRedirectUrl` props to specify the fallback URL to redirect to after the user signs up or signs in, respectively, if there's no `redirect_url` in the path already. [Learn more about customizing how Clerk redirects](https://clerk.com/docs/guides/custom-redirects).

You can control which content signed-in and signed-out users can see with Clerk's [prebuilt control components](https://clerk.com/docs/components/overview#control-components).

The following example adds `<ClerkProvider>` and creates a header using the following Clerk components:

- [`<SignedIn>`](https://clerk.com/docs/components/control/signed-in): Children of this component can only be seen while **signed in**.
- [`<SignedOut>`](https://clerk.com/docs/components/control/signed-out): Children of this component can only be seen while **signed out**.
- [`<UserButton />`](https://clerk.com/docs/components/user/user-button): Shows the signed-in user's avatar. Selecting it opens a dropdown menu with account management options.
- [`<SignInButton />`](https://clerk.com/docs/components/unstyled/sign-in-button): An unstyled component that links to the sign-in page. In this example, since no props or [environment variables](https://clerk.com/docs/deployments/clerk-environment-variables) are set for the sign-in URL, this component links to the [Account Portal sign-in page](https://clerk.com/docs/account-portal/overview#sign-in).

app/root.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
// Other imports

import { ClerkProvider, SignedIn, SignedOut, UserButton, SignInButton } from '@clerk/react-router'

export default function App({ loaderData }: Route.ComponentProps) {
  return (
    <ClerkProvider
      loaderData={loaderData}
      signUpFallbackRedirectUrl="/"
      signInFallbackRedirectUrl="/"
    >
      <header className="flex items-center justify-center py-8 px-4">
        <SignedOut>
          <SignInButton />
        </SignedOut>
        <SignedIn>
          <UserButton />
        </SignedIn>
      </header>
      <main>
        <Outlet />
      </main>
    </ClerkProvider>
  )
}

// Rest of the root.tsx code
```

## [Create your first user](https://clerk.com/docs/quickstarts/react-router\#create-your-first-user)

Run your project with the following command:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm run dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun dev
```

Visit your app's homepage at [`http://localhost:5173`⁠](http://localhost:5173/). Sign up to create your first user.

## [Next steps](https://clerk.com/docs/quickstarts/react-router\#next-steps)

### [Createacustomsign-in-or-uppage](https://clerk.com/docs/references/react-router/custom-sign-in-or-up-page)

Learn how add custom sign-in-or-up page with Clerk components.

### [Readsessionanduserdata](https://clerk.com/docs/references/react-router/read-session-data)

Learn how to use Clerk's hooks and helpers to access the active session and user data in your React Router app.

### [Librarymode](https://clerk.com/docs/references/react-router/library-mode)

Learn how to use Clerk with React Router in library mode to add authentication to your application.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/quickstarts/react-router.mdx)

Last updated onMar 5, 2025

Support

## Firebase and Clerk Integration
[Skip to main content](https://clerk.com/docs/integrations/databases/firebase#main)

1. [Configure the integration](https://clerk.com/docs/integrations/databases/firebase#configure-the-integration)
2. [Enable authentication in Firebase](https://clerk.com/docs/integrations/databases/firebase#enable-authentication-in-firebase)
3. [Add a Security Rule to your Firestore database (optional)](https://clerk.com/docs/integrations/databases/firebase#add-a-security-rule-to-your-firestore-database-optional)
4. [Get your Firebase config object](https://clerk.com/docs/integrations/databases/firebase#get-your-firebase-config-object)
5. [Use Firebase with Clerk in your code](https://clerk.com/docs/integrations/databases/firebase#use-firebase-with-clerk-in-your-code)
6. [Next steps](https://clerk.com/docs/integrations/databases/firebase#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/firebase.mdx)

# Integrate Firebase with Clerk

## You will learn the following:

- Use Clerk to authenticate access to your Firebase data.
- Configure your Firebase Clerk integration.

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Set up a Firebase project with an app](https://support.google.com/firebase/answer/9326094?hl=en)
- [Integrate the appropriate Clerk SDK in your local project](https://clerk.com/docs/quickstarts/overview)

Integrating Firebase with Clerk gives you the benefits of using Firebase's features while leveraging Clerk's authentication, prebuilt components, and webhooks.

Tip

See the [demo repo⁠](https://github.com/clerk/clerk-firebase-nextjs) for a full example of how to integrate Firebase with Clerk in a Next.js app.

## [Configure the integration](https://clerk.com/docs/integrations/databases/firebase\#configure-the-integration)

The Firebase integration enables you to use Clerk to generate a valid authentication token to send to Firebase Auth. This enables you to leverage Clerk's prebuilt components, auth provider options, and more, while accessing Firebase products like Firestore with a session validated by Firebase Auth.

To get enable the integration:

1. In the Clerk Dashboard, navigate to the [**Integrations**⁠](https://dashboard.clerk.com/last-active?path=integrations) page.
2. Toggle the **Firebase** integration on. The configuration modal will appear. Keep this open while you configure your Firebase project.

Next, configure your integration.

Configure automatically (Recommended)

Configure manually

The recommended way to configure your integration is to use a service account key provided by Firebase in order to configure the integration _automatically_. To do so:

1. In your Firebase project, visit [the Service Accounts settings⁠](https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk).
2. Near the bottom of the page, select the **Generate new private key** button.
3. In the modal that pops up, select the **Generate key** button to download the JSON file that contains your service account key.
4. In the Clerk Dashboard, the Firebase configuration modal should still be open. Select the **Upload service account key** button and upload the JSON file you downloaded.
5. The appropriate fields in the configuration modal will be filled in automatically. Select **Apply changes** to save your configuration.

Select the **Configure manually** tab above these instructions if you do not want to use a service account key.

If you want to manually configure your Firebase integration, you must provide Clerk with the following information about your Firebase project:

- **Service account email** – Find this in your Firebase project's [Google Cloud Console⁠](https://console.cloud.google.com/projectselector2/iam-admin/serviceaccounts?consoleUI=FIREBASE&hl=fi&supportedpurview=project), or in the `client_email` field of your service account key JSON file.
- **Firestore project ID** – Find this under **Project Settings** in the Firebase dashboard, or in the `project_id` field of your service account key JSON file.
- **Private Key** – You can [generate this manually⁠](https://firebase.google.com/docs/cloud-messaging/auth-server#:~:text=In%20the%20Firebase%20console%2C%20open,confirm%20by%20clicking%20Generate%20Key.), or find it in the `private_key` field of your service account key JSON file.
- **Firebase database URL** _(Optional)_ – To find this:


- In the Firebase dashboard, select **Realtime Database**
- Select the **Data** tab, and select the copy button to add the database URL to your clipboard.

## [Enable authentication in Firebase](https://clerk.com/docs/integrations/databases/firebase\#enable-authentication-in-firebase)

To use Firebase auth, ensure authentication is enabled in your Firebase dashboard. To do so:

1. Navigate to your Firebase dashboard.
2. In the navigation sidenav, select the **Build** dropdown and select [**Authentication**⁠](https://console.firebase.google.com/u/0/project/_/authentication).
3. Select **Get started**.
4. Enable any sign-in method you want, such as **Email/Password**.

## [Add a Security Rule to your Firestore database (optional)](https://clerk.com/docs/integrations/databases/firebase\#add-a-security-rule-to-your-firestore-database-optional)

Adding the [Cloud Firestore⁠](https://firebase.google.com/docs/firestore/quickstart) feature in your Firebase application is optional.

To use Firestore with Clerk, ensure that you have defined [Security Rules⁠](https://firebase.google.com/docs/firestore/security/get-started) that allow authenticated requests to access your database. For example:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
```

## [Get your Firebase config object](https://clerk.com/docs/integrations/databases/firebase\#get-your-firebase-config-object)

To connect to your Firebase app in your code, you need a config object from your Firebase project. To find it:

1. Visit [your Firebase project settings⁠](https://console.firebase.google.com/project/_/settings/general/).
2. In the **Your apps** section, there should be a code snippet that includes the `firebaseConfig` object. Copy this object. It should look similar to the following:









```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
const firebaseConfig = {
     apiKey: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
     authDomain: 'clerk-example-xxxxx.firebaseapp.com',
     databaseURL: 'https://clerk-example-xxxxx-default-xxxx.firebaseio.com',
     projectId: 'clerk-test-xxxx',
     storageBucket: 'clerk-test-xxxx.appspot.com',
     messagingSenderId: '012345678910',
     appId: '1:012345678:web:abcdef123456hijklm',
     measurementId: 'G-ABC123DEF',
}
```

3. Save this information somewhere secure. You'll need it to connect to your Firebase app.

See [Google's Firebase documentation⁠](https://support.google.com/firebase/answer/7015592) for more information on the config object.

## [Use Firebase with Clerk in your code](https://clerk.com/docs/integrations/databases/firebase\#use-firebase-with-clerk-in-your-code)

Now that you have configured the integration, and you have retrieved your Firebase config object, it's time to use Firebase with Clerk in your code.

The following example:

- Expects the user to be signed into the app with Clerk.
- Creates a button for signing into your Firebase app, which uses Clerk to generate an authentication token for Firebase's API.
- Creates a button for fetching example data from your Firestore database.

This example is written for Next.js App Router, but it can be adapted to any React-based framework.

app/firebase/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'
import { useAuth } from '@clerk/nextjs'
import { initializeApp } from 'firebase/app'
import { getAuth, signInWithCustomToken } from 'firebase/auth'
import { getFirestore } from 'firebase/firestore'
import { doc, getDoc } from 'firebase/firestore'

// Add your Firebase config object
const firebaseConfig = {
  apiKey: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
  authDomain: 'clerk-example-xxxxx.firebaseapp.com',
  databaseURL: 'https://clerk-example-xxxxx-default-xxxx.firebaseio.com',
  projectId: 'clerk-test-xxxx',
  storageBucket: 'clerk-test-xxxx.appspot.com',
  messagingSenderId: '012345678910',
  appId: '1:012345678:web:abcdef123456hijklm',
  measurementId: 'G-ABC123DEF',
}

// Connect to your Firebase app
const app = initializeApp(firebaseConfig)
// Connect to your Firestore database
const db = getFirestore(app)
// Connect to Firebase auth
const auth = getAuth(app)

// Remove this if you do not have Firestore set up
// for your Firebase app
const getFirestoreData = async () => {
  const docRef = doc(db, 'example', 'example-document')
  const docSnap = await getDoc(docRef)
  if (docSnap.exists()) {
    console.log('Document data:', docSnap.data())
  } else {
    // docSnap.data() will be undefined in this case
    console.log('No such document!')
  }
}

export default function FirebaseUI() {
  const { getToken, userId } = useAuth()

  // Handle if the user is not signed in
  // You could display content, or redirect them to a sign-in page
  if (!userId) {
    return <p>You need to sign in with Clerk to access this page.</p>
  }

  const signIntoFirebaseWithClerk = async () => {
    const token = await getToken({ template: 'integration_firebase' })

    const userCredentials = await signInWithCustomToken(auth, token || '')
    // The userCredentials.user object can call the methods of
    // the Firebase platform as an authenticated user.
    console.log('User:', userCredentials.user)
  }

  return (
    <main style={{ display: 'flex', flexDirection: 'column', rowGap: '1rem' }}>
      <button onClick={signIntoFirebaseWithClerk}>Sign in</button>

      {/* Remove this button if you do not have Firestore set up */}
      <button onClick={getFirestoreData}>Get document</button>
    </main>
  )
}
```

## [Next steps](https://clerk.com/docs/integrations/databases/firebase\#next-steps)

### [UsewebhookstosyncFirebasedatawithClerk](https://clerk.com/docs/webhooks/sync-data)

Learn how to sync Firebase auth or Firestore data with Clerk data using webhooks.

### [Createacustomsign-in-or-uppageinyourNext.jsapp](https://clerk.com/docs/references/nextjs/custom-sign-in-or-up-page)

Learn how add custom sign-up and sign-in pages with Clerk components in your Next.js application.

### [Deploytoproduction](https://clerk.com/docs/deployments/overview)

Learn how to deploy your Clerk app to production.

### [DeploytoVercel](https://clerk.com/docs/deployments/deploy-to-vercel)

Learn how to deploy your Clerk app to production on Vercel.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/firebase.mdx)

Last updated onMar 8, 2025

Support

## Organization Profile Customization
[Skip to main content](https://clerk.com/docs/customization/organization-profile#main)

1. [Before you start](https://clerk.com/docs/customization/organization-profile#before-you-start)
2. [Add a custom page](https://clerk.com/docs/customization/organization-profile#add-a-custom-page)
1. [Props](https://clerk.com/docs/customization/organization-profile#props)
2. [Example](https://clerk.com/docs/customization/organization-profile#example)
3. [Add a custom link](https://clerk.com/docs/customization/organization-profile#add-a-custom-link)
1. [Props](https://clerk.com/docs/customization/organization-profile#props-2)
2. [Example](https://clerk.com/docs/customization/organization-profile#example-2)
4. [Reordering default routes](https://clerk.com/docs/customization/organization-profile#reordering-default-routes)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/organization-profile.mdx)

# Add custom pages and links to the `<OrganizationProfile />` component

The [`<OrganizationProfile />`](https://clerk.com/docs/components/organization/organization-profile) component supports the addition of custom pages and external links to the component's sidenav.

## [Before you start](https://clerk.com/docs/customization/organization-profile\#before-you-start)

To access the `<OrganizationProfile />` component, the user must select the [`<OrganizationSwitcher />`](https://clerk.com/docs/components/organization/organization-switcher) component and then select the **Manage Organization** option. The `<OrganizationProfile />` will open as a modal by default. You can also render the component as a dedicated page. This guide includes examples for both use cases. On the code examples, you can select one of the following two tabs to see the implementation for your preferred use case:

- `<OrganizationSwitcher />` tab: By default, the `<OrganizationSwitcher />` sets `organizationProfileMode='modal'`. If you are using the default settings, then you should select this tab.
- `Dedicated page` tab: If you do not want the `<OrganizationProfile />` to open as a modal, then you should select this tab. For these examples, you need to set `organizationProfileMode='navigation'` and `organizationProfileUrl='/organization-profile'` on the `<OrganizationSwitcher />` component.

## [Add a custom page](https://clerk.com/docs/customization/organization-profile\#add-a-custom-page)

To add a custom page to the `<OrganizationProfile />` component, use the `<OrganizationSwitcher.OrganizationProfilePage />` component or the `<OrganizationProfile.Page />` component, depending on your use case.

### [Props](https://clerk.com/docs/customization/organization-profile\#props)

`<OrganizationSwitcher.OrganizationProfilePage />` and `<OrganizationProfile.Page />` accept the following props, all of which are **required**:

- Name`label`Type`string`Description





The name that will be displayed in the navigation sidenav for the custom page.

- Name`labelIcon`Type`React.ReactElement`Description





An icon displayed next to the label in the navigation sidenav.

- Name`url`Type`string`Description





The path segment that will be used to navigate to the custom page. For example, if the `<OrganizationProfile />` component is rendered at `/organization`, then the custom page will be accessed at `/organization/{url}` when using [path routing](https://clerk.com/docs/guides/routing).

- Name`children`Type`React.ReactElement`Description





The content to be rendered inside the custom page.


### [Example](https://clerk.com/docs/customization/organization-profile\#example)

Next.js

JavaScript

Vue

The following example demonstrates two ways that you can render content in a custom page: as a component or as a direct child.

<OrganizationSwitcher />

Dedicated page

app/components/Header.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { OrganizationSwitcher } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

const CustomPage = () => {
  return (
    <div>
      <h1>Custom page</h1>
      <p>This is the content of the custom page.</p>
    </div>
  )
}

const Header = () => (
  <header>
    <OrganizationSwitcher>
      {/* You can pass the content as a component */}
      <OrganizationSwitcher.OrganizationProfilePage
        label="Custom Page"
        url="custom"
        labelIcon={<DotIcon />}
      >
        <CustomPage />
      </OrganizationSwitcher.OrganizationProfilePage>

      {/* You can also pass the content as direct children */}
      <OrganizationSwitcher.OrganizationProfilePage
        label="Terms"
        labelIcon={<DotIcon />}
        url="terms"
      >
        <div>
          <h1>Custom Terms Page</h1>
          <p>This is the content of the custom terms page.</p>
        </div>
      </OrganizationSwitcher.OrganizationProfilePage>
    </OrganizationSwitcher>
  </header>
)

export default Header
```

app/organization-profile/\[\[...organization-profile\]\]/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { OrganizationProfile } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

const CustomPage = () => {
  return (
    <div>
      <h1>Custom page</h1>
      <p>This is the content of the custom page.</p>
    </div>
  )
}

const OrganizationProfilePage = () => (
  <OrganizationProfile path="/organization-profile" routing="path">
    {/* You can pass the content as a component */}
    <OrganizationProfile.Page label="Custom Page" labelIcon={<DotIcon />} url="custom-page">
      <CustomPage />
    </OrganizationProfile.Page>

    {/* You can also pass the content as direct children */}
    <OrganizationProfile.Page label="Terms" labelIcon={<DotIcon />} url="terms">
      <div>
        <h1>Custom Terms Page</h1>
        <p>This is the content of the custom terms page.</p>
      </div>
    </OrganizationProfile.Page>
  </OrganizationProfile>
)

export default OrganizationProfilePage
```

To add custom pages to the `<OrganizationProfile />` component using the [JavaScript SDK](https://clerk.com/docs/references/javascript/overview), pass the `customPages` property to the `mountOrganizationProfile()` or `openOrganizationProfile()` method, as shown in the following example:

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

const pubKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

const clerk = new Clerk(pubKey)
await clerk.load()

document.getElementById('app').innerHTML = `
  <div id="organization-profile"></div>
`

const orgProfileDiv = document.getElementById('organization-profile')

clerk.openOrganizationProfile(orgProfileDiv, {
  customPages: [\
    {\
      url: 'custom-page',\
      label: 'Custom Page',\
      mountIcon: (el) => {\
        el.innerHTML = '👋'\
      },\
      unmountIcon: (el) => {\
        el.innerHTML = ''\
      },\
      mount: (el) => {\
        el.innerHTML = `\
          <h1><b>Custom Page</b></h1>\
          <p>This is the content of the custom page.</p>\
          `\
      },\
      unmount: (el) => {\
        el.innerHTML = ''\
      },\
    },\
    {\
      url: '/other-page',\
      label: 'Other Page',\
      mountIcon: (el) => {\
        el.innerHTML = '🌐'\
      },\
      unmountIcon: (el) => {\
        el.innerHTML = ''\
      },\
    },\
  ],
})
```

<OrganizationSwitcher />

Dedicated page

App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { OrganizationSwitcher } from '@clerk/vue'
</script>

<template>
  <header>
    <OrganizationSwitcher>
      <OrganizationSwitcher.OrganizationProfilePage label="Custom Page" url="custom">
        <template #labelIcon>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
            <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
          </svg>
        </template>
        <div>
          <h1>Custom page</h1>
          <p>This is the content of the custom page.</p>
        </div>
      </OrganizationSwitcher.OrganizationProfilePage>
    </OrganizationSwitcher>
  </header>
</template>
```

pages/organization-profile.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { OrganizationProfile } from '@clerk/vue'
</script>

<template>
  <OrganizationProfile>
    <OrganizationProfile.Page label="Custom Page" url="custom">
      <template #labelIcon>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </template>
      <div>
        <h1>Custom page</h1>
        <p>This is the content of the custom page.</p>
      </div>
    </OrganizationProfile.Page>
  </OrganizationProfile>
</template>
```

## [Add a custom link](https://clerk.com/docs/customization/organization-profile\#add-a-custom-link)

To add an external link to the `<OrganizationProfile />` navigation sidenav, use the `<OrganizationSwitcher.OrganizationProfileLink />` component or the `<OrganizationProfile.Link />` component, depending on your use case.

### [Props](https://clerk.com/docs/customization/organization-profile\#props-2)

`<OrganizationSwitcher.OrganizationProfileLink />` and `<OrganizationProfile.Link />` accept the following props, all of which are **required**:

- Name`label`Type`string`Description





The name that will be displayed in the navigation sidenav for the link.

- Name`labelIcon`Type`React.ReactElement`Description





An icon displayed next to the label in the navigation sidenav.

- Name`url`Type`string`Description





The full URL or path that will be used to navigate to the external link. For path segments, if the `<OrganizationProfile />` component is rendered at `/organization`, then the external link will be accessed at `/organization/{url}` when using [path routing](https://clerk.com/docs/guides/routing).


### [Example](https://clerk.com/docs/customization/organization-profile\#example-2)

The following example adds a custom link to the `<OrganizationProfile />` sidenav that navigates to the homepage.

Next.js

Vue

<OrganizationSwitcher />

Dedicated page

app/components/Header.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { OrganizationSwitcher } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

const Header = () => (
  <header>
    <OrganizationSwitcher>
      <OrganizationSwitcher.OrganizationProfileLink
        label="Homepage"
        url="/"
        labelIcon={<DotIcon />}
      />
    </OrganizationSwitcher>
  </header>
)

export default Header
```

app/organization-profile/\[\[...organization-profile\]\]/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { OrganizationProfile } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

const OrganizationProfilePage = () => (
  <OrganizationProfile path="/organization-profile" routing="path">
    <OrganizationProfile.Link label="Homepage" labelIcon={<DotIcon />} url="/" />
  </OrganizationProfile>
)

export default OrganizationProfilePage
```

<OrganizationSwitcher />

Dedicated page

App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { OrganizationSwitcher } from '@clerk/vue'
</script>

<template>
  <header>
    <OrganizationSwitcher>
      <OrganizationSwitcher.OrganizationProfileLink label="Homepage" url="/">
        <template #labelIcon>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
            <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
          </svg>
        </template>
      </OrganizationSwitcher.OrganizationProfileLink>
    </OrganizationSwitcher>
  </header>
</template>
```

pages/organization-profile.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { OrganizationProfile } from '@clerk/vue'
</script>

<template>
  <OrganizationProfile>
    <OrganizationProfile.Link label="Homepage" url="/">
      <template #labelIcon>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </template>
    </OrganizationProfile.Link>
  </OrganizationProfile>
</template>
```

## [Reordering default routes](https://clerk.com/docs/customization/organization-profile\#reordering-default-routes)

The `<OrganizationProfile />` component includes two default menu items: `Members` and `General`, in that order. You can reorder these default items by setting the `label` prop to `'members'` or `'general'`. This will target the existing default item and allow you to rearrange it.

Note that when reordering default routes, the first item in the navigation sidenav cannot be a custom link.

The following example adds a custom page as the first item in the sidenav, followed by a custom link to the homepage, and then the default members and general pages.

Next.js

Vue

<OrganizationSwitcher />

Dedicated Page

app/components/Header.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { OrganizationSwitcher } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

const CustomPage = () => {
  return (
    <div>
      <h1>Custom page</h1>
      <p>This is the content of the custom page.</p>
    </div>
  )
}

const Header = () => (
  <header>
    <OrganizationSwitcher>
      <OrganizationSwitcher.OrganizationProfilePage
        label="Custom Page"
        url="custom"
        labelIcon={<DotIcon />}
      >
        <CustomPage />
      </OrganizationSwitcher.OrganizationProfilePage>
      <OrganizationSwitcher.OrganizationProfileLink
        label="Homepage"
        url="/"
        labelIcon={<DotIcon />}
      />
      <OrganizationSwitcher.OrganizationProfilePage label="members" />
      <OrganizationSwitcher.OrganizationProfilePage label="general" />
    </OrganizationSwitcher>
  </header>
)

export default Header
```

app/organization-profile/\[\[...organization-profile\]\]/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { OrganizationProfile } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

const CustomPage = () => {
  return (
    <div>
      <h1>Custom page</h1>
      <p>This is the content of the custom page.</p>
    </div>
  )
}

const OrganizationProfilePage = () => (
  <OrganizationProfile>
    <OrganizationProfile.Page label="Custom Page" url="custom" labelIcon={<DotIcon />}>
      <CustomPage />
    </OrganizationProfile.Page>
    <OrganizationProfile.Link label="Homepage" url="/" labelIcon={<DotIcon />} />
    <OrganizationProfile.Page label="members" />
    <OrganizationProfile.Page label="general" />
  </OrganizationProfile>
)

export default OrganizationProfilePage
```

<OrganizationSwitcher />

Dedicated page

App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { OrganizationSwitcher } from '@clerk/vue'
</script>

<template>
  <header>
    <OrganizationSwitcher>
      <OrganizationSwitcher.OrganizationProfilePage label="Custom Page" url="custom">
        <template #labelIcon>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
            <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
          </svg>
        </template>
        <div>
          <h1>Custom page</h1>
          <p>This is the content of the custom page.</p>
        </div>
      </OrganizationSwitcher.OrganizationProfilePage>
      <OrganizationSwitcher.OrganizationProfileLink label="Homepage" url="/">
        <template #labelIcon>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
            <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
          </svg>
        </template>
      </OrganizationSwitcher.OrganizationProfileLink>
      <OrganizationSwitcher.OrganizationProfilePage label="members" />
      <OrganizationSwitcher.OrganizationProfilePage label="general" />
    </OrganizationSwitcher>
  </header>
</template>
```

pages/organization-profile.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { OrganizationProfile } from '@clerk/vue'
</script>

<template>
  <OrganizationProfile>
    <OrganizationProfile.Page label="Custom Page" url="custom">
      <template #labelIcon>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </template>
      <div>
        <h1>Custom page</h1>
        <p>This is the content of the custom page.</p>
      </div>
    </OrganizationProfile.Page>
    <OrganizationProfile.Link label="Homepage" url="/">
      <template #labelIcon>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </template>
    </OrganizationProfile.Link>
    <OrganizationProfile.Page label="members" />
    <OrganizationProfile.Page label="general" />
  </OrganizationProfile>
</template>
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/organization-profile.mdx)

Last updated onFeb 25, 2025

Support

## Clerk Organization API
[Skip to main content](https://clerk.com/docs/references/javascript/organization#main)

1. [Properties](https://clerk.com/docs/references/javascript/organization#properties)
2. [Methods](https://clerk.com/docs/references/javascript/organization#methods)
01. [`addMember()`](https://clerk.com/docs/references/javascript/organization#add-member)
02. [`createDomain()`](https://clerk.com/docs/references/javascript/organization#create-domain)
03. [`destroy()`](https://clerk.com/docs/references/javascript/organization#destroy)
04. [`getDomain()`](https://clerk.com/docs/references/javascript/organization#get-domain)
05. [`getDomains()`](https://clerk.com/docs/references/javascript/organization#get-domains)
06. [`getInvitations()`](https://clerk.com/docs/references/javascript/organization#get-invitations)
07. [`getMemberships()`](https://clerk.com/docs/references/javascript/organization#get-memberships)
08. [`getMembershipRequests()`](https://clerk.com/docs/references/javascript/organization#get-membership-requests)
09. [`getRoles()`](https://clerk.com/docs/references/javascript/organization#get-roles)
10. [`inviteMember()`](https://clerk.com/docs/references/javascript/organization#invite-member)
11. [`inviteMembers()`](https://clerk.com/docs/references/javascript/organization#invite-members)
12. [`removeMember()`](https://clerk.com/docs/references/javascript/organization#remove-member)
13. [`setLogo()`](https://clerk.com/docs/references/javascript/organization#set-logo)
14. [`update()`](https://clerk.com/docs/references/javascript/organization#update)
15. [`updateMember()`](https://clerk.com/docs/references/javascript/organization#update-member)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/javascript/organization.mdx)

# `Organization` object

The `Organization` object holds information about an organization, as well as methods for managing it.

To use these methods, you must have the **Organizations** feature [enabled in your app's settings in the Clerk Dashboard](https://clerk.com/docs/organizations/overview#enable-organizations-in-your-application).

## [Properties](https://clerk.com/docs/references/javascript/organization\#properties)

- Name`id`Type`string`Description





The unique identifier of the related organization.

- Name`name`Type`string`Description





The name of the related organization.

- Name`slug`Type`string | null`Description





The organization slug. If supplied, it must be unique for the instance.

- Name`imageUrl`Type`string`Description





Holds the organization logo or default logo. Compatible with Clerk's [Image Optimization](https://clerk.com/docs/guides/image-optimization).

- Name`hasImage`Type`boolean`Description





A getter boolean to check if the organization has an uploaded image. Returns `false` if Clerk is displaying an avatar for the organization.

- Name`membersCount`Type`number`Description





The number of members the associated organization contains.

- Name`pendingInvitationsCount`Type`number`Description





The number of pending invitations to users to join the organization.

- Name`adminDeleteEnabled`Type`boolean`Description





A getter boolean to check if the admin of the organization can delete it.

- Name`maxAllowedMemberships`Type`number`Description





The maximum number of memberships allowed for the organization.

- Name`createdAt`Type`Date`Description





The date when the organization was created.

- Name`updatedAt`Type`Date`Description





The date when the organization was last updated.

- Name`publicMetadata`Type[`OrganizationPublicMetadata`](https://clerk.com/docs/references/javascript/types/metadata#organization-public-metadata)Description





Metadata that can be read from the Frontend API and [Backend API⁠](https://clerk.com/docs/reference/backend-api) and can be set only from the Backend API.


## [Methods](https://clerk.com/docs/references/javascript/organization\#methods)

### [`addMember()`](https://clerk.com/docs/references/javascript/organization\#add-member)

Adds a user as a member to an organization. A user can only be added to an organization if they are not already a member of it and if they already exist in the same instance as the organization. Only administrators can add members to an organization.

Returns an [`OrganizationMembership`](https://clerk.com/docs/references/javascript/types/organization-membership) object.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function addMember(params: AddMemberParams): Promise<OrganizationMembership>
```

#### [`AddMemberParams`](https://clerk.com/docs/references/javascript/organization\#add-member-params)

- Name`userId`Type`string`Description





The ID of the user to be added as a member to the organization.

- Name`role`Type`string`Description





The [role](https://clerk.com/docs/organizations/roles-permissions) that the user will have in the organization.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await organization.addMember({ userId: 'user_123', role: 'org:admin' })
```

### [`createDomain()`](https://clerk.com/docs/references/javascript/organization\#create-domain)

Creates a new domain for the currently active organization. Returns an [`OrganizationDomain`](https://clerk.com/docs/references/javascript/types/organization-domain) object.

Warning

You must have [**Verified domains**](https://clerk.com/docs/organizations/verified-domains) enabled in your app's settings in the Clerk Dashboard.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function createDomain(domainName: string): Promise<OrganizationDomainResource>
```

#### [Parameters](https://clerk.com/docs/references/javascript/organization\#parameters)

- Name`domainName`Type`string`Description





The domain name that will be added to the organization.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-2)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.createDomain('test-domain.com')
```

### [`destroy()`](https://clerk.com/docs/references/javascript/organization\#destroy)

Deletes the organization. Only administrators can delete an organization.

Deleting an organization will also delete all memberships and invitations. **This is not reversible.**

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function destroy(): Promise<void>
```

#### [Example](https://clerk.com/docs/references/javascript/organization\#example-3)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.destroy()
```

### [`getDomain()`](https://clerk.com/docs/references/javascript/organization\#get-domain)

Retrieves a domain for an organization based on the given domain ID. Returns an [`OrganizationDomain`](https://clerk.com/docs/references/javascript/types/organization-domain) object.

Warning

You must have [**Verified domains**](https://clerk.com/docs/organizations/verified-domains) enabled in your app's settings in the Clerk Dashboard.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function getDomain(params: GetDomainParams): Promise<OrganizationDomain>
```

#### [`GetDomainParams`](https://clerk.com/docs/references/javascript/organization\#get-domain-params)

- Name`domainId`TypestringDescription





The ID of the domain that will be fetched.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-4)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.getDomain({ domainId: 'domain_123' })
```

### [`getDomains()`](https://clerk.com/docs/references/javascript/organization\#get-domains)

Retrieves the list of domains for the currently active organization. Returns a [`ClerkPaginatedResponse`](https://clerk.com/docs/references/javascript/types/clerk-paginated-response) of [`OrganizationDomain`](https://clerk.com/docs/references/javascript/types/organization-domain) objects.

Warning

You must have [**Verified domains**](https://clerk.com/docs/organizations/verified-domains) enabled in your app's settings in the Clerk Dashboard.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function getDomains(params?: GetDomainsParams): Promise<ClerkPaginatedResponse<OrganizationDomain>>
```

#### [`GetDomainsParams`](https://clerk.com/docs/references/javascript/organization\#get-domains-params)

- Name`initialPage?`Type`number`Description





A number that can be used to skip the first n-1 pages. For example, if `initialPage` is set to 10, it is will skip the first 9 pages and will fetch the 10th page.

- Name`pageSize?`Type`number`Description





A number that indicates the maximum number of results that should be returned for a specific page.

- Name`enrollmentMode?`Type`'manual_invitation' | 'automatic_invitation' | 'automatic_suggestion'`Description





An [enrollment mode](https://clerk.com/docs/organizations/verified-domains#enrollment-modes) will change how new users join an organization.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-5)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.getDomains()
```

### [`getInvitations()`](https://clerk.com/docs/references/javascript/organization\#get-invitations)

Retrieves the list of invitations for the currently active organization. Returns a [`ClerkPaginatedResponse`](https://clerk.com/docs/references/javascript/types/clerk-paginated-response) of [`OrganizationInvitation`](https://clerk.com/docs/references/javascript/types/organization-invitation) objects.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function getInvitations(
  params?: GetInvitationsParams,
): Promise<ClerkPaginatedResponse<OrganizationInvitation>>
```

#### [`GetInvitationsParams`](https://clerk.com/docs/references/javascript/organization\#get-invitations-params)

- Name`initialPage?`Type`number`Description





A number that can be used to skip the first n-1 pages. For example, if `initialPage` is set to 10, it is will skip the first 9 pages and will fetch the 10th page.

- Name`pageSize?`Type`number`Description





A number that indicates the maximum number of results that should be returned for a specific page.

- Name`status?`Type`'pending' | 'accepted' | 'revoked'`Description





The status an invitation can have.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-6)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.getInvitations()
```

### [`getMemberships()`](https://clerk.com/docs/references/javascript/organization\#get-memberships)

Retrieves the list of memberships for the currently active organization. Returns a [`ClerkPaginatedResponse`](https://clerk.com/docs/references/javascript/types/clerk-paginated-response) of [`OrganizationMembership`](https://clerk.com/docs/references/javascript/types/organization-membership) objects.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function getMemberships(
  params?: GetMembersParams,
): Promise<ClerkPaginatedResponse<OrganizationMembership>>
```

#### [`GetMembersParams`](https://clerk.com/docs/references/javascript/organization\#get-members-params)

- Name`initialPage?`Type`number`Description





A number that can be used to skip the first n-1 pages. For example, if `initialPage` is set to 10, it is will skip the first 9 pages and will fetch the 10th page.

- Name`pageSize?`Type`number`Description





A number that indicates the maximum number of results that should be returned for a specific page.

- Name`role?`Type`OrganizationCustomRoleKey[]`Description





The [roles](https://clerk.com/docs/organizations/roles-permissions) of memberships that will be included in the response.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-7)

For an example on how to use `getMemberships()`, see the [custom flow on managing organization roles](https://clerk.com/docs/custom-flows/manage-roles).

### [`getMembershipRequests()`](https://clerk.com/docs/references/javascript/organization\#get-membership-requests)

Retrieve the list of membership requests for the currently active organization. Returns a [`ClerkPaginatedResponse`](https://clerk.com/docs/references/javascript/types/clerk-paginated-response) of [`OrganizationMembershipRequest`](https://clerk.com/docs/references/javascript/types/organization-membership)-request) objects.

Warning

You must have [**Organizations**](https://clerk.com/docs/organizations/overview#enable-organizations-in-your-application), and [**Verified domains** and **Automatic suggestion**](https://clerk.com/docs/organizations/verified-domains) enabled in your app's settings in the Clerk Dashboard.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function getMembershipRequests(
  params?: GetMembershipRequestParams,
): Promise<ClerkPaginatedResponse<OrganizationMembershipRequestResource>>
```

#### [`GetMembershipRequestParams`](https://clerk.com/docs/references/javascript/organization\#get-membership-request-params)

- Name`initialPage?`Type`number`Description





A number that can be used to skip the first n-1 pages. For example, if `initialPage` is set to 10, it is will skip the first 9 pages and will fetch the 10th page.

- Name`pageSize?`Type`number`Description





A number that indicates the maximum number of results that should be returned for a specific page.

- Name`status?`Type`string`Description





The status of the membership requests that will be included in the response.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-8)

For an example on how to use `getMembershipRequests()`, see the [custom flow guide on managing membership requests](https://clerk.com/docs/custom-flows/manage-membership-requests).

### [`getRoles()`](https://clerk.com/docs/references/javascript/organization\#get-roles)

Returns a paginated list of roles in the organization. Returns a [`ClerkPaginatedResponse`](https://clerk.com/docs/references/javascript/types/clerk-paginated-response) of [`RoleResource`](https://clerk.com/docs/references/javascript/types/role) objects.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function getRoles(params?: GetRolesParams): Promise<ClerkPaginatedResponse<RoleResource>>
```

#### [`GetRolesParams`](https://clerk.com/docs/references/javascript/organization\#get-roles-params)

- Name`initialPage?`Type`number`Description





A number that can be used to skip the first n-1 pages. For example, if `initialPage` is set to 10, it is will skip the first 9 pages and will fetch the 10th page.

- Name`pageSize?`Type`number`Description





A number that indicates the maximum number of results that should be returned for a specific page.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-9)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.getRoles()
```

### [`inviteMember()`](https://clerk.com/docs/references/javascript/organization\#invite-member)

Creates and sends an invitation to the target email address for becoming a member with the role passed on the function parameters. Returns an [`OrganizationInvitation`](https://clerk.com/docs/references/javascript/types/organization-invitation) object.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function inviteMember(params: InviteMemberParams): Promise<OrganizationInvitation>
```

#### [`InviteMemberParams`](https://clerk.com/docs/references/javascript/organization\#invite-member-params)

- Name`emailAddress`Type`string`Description





The email address to invite.

- Name`role`Type`string`Description





The [role](https://clerk.com/docs/organizations/roles-permissions) of the new member.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-10)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.inviteMember({ emailAddress: 'test@test.com', role: 'org:member' })
```

### [`inviteMembers()`](https://clerk.com/docs/references/javascript/organization\#invite-members)

Creates and sends an invitation to the target email addresses for becoming a member with the role passed in the parameters. Returns an array of [`OrganizationInvitation`](https://clerk.com/docs/references/javascript/types/organization-invitation) objects.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function inviteMembers(params: InviteMembersParams): Promise<OrganizationInvitation[]>
```

#### [`InviteMembersParams`](https://clerk.com/docs/references/javascript/organization\#invite-members-params)

- Name`emailAddresses`Type`string[]`Description





The email addresses to invite.

- Name`role`Type`string`Description





The [role](https://clerk.com/docs/organizations/roles-permissions) of the new members.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-11)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.inviteMembers({
  emailAddresses: ['test@test.com', 'test2@test.com'],
  role: 'org:member',
})
```

### [`removeMember()`](https://clerk.com/docs/references/javascript/organization\#remove-member)

Removes a member from the organization based on the `userId`. Returns an [`OrganizationMembership`](https://clerk.com/docs/references/javascript/types/organization-membership) object.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function removeMember(userId: string): Promise<OrganizationMembership>
```

#### [Parameters](https://clerk.com/docs/references/javascript/organization\#parameters-2)

- Name`userId`Type`string`Description





The ID of the user to remove from the organization.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-12)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await organization.removeMember('user_123')
```

### [`setLogo()`](https://clerk.com/docs/references/javascript/organization\#set-logo)

Sets or replaces an organization's logo. The logo must be an image and its size cannot exceed 10MB. Returns an `Organization` object.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function setLogo(params: SetOrganizationLogoParams): Promise<Organization>
```

#### [`SetOrganizationLogoParams`](https://clerk.com/docs/references/javascript/organization\#set-organization-logo-params)

- Name`file`Type`File | Blob | null`Description





An image file or blob which cannot exceed 10MB. Passing `null` will delete the organization's current logo.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-13)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.setLogo({ file })
```

### [`update()`](https://clerk.com/docs/references/javascript/organization\#update)

Updates an organization's attributes. Returns an `Organization` object.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function update(params: UpdateOrganizationParams): Promise<Organization>
```

#### [`UpdateOrganizationParams`](https://clerk.com/docs/references/javascript/organization\#update-organization-params)

- Name`name`Type`string`Description





The organization name.

- Name`slug?`Type`string | undefined`Description





The organization slug.

- Name`maxAllowedMemberships?`Type`number | undefined`Description





The maximum number of memberships allowed for the organization.

- Name`publicMetadata?`Type[`OrganizationPublicMetadata`](https://clerk.com/docs/references/javascript/types/metadata#organization-public-metadata)Description





Metadata that can be read from both the Frontend API and [Backend API⁠](https://clerk.com/docs/reference/backend-api), but can be set only from the Backend API.

- Name`privateMetadata?`Type[`OrganizationPrivateMetadata`](https://clerk.com/docs/references/javascript/types/metadata#organization-private-metadata)Description





Metadata that is only visible to your [Backend API⁠](https://clerk.com/docs/reference/backend-api).


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-14)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await clerk.organization.update({ name: 'New Name' })
```

### [`updateMember()`](https://clerk.com/docs/references/javascript/organization\#update-member)

Updates a member. Currently, only a user's role can be updated. Returns an [`OrganizationMembership`](https://clerk.com/docs/references/javascript/types/organization-membership) object.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
function updateMember(params: UpdateMembershipParams): Promise<OrganizationMembership>
```

#### [`UpdateMembershipParams`](https://clerk.com/docs/references/javascript/organization\#update-membership-params)

- Name`userId`Type`string`Description





The ID of the user to update.

- Name`role`Type`string`Description





The [role](https://clerk.com/docs/organizations/roles-permissions) of the new member.


#### [Example](https://clerk.com/docs/references/javascript/organization\#example-15)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
await organization.updateMember({ userId: 'user_123', role: 'org:admin' })
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/javascript/organization.mdx)

Last updated onFeb 25, 2025

Support

## InstantDB and Clerk Integration
[Skip to main content](https://clerk.com/docs/integrations/databases/instantdb#main)

1. [Configure your Clerk session token](https://clerk.com/docs/integrations/databases/instantdb#configure-your-clerk-session-token)
2. [Get your Clerk Publishable Key](https://clerk.com/docs/integrations/databases/instantdb#get-your-clerk-publishable-key)
3. [Configure InstantDB](https://clerk.com/docs/integrations/databases/instantdb#configure-instant-db)
4. [Install the InstantDB library](https://clerk.com/docs/integrations/databases/instantdb#install-the-instant-db-library)
5. [Integrate InstantDB to your Clerk application](https://clerk.com/docs/integrations/databases/instantdb#integrate-instant-db-to-your-clerk-application)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/instantdb.mdx)

# Integrate InstantDB with Clerk

## You will learn the following:

- Configure your Clerk session token to include the `email` claim.
- Configure InstantDB to use your Clerk application.
- Integrate InstantDB into your Clerk application.

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Create an InstantDB account](https://instantdb.com/)
- [Integrate the appropriate Clerk SDK in your local project](https://clerk.com/docs/quickstarts/overview)

Important

See the [demo repo⁠](https://github.com/clerk/clerk-instantdb-nextjs) for a full example of how to integrate InstantDB with Clerk in a Next.js app.

Integrating [InstantDB⁠](https://www.instantdb.com/) with Clerk gives you the benefits of using an InstantDB database while leveraging Clerk's authentication, prebuilt components, and webhooks.

This guide will walk you through the steps to integrate InstantDB with Clerk in your Next.js app.

## [Configure your Clerk session token](https://clerk.com/docs/integrations/databases/instantdb\#configure-your-clerk-session-token)

InstantDB uses Clerk's [session token](https://clerk.com/docs/backend-requests/resources/session-tokens) to authenticate users. To use InstantDB with Clerk, you need to include the `email` claim in your session token.

1. In the Clerk Dashboard, navigate to the [**Sessions**⁠](https://dashboard.clerk.com/last-active?path=sessions) page.
2. In the **Customize session token** section, select **Edit**.
3. Add the `email` claim to your session token:









```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
     "email": "{{user.primary_email_address}}"
}
```


You can have additional claims as long as the `email` claim is set to `{{user.primary_email_address}}`.

## [Get your Clerk Publishable Key](https://clerk.com/docs/integrations/databases/instantdb\#get-your-clerk-publishable-key)

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable Key.

## [Configure InstantDB](https://clerk.com/docs/integrations/databases/instantdb\#configure-instant-db)

1. In the InstantDB dashboard, navigate to the [**Auth**⁠](https://www.instantdb.com/dash?t=auth) tab.
2. Select **Setup Clerk**.
3. Add the Publishable Key you copied in the previous step.
4. Confirm the **The session token has the "email" claim.** message.
5. Select **Add Clerk app**.

## [Install the InstantDB library](https://clerk.com/docs/integrations/databases/instantdb\#install-the-instant-db-library)

Run the following command to add the InstantDB library to your project.

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm i @instantdb/react
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @instantdb/react
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @instantdb/react
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @instantdb/react
```

## [Integrate InstantDB to your Clerk application](https://clerk.com/docs/integrations/databases/instantdb\#integrate-instant-db-to-your-clerk-application)

To sign in to InstantDB with Clerk, you need to:

- Initialize InstantDB with your Clerk Publishable Key.
- Use Clerk's `getToken()` helper to get the session for the user that is signed in to Clerk.
- Pass the session to InstantDB's `db.auth.signInWithIdToken()` method in order to sign in to InstantDB. When you call `db.auth.signInWithIdToken()`, InstantDB will verify that the session was signed by your Clerk app. If verified, InstantDB uses the email in the session's claims to sign in, look up your user, or create a new one.

To sign out of the application, call both InstantDB's `db.auth.signOut()` method and Clerk's `signOut()` method.

app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { useAuth } from '@clerk/nextjs'
import { init } from '@instantdb/react'
import { useEffect } from 'react'

// Insert your app ID from https://instantdb.com/dash
const APP_ID = '<YOUR_APP_ID>'
// Use the Clerk client name that you set in the "Auth" tab of the InstantDB dashboard
const CLERK_CLIENT_NAME = 'clerk'

// Initialize InstantDB
const db = init({ appId: APP_ID })

export default function Page() {
  // Use `useAuth()` to get the `getToken()` and `signOut()` methods
  const { getToken, signOut } = useAuth()

  // Create a function to sign in to InstantDB with the Clerk token
  const signInToInstantWithClerkToken = async () => {
    // Get the JWT (token) from Clerk for your signed-in user
    const token = await getToken()

    if (!token) {
      return
    }

    // Create a long-lived session with InstantDB for your Clerk user
    // It will look up the user by email or create a new user with
    // the email provided in the session token
    db.auth.signInWithIdToken({
      clientName: CLERK_CLIENT_NAME,
      idToken: token,
    })
  }

  useEffect(() => {
    signInToInstantWithClerkToken()
  }, [])

  const { isLoading, user, error } = db.useAuth()

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (error) {
    return <div>Error signing in to InstantDB! {error.message}</div>
  }

  if (user) {
    return (
      <div>
        <p>Signed in with InstantDB through Clerk!</p>{' '}
        <button
          onClick={() => {
            // First sign out of InstantDB to clear the InstantDB session
            db.auth.signOut().then(() => {
              // Then, sign out of Clerk to clear the Clerk session
              signOut()
            })
          }}
        >
          Sign out
        </button>
      </div>
    )
  }
  return (
    <div>
      <button onClick={signInToInstantWithClerkToken}>Sign in to InstantDB</button>
    </div>
  )
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/instantdb.mdx)

Last updated onFeb 12, 2025

Support

## Playwright Testing Guide
[Skip to main content](https://clerk.com/docs/testing/playwright/overview#main)

1. [Install `@clerk/testing`](https://clerk.com/docs/testing/playwright/overview#install-clerk-testing)
2. [Set your API keys](https://clerk.com/docs/testing/playwright/overview#set-your-api-keys)
3. [Configure Playwright with Clerk](https://clerk.com/docs/testing/playwright/overview#configure-playwright-with-clerk)
4. [Use `setupClerkTestingToken()`](https://clerk.com/docs/testing/playwright/overview#use-setup-clerk-testing-token)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/testing/playwright/overview.mdx)

# Testing with Playwright

[Playwright⁠](https://playwright.dev/) is an open-source, end-to-end testing framework that automates web application testing across multiple browsers. This guide will help you set up your environment for creating authenticated tests with Clerk, assuming you have some familiarity with both Clerk and Playwright.

Important

See the [demo repo⁠](https://github.com/clerk/clerk-playwright-nextjs) that demonstrates testing a Clerk-powered application using [Testing Tokens](https://clerk.com/docs/testing/overview#testing-tokens). To run the tests, you'll need dev instance Clerk API keys, a test user with username and password, and have username and password authentication enabled in the Clerk Dashboard.

## [Install `@clerk/testing`](https://clerk.com/docs/testing/playwright/overview\#install-clerk-testing)

Clerk's testing package provides integration helpers for popular testing frameworks. Run the following command to install it:

npm

yarn

pnpm

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm i @clerk/testing --save-dev
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add -D @clerk/testing
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @clerk/testing -D
```

## [Set your API keys](https://clerk.com/docs/testing/playwright/overview\#set-your-api-keys)

In your test runner, set your Publishable and Secret Keys as the `CLERK_PUBLISHABLE_KEY` and `CLERK_SECRET_KEY` environment variables, respectively.

To find your keys:

1. In the Clerk Dashboard, navigate to the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page.
2. In the **Quick Copy** section, copy your Clerk Publishable and Secret Keys.

Warning

Ensure that the Secret Key is provided securely to prevent exposure to third parties. For example, if you are using GitHub Actions, refer to [_Using secrets in GitHub Actions_⁠](https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions).

## [Configure Playwright with Clerk](https://clerk.com/docs/testing/playwright/overview\#configure-playwright-with-clerk)

The `clerkSetup()` function obtains a Testing Token when your test suite starts, making it available for all subsequent tests to use. This ensures that you don't have to manually generate a Testing Token for each test.

To configure Playwright with Clerk, call the `clerkSetup()` function in your [global setup file⁠](https://playwright.dev/docs/test-global-setup-teardown), as shown in the following example:

global.setup.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkSetup } from '@clerk/testing/playwright'
import { test as setup } from '@playwright/test'

// Setup must be run serially, this is necessary if Playwright is configured to run fully parallel: https://playwright.dev/docs/test-parallel
setup.describe.configure({ mode: 'serial' })

setup('global setup', async ({}) => {
  await clerkSetup()
})
```

Note

Instead of calling `clerkSetup()`, you can manually set the Testing Token by setting the `CLERK_TESTING_TOKEN` environment variable to the [Testing Token](https://clerk.com/docs/testing/overview#testing-tokens) that you create through the Backend API.

## [Use `setupClerkTestingToken()`](https://clerk.com/docs/testing/playwright/overview\#use-setup-clerk-testing-token)

Now that Playwright is configured with Clerk, you can use the `setupClerkTestingToken()` function to include the Testing Token in individual test cases. This function injects the Testing Token for the specific test, ensuring the test can bypass Clerk's bot detection mechanisms. See the following example:

my-test.spec.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { setupClerkTestingToken } from '@clerk/testing/playwright'
import { test } from '@playwright/test'

test('sign up', async ({ page }) => {
  await setupClerkTestingToken({ page })

  await page.goto('/sign-up')
  // Add additional test logic here
})
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/testing/playwright/overview.mdx)

Last updated onFeb 13, 2025

Support

## Deploy Expo Apps
[Skip to main content](https://clerk.com/docs/deployments/deploy-expo#main)

1. [Acquire a domain](https://clerk.com/docs/deployments/deploy-expo#acquire-a-domain)
2. [Configure your Expo app](https://clerk.com/docs/deployments/deploy-expo#configure-your-expo-app)
3. [Deploy to production](https://clerk.com/docs/deployments/deploy-expo#deploy-to-production)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/deploy-expo.mdx)

# Deploy an Expo app to production

There are a few caveats to deploying production Expo applications with Clerk. This guide will walk you through the steps to deploy your Expo app to production.

## [Acquire a domain](https://clerk.com/docs/deployments/deploy-expo\#acquire-a-domain)

Before deploying your Expo app to production, you must acquire a domain. Even though there may not be a web application associated with an Expo app, Clerk still requires a domain for production instances.

## [Configure your Expo app](https://clerk.com/docs/deployments/deploy-expo\#configure-your-expo-app)

With Clerk, you can [add OAuth flows in your Expo applications](https://clerk.com/docs/custom-flows/oauth-connections).

Clerk ensures that security critical nonces will be passed only to allowlisted URLs when the OAuth flow is complete in native browsers or webviews.

So for maximum security in your production instances, you need to allowlist the SSO callback URL:

1. In the Clerk Dashboard, navigate to the [**SSO connections**⁠](https://dashboard.clerk.com/last-active?path=user-authentication/sso-connections) page.
2. Scroll to the **Allowlist for mobile SSO redirect** section and add your redirect URLs.


- The default is `<INSERT-YOUR-APP-SCHEME>://sso-callback`

Tip

You can also add redirect URLs via [the Backend API⁠](https://clerk.com/docs/reference/backend-api/tag/Redirect-URLs#operation/CreateRedirectURL).

## [Deploy to production](https://clerk.com/docs/deployments/deploy-expo\#deploy-to-production)

Now that you have acquired a domain and configured your Expo app, you can follow [the Clerk deployment guide](https://clerk.com/docs/deployments/overview).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/deploy-expo.mdx)

Last updated onFeb 4, 2025

Support

## Next.js Authentication Guide
[Skip to main content](https://clerk.com/docs/references/nextjs/auth#main)

1. [`auth.protect()`](https://clerk.com/docs/references/nextjs/auth#auth-protect)
1. [Example](https://clerk.com/docs/references/nextjs/auth#example)
2. [`redirectToSignIn()`](https://clerk.com/docs/references/nextjs/auth#redirect-to-sign-in)
1. [Example](https://clerk.com/docs/references/nextjs/auth#example-2)
3. [`auth()` usage](https://clerk.com/docs/references/nextjs/auth#auth-usage)
1. [Protect pages and routes](https://clerk.com/docs/references/nextjs/auth#protect-pages-and-routes)
2. [Check roles and permissions](https://clerk.com/docs/references/nextjs/auth#check-roles-and-permissions)
3. [Data fetching with `getToken()`](https://clerk.com/docs/references/nextjs/auth#data-fetching-with-get-token)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/nextjs/auth.mdx)

# `auth()`

The `auth()` helper returns the [`Auth`](https://clerk.com/docs/references/backend/types/auth-object) object of the currently active user, as well as the [`redirectToSignIn()`](https://clerk.com/docs/references/nextjs/auth#redirect-to-sign-in) method.

- Only available for App Router.
- Only works on the server-side, such as in Server Components, Route Handlers, and Server Actions.
- Requires [`clerkMiddleware()`](https://clerk.com/docs/references/nextjs/clerk-middleware) to be configured.

## [`auth.protect()`](https://clerk.com/docs/references/nextjs/auth\#auth-protect)

`auth` includes a single property, the `protect()` method, which you can use in two ways:

- to check if a user is authenticated (signed in)
- to check if a user is authorized (has the correct roles or permissions) to access something, such as a component or a route handler

The following table describes how `auth.protect()` behaves based on user authentication or authorization status:

| Authenticated | Authorized | `auth.protect()` will |
| --- | --- | --- |
| Yes | Yes | Return the [`Auth`](https://clerk.com/docs/references/backend/types/auth-object) object. |
| Yes | No | Return a `404` error. |
| No | No | Redirect the user to the sign-in page\*. |

Important

For non-document requests, such as API requests, `auth.protect()` returns a `404` error to users who aren't authenticated.

`auth.protect()` accepts the following parameters:

- Name`role?`Type`string`Description





The role to check for.

- Name`permission?`Type`string`Description





The permission to check for.

- Name`has?`Type`(isAuthorizedParams: CheckAuthorizationParamsWithCustomPermissions) => boolean`Description





A function that checks if the user has an organization role or custom permission. See the [reference](https://clerk.com/docs/references/backend/types/auth-object#has) for more information.

- Name`unauthorizedUrl?`Type`string`Description





The URL to redirect the user to if they are not authorized.

- Name`unauthenticatedUrl?`Type`string`Description





The URL to redirect the user to if they are not authenticated.


### [Example](https://clerk.com/docs/references/nextjs/auth\#example)

`auth.protect()` can be used to check if a user is authenticated or authorized to access certain parts of your application or even entire routes. See detailed examples in the [dedicated guide](https://clerk.com/docs/organizations/verify-user-permissions).

## [`redirectToSignIn()`](https://clerk.com/docs/references/nextjs/auth\#redirect-to-sign-in)

The `auth()` helper returns the `redirectToSignIn()` method, which you can use to redirect the user to the sign-in page.

`redirectToSignIn()` accepts the following parameters:

- Name`returnBackUrl?`Type`string | URL`Description





The URL to redirect the user back to after they sign in.


Note

`auth()` on the server-side can only access redirect URLs defined via [environment variables](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) or [`clerkMiddleware` dynamic keys](https://clerk.com/docs/references/nextjs/clerk-middleware#dynamic-keys).

### [Example](https://clerk.com/docs/references/nextjs/auth\#example-2)

The following example shows how to use `redirectToSignIn()` to redirect the user to the sign-in page if they are not authenticated. It's also common to use `redirectToSignIn()` in `clerkMiddleware()` to protect entire routes; see [the `clerkMiddleware()` docs](https://clerk.com/docs/references/nextjs/clerk-middleware) for more information.

app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { auth } from '@clerk/nextjs/server'

export default async function Page() {
  const { userId, redirectToSignIn } = await auth()

  if (!userId) return redirectToSignIn()

  return <h1>Hello, {userId}</h1>
}
```

## [`auth()` usage](https://clerk.com/docs/references/nextjs/auth\#auth-usage)

### [Protect pages and routes](https://clerk.com/docs/references/nextjs/auth\#protect-pages-and-routes)

You can use `auth()` to check if a `userId` exists. If it's null, then there is not an authenticated (signed in) user. See detailed examples in the [dedicated guide](https://clerk.com/docs/references/nextjs/read-session-data).

### [Check roles and permissions](https://clerk.com/docs/references/nextjs/auth\#check-roles-and-permissions)

You can use `auth()` to check if a user is authorized to access certain parts of your application or even entire routes by checking their roles or permissions. See detailed examples in the [dedicated guide](https://clerk.com/docs/organizations/verify-user-permissions).

### [Data fetching with `getToken()`](https://clerk.com/docs/references/nextjs/auth\#data-fetching-with-get-token)

If you need to send a JWT along to a server, `getToken()` retrieves the current user's [session token](https://clerk.com/docs/backend-requests/resources/session-tokens) or a [custom JWT template](https://clerk.com/docs/backend-requests/jwt-templates). See detailed examples in the [`Auth` reference](https://clerk.com/docs/references/backend/types/auth-object#get-token).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/nextjs/auth.mdx)

Last updated onFeb 25, 2025

Support

## Email Deliverability Tips
[Skip to main content](https://clerk.com/docs/troubleshooting/email-deliverability#main)

1. [Best practices](https://clerk.com/docs/troubleshooting/email-deliverability#best-practices)
2. [Deliverability factors](https://clerk.com/docs/troubleshooting/email-deliverability#deliverability-factors)
1. [IP address reputation and blocklists](https://clerk.com/docs/troubleshooting/email-deliverability#ip-address-reputation-and-blocklists)
2. [Domain name reputation](https://clerk.com/docs/troubleshooting/email-deliverability#domain-name-reputation)
3. [Setup a real email address](https://clerk.com/docs/troubleshooting/email-deliverability#setup-a-real-email-address)
4. [Email content](https://clerk.com/docs/troubleshooting/email-deliverability#email-content)
5. [SPF and DKIM email authentication](https://clerk.com/docs/troubleshooting/email-deliverability#spf-and-dkim-email-authentication)
6. [Email traps](https://clerk.com/docs/troubleshooting/email-deliverability#email-traps)
7. [Setup DMARC email authentication](https://clerk.com/docs/troubleshooting/email-deliverability#setup-dmarc-email-authentication)
3. [Known provider-related issues](https://clerk.com/docs/troubleshooting/email-deliverability#known-provider-related-issues)
1. [Gmail](https://clerk.com/docs/troubleshooting/email-deliverability#gmail)
2. [Microsoft (Hotmail / Outlook / Office365)](https://clerk.com/docs/troubleshooting/email-deliverability#microsoft-hotmail-outlook-office365)
4. [Managing your own email delivery](https://clerk.com/docs/troubleshooting/email-deliverability#managing-your-own-email-delivery)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/troubleshooting/email-deliverability.mdx)

# Email deliverability

A lot goes into making sure verification emails make it to your customers as quickly as possible. Clerk uses every best practice, and is proactive about monitoring verification email deliverability and speed. Behind the scenes, Clerk uses [Sendgrid⁠](https://sendgrid.com/) using a pool of dedicated IP addresses to ensure that our reputation stays perfect.

In development instances, all emails are sent from `@accounts.dev` domain. In production instances, they are sent from your own domain e.g. `@example.com`.

During production instance set up, Clerk will have you set up the required records to configure `SPF`, `DKIM`, and `DMARC` for security and deliverability.

## [Best practices](https://clerk.com/docs/troubleshooting/email-deliverability\#best-practices)

Following the practices below will allow emails to be delivered quickly and reliably:

- Refrain from sending any spam from your domain
- Set up an inbox for your domain's "from" address
- Try sending email verification codes instead of verification links
- Use Clerk's default emails
- Make sure DMARC is set up

## [Deliverability factors](https://clerk.com/docs/troubleshooting/email-deliverability\#deliverability-factors)

Email deliverability is made of a number of factors, each contributing to whether or not it will get classified as spam, quarantined, or delayed.

### [IP address reputation and blocklists](https://clerk.com/docs/troubleshooting/email-deliverability\#ip-address-reputation-and-blocklists)

Email providers check against a pool of IP addresses and domain blocklists to protect against bad actors. Clerk is constantly monitoring to make sure our IP addresses are not on any of these lists. If you're experiencing issues, it may be helpful to verify that your domain doesn't live on any of these lists.

### [Domain name reputation](https://clerk.com/docs/troubleshooting/email-deliverability\#domain-name-reputation)

Every domain name (i.e. `example.com`, `clerk.com`, etc.) has its own reputation score. Newer domains do not have a high score, and this may impact deliverability.

### [Setup a real email address](https://clerk.com/docs/troubleshooting/email-deliverability\#setup-a-real-email-address)

Email providers will check if there's an actual mailbox behind the "from address" of an email. By default, Clerk will send your emails from [notifications@yourdomain.com](mailto:notifications@yourdomain.com). You should make sure that you set up a mailbox at this email address. If you'd like to use a different "from address", you can change its value via our [Backend API⁠](https://clerk.com/docs/reference/backend-api/tag/Beta-Features#operation/UpdateInstanceAuthConfig).

### [Email content](https://clerk.com/docs/troubleshooting/email-deliverability\#email-content)

The email content is scanned by email providers, so this also plays a crucial role in determining if an email clears spam filters. Clerk's default verification email copy is optimized based on trial and error, so, make modifications to the default template at your own risk. However, minor changes are usually ok.

### [SPF and DKIM email authentication](https://clerk.com/docs/troubleshooting/email-deliverability\#spf-and-dkim-email-authentication)

These records are set up during production instance initialization and tell email providers which servers and domains are authorized to send emails on behalf of your organization. They also add a digital signature to every outgoing message, which lets providers verify that emails were indeed sent from you. Almost all email providers look for these to be set as a strong signal of legitimacy. Clerk handles these records for you automatically.

### [Email traps](https://clerk.com/docs/troubleshooting/email-deliverability\#email-traps)

Because a lot of bad actors send spam to large, programmatically generated lists, mailbox providers have set up "email traps". If you send to one of these trap email addresses, it will get you flagged, and heavily ding your domain or IP address. Because we only send verification emails, it is very unlikely that Clerk will fall into one of these traps. Out of necessity mailbox providers do not advertise which addresses are "traps".

### [Setup DMARC email authentication](https://clerk.com/docs/troubleshooting/email-deliverability\#setup-dmarc-email-authentication)

DMARC, or "Domain-based Message Authentication, Reporting & Conformance", should also be set up on your domain. If an email ever fails one of the above checks, email providers will act based on the settings you choose here. In order to set up a DMARC policy, you will need to add a TXT record to your domain. The following is an example DMARC policy that Clerk uses for its own emails.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
TXT Record

name:
_dmarc<.example.com>

content:
v=DMARC1; p=reject; pct=100; rua=mailto:you@example.com; ruf=mailto:you@example.com;
```

This policy will reject all emails that weren't sent from you. There are other [policies⁠](https://dmarc.org/overview/) that you can use.

## [Known provider-related issues](https://clerk.com/docs/troubleshooting/email-deliverability\#known-provider-related-issues)

Despite all precautions, emails still sometimes end up in spam or quarantined. It's worth noting that if you're running into these issues, it's likely not a unique situation. Trying to figure out what is going wrong is a painful process, and some email providers are notoriously opaque and overly aggressive with their spam filters. This is always frustrating, especially when it comes to verification emails. While the following provider-related issues are common, following the steps listed at the top of this document is very likely to get your emails delivered to these inboxes. The two main culprits we've run into are as follows.

### [Gmail](https://clerk.com/docs/troubleshooting/email-deliverability\#gmail)

The most common issue with Clerk's verification emails is that they are "delayed" for roughly 4 minutes. This only happens with email addresses that are part of Google Workspace due to their ["pre-delivery message scanning."⁠](https://apps.google.com/supportwidget/articlehome?hl=en&article_url=https%3A%2F%2Fsupport.google.com%2Fa%2Fanswer%2F7380368%3Fhl%3Den&product_context=7380368&product_name=UnuFlow&trigger_context=a) To further debug email issues with Gmail, you should sign up for [Gmail's postmaster tools⁠](https://www.gmail.com/postmaster/).

### [Microsoft (Hotmail / Outlook / Office365)](https://clerk.com/docs/troubleshooting/email-deliverability\#microsoft-hotmail-outlook-office365)

Microsoft Defender's aggressive anti-spam filters are the most common reason that verification emails might not reach certain Outlook inboxes.

In the event that an email does not reach an Outlook recipient at all, this most likely means they are placed in Quarantine and the workspace's administrator has been able to restore it. If you encounter this issue, try switching to OTP codes instead of email links, since they tend to have better deliverability with Outlook.

Another thing you can do is sign up for [Sender Support⁠](https://sendersupport.olc.protection.outlook.com/snds/FAQ.aspx), and make sure you're following all of their best practices.

## [Managing your own email delivery](https://clerk.com/docs/troubleshooting/email-deliverability\#managing-your-own-email-delivery)

If you would like to handle the delivery of these messages yourself, you can opt out of Clerk's email and SMS delivery on a **per-template basis**. To do this:

1. Navigate to the [Clerk Dashboard](https://clerk.com/docs/troubleshooting/email-deliverability).
2. In the navigation sidenav, select **Customization** and then select which option you would like to manage: **Emails** or **SMS**.
3. Select the template you would like to manage.
4. Disable **Delivered by Clerk**.

Note

There is currently no way to disable Clerk's email and SMS delivery for all templates at once.

Once Clerk delivery is disabled, in order to handle the delivery of a email or SMS message, you will need to enable [webhooks](https://clerk.com/docs/webhooks/overview) and listen for the `email.created` or `sms.created` events, respectively.

The event contains both the original message that Clerk would send, in case you would like to use it as-is, or the necessary metadata for you to create messages with your own copywriting. For instance, for a verification code email, the `email.created` event will contain the `otp_code`, which you can then use in your own messaging.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/troubleshooting/email-deliverability.mdx)

Last updated onFeb 25, 2025

Support

## Neon Postgres Integration
[Skip to main content](https://clerk.com/docs/integrations/databases/neon#main)

1. [Create a new Next.js project](https://clerk.com/docs/integrations/databases/neon#create-a-new-next-js-project)
2. [Integrate the Next.js Clerk SDK](https://clerk.com/docs/integrations/databases/neon#integrate-the-next-js-clerk-sdk)
3. [Protect your application routes](https://clerk.com/docs/integrations/databases/neon#protect-your-application-routes)
4. [Set your neon connection string](https://clerk.com/docs/integrations/databases/neon#set-your-neon-connection-string)
5. [Set up the application schema and database connection](https://clerk.com/docs/integrations/databases/neon#set-up-the-application-schema-and-database-connection)
6. [Push the schema to the database](https://clerk.com/docs/integrations/databases/neon#push-the-schema-to-the-database)
7. [Create Server Actions to handle user interactions](https://clerk.com/docs/integrations/databases/neon#create-server-actions-to-handle-user-interactions)
8. [Create the UI for the Home Page](https://clerk.com/docs/integrations/databases/neon#create-the-ui-for-the-home-page)
9. [Run the application](https://clerk.com/docs/integrations/databases/neon#run-the-application)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/neon.mdx)

# Integrate Neon Postgres with Clerk

## You will learn the following:

- Use Clerk to authenticate access to your application backed by Neon.

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Set up a Neon project in the Neon console](https://console.neon.tech/)

This tutorial demonstrates how to integrate Neon Postgres with Clerk in a Next.js application, using `drizzle-orm` and `drizzle-kit` to interact with the database. The tutorial guides you through setting up a simple application that enables users to add, view, and delete messages using Server Actions and Middleware with Clerk.

## [Create a new Next.js project](https://clerk.com/docs/integrations/databases/neon\#create-a-new-next-js-project)

1. Create a new Next.js project using the following command:terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npx create-next-app clerk-neon-example --typescript --eslint --tailwind --use-npm --no-src-dir --app --import-alias "@/*"
```

2. Navigate to the project directory and install the required dependencies:terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
cd clerk-neon-example
npm install @neondatabase/serverless
npm install drizzle-orm --legacy-peer-deps
npm install -D drizzle-kit
```


## [Integrate the Next.js Clerk SDK](https://clerk.com/docs/integrations/databases/neon\#integrate-the-next-js-clerk-sdk)

Follow the [Next.js quickstart](https://clerk.com/docs/quickstarts/nextjs) to integrate the Clerk Next.js SDK into your application.

## [Protect your application routes](https://clerk.com/docs/integrations/databases/neon\#protect-your-application-routes)

To ensure that only authenticated users can access your application, modify [`clerkMiddleware`](https://clerk.com/docs/references/nextjs/clerk-middleware) to require authentication for every route.

middleware.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkMiddleware } from '@clerk/nextjs/server'

export default clerkMiddleware(async (auth) => {
  await auth.protect()
})

export const config = {
  matcher: [\
    // Skip Next.js internals and all static files, unless found in search params\
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\
    // Always run for API routes\
    '/(api|trpc)(.*)',\
  ],
}
```

## [Set your neon connection string](https://clerk.com/docs/integrations/databases/neon\#set-your-neon-connection-string)

Add the Neon connection string to your project's environment variables. You can find the Neon connection string in the [Neon console⁠](https://console.neon.tech/) \- see the [Neon docs⁠](https://neon.tech/docs/connect/connect-from-any-app) for more information.

Your environment variable file should have the following values:

.env

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
DATABASE_URL=NEON_DB_CONNECTION_STRING
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=YOUR_PUBLISHABLE_KEY
CLERK_SECRET_KEY=YOUR_SECRET_KEY
```

## [Set up the application schema and database connection](https://clerk.com/docs/integrations/databases/neon\#set-up-the-application-schema-and-database-connection)

1. Inside the `app/`, create a `db/` directory.

2. Create a `schema.ts` file in the `db/` directory that defines the database schema. The schema will include a table called `user_messages` with the columns `user_id`, `create_ts`, and `message`.The `user_id` column will be used to store the user's Clerk ID.


app/db/schema.ts

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { pgTable, text, timestamp } from 'drizzle-orm/pg-core'

export const UserMessages = pgTable('user_messages', {
     user_id: text('user_id').primaryKey().notNull(),
     createTs: timestamp('create_ts').defaultNow().notNull(),
     message: text('message').notNull(),
})
```

3. Create an `index.ts` file in the `db` directory to set up the database connection.


app/db/index.ts

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { loadEnvConfig } from '@next/env'
import { neon } from '@neondatabase/serverless'
import { drizzle } from 'drizzle-orm/neon-http'
import { UserMessages } from './schema'

loadEnvConfig(process.cwd())

if (!process.env.DATABASE_URL) {
     throw new Error('DATABASE_URL must be a Neon postgres connection string')
}

const sql = neon(process.env.DATABASE_URL)
export const db = drizzle(sql, {
     schema: { UserMessages },
})
```


## [Push the schema to the database](https://clerk.com/docs/integrations/databases/neon\#push-the-schema-to-the-database)

1. To load the schema into the database, create a `drizzle.config.ts` file at the root of your project and add the following configuration:


drizzle.config.ts

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { defineConfig } from 'drizzle-kit'
import { loadEnvConfig } from '@next/env'

loadEnvConfig(process.cwd())

if (!process.env.DATABASE_URL) {
     throw new Error('DATABASE_URL must be a Neon postgres connection string')
}

export default defineConfig({
     dialect: 'postgresql',
     dbCredentials: {
       url: process.env.DATABASE_URL,
     },
     schema: './app/db/schema.ts',
})
```

2. Run the following command to push the schema to the database:


terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npx drizzle-kit push
```


## [Create Server Actions to handle user interactions](https://clerk.com/docs/integrations/databases/neon\#create-server-actions-to-handle-user-interactions)

To handle form submissions for adding and deleting user messages, create two Server Actions in `app/actions.ts`. Use Clerk's [`auth()` helper](https://clerk.com/docs/references/nextjs/auth) to obtain the user ID, which will be used to interact with the database.

app/actions.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use server'

import { auth } from '@clerk/nextjs/server'
import { UserMessages } from './db/schema'
import { db } from './db'
import { eq } from 'drizzle-orm'

export async function createUserMessage(formData: FormData) {
  const { userId } = await auth()
  if (!userId) throw new Error('User not found')

  const message = formData.get('message') as string
  await db.insert(UserMessages).values({
    user_id: userId,
    message,
  })
}

export async function deleteUserMessage() {
  const { userId } = await auth()
  if (!userId) throw new Error('User not found')

  await db.delete(UserMessages).where(eq(UserMessages.user_id, userId))
}
```

## [Create the UI for the Home Page](https://clerk.com/docs/integrations/databases/neon\#create-the-ui-for-the-home-page)

In your `app/page.tsx` file, add the following code to create the UI for the home page. If a message exists, the user can view and delete it; otherwise, they can add a new message.

To retrieve the user's messages, use Clerk's [`auth()` helper](https://clerk.com/docs/references/nextjs/auth) to obtain the user's ID. Then, use this ID to query the database for the user's messages.

To enable the user to delete or add a message, use the `deleteUserMessage()` and `createUserMessage()` actions created in the previous step.

app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { createUserMessage, deleteUserMessage } from './actions'
import { db } from './db'
import { auth } from '@clerk/nextjs/server'

export default async function Home() {
  const { userId } = await auth()
  if (!userId) throw new Error('User not found')
  const existingMessage = await db.query.UserMessages.findFirst({
    where: (messages, { eq }) => eq(messages.user_id, userId),
  })

  return (
    <main>
      <h1>Neon + Clerk Example</h1>
      {existingMessage ? (
        <div>
          <p>{existingMessage.message}</p>
          <form action={deleteUserMessage}>
            <button>Delete Message</button>
          </form>
        </div>
      ) : (
        <form action={createUserMessage}>
          <input type="text" name="message" placeholder="Enter a message" />
          <button>Save Message</button>
        </form>
      )}
    </main>
  )
}
```

## [Run the application](https://clerk.com/docs/integrations/databases/neon\#run-the-application)

Run your application and open `http://localhost:3000` in your browser. Sign in with Clerk and interact with the application to add and delete user messages.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/neon.mdx)

Last updated onFeb 25, 2025

Support

## Nhost and Clerk Integration
[Skip to main content](https://clerk.com/docs/integrations/databases/nhost#main)

1. [Configure Nhost](https://clerk.com/docs/integrations/databases/nhost#configure-nhost)
1. [With custom signing key](https://clerk.com/docs/integrations/databases/nhost#with-custom-signing-key)
2. [Configure the providers](https://clerk.com/docs/integrations/databases/nhost#configure-the-providers)
3. [Configure your GraphQL client](https://clerk.com/docs/integrations/databases/nhost#configure-your-graph-ql-client)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/nhost.mdx)

# Integrate Nhost with Clerk

The first step is to create a new Clerk application from the Clerk Dashboard if you haven’t done so already. You can choose whichever authentication strategy and social sign-in providers you prefer. For more information, see the [setup guide](https://clerk.com/docs/quickstarts/setup-clerk).

After your Clerk application has been created, navigate to the [**JWT templates**⁠](https://dashboard.clerk.com/last-active?path=jwt-templates) page in the Clerk Dashboard. Select **New template** to create a new template based on Nhost.

![The JWT templates page in the Clerk Dashboard. The 'New template' button was clicked, and a pop up titled 'New JWT template' is shown. The 'Nhost' template is hovered over](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Fnhost%2Fjwt-template.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

Once the Nhost template is created, you will be redirected to the template's page. You can now configure the template to your needs.

![The 'Create new template' page of the JWT templates page in the Clerk Dashboard](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Fnhost%2Fcreate-template.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

The Nhost template will pre-populate the default claims required by Nhost and Hasura. You can include additional claims as necessary. [Shortcodes](https://clerk.com/docs/backend-requests/jwt-templates#shortcodes) are available to make adding dynamic user values easy.

![The 'Create new template' page of the JWT templates page in the Clerk Dashboard. The page is scrolled down to the 'Claims' section](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Fnhost%2Ftemplate-shortcodes.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## [Configure Nhost](https://clerk.com/docs/integrations/databases/nhost\#configure-nhost)

The next step is to provide Nhost with the public keys used to verify the JWT issued by Clerk. Assuming you didn’t use a custom signing key, set the **JWKS Endpoint** field to the JSON Web Key Set (JWKS) URL Clerk automatically created with your Frontend API at `https://<YOUR_FRONTEND_API>/.well-known/jwks.json`

You can find the **JWKS URL** on the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

From your Nhost dashboard, navigate to **Settings** --\> **Environment variables**.

![The Environment variables page in the Nhost dashboard](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Fintegrations%2Fnhost%2Fnhost-env-var.webp&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

Next to the **NHOST\_JWT\_SECRET**, select **Edit** and paste in the **JWKS URL** that you copied from the Clerk Dashboard.

### [With custom signing key](https://clerk.com/docs/integrations/databases/nhost\#with-custom-signing-key)

If you used a custom signing key, instead of providing the `jwk_url`, you need to provide the algorithm `type` and `key` as a JSON object in the `NHOST_JWT_SECRET` field.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{ "type": "HS256", "key": "<YOUR_SIGNING_KEY>" }
```

## [Configure the providers](https://clerk.com/docs/integrations/databases/nhost\#configure-the-providers)

Both Nhost and Clerk have Provider components that are required to wrap your React application to provide the authentication context.

This is how you would set up a Next.js application using both Providers:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { NhostNextProvider, NhostClient } from '@nhost/nextjs'
import { ClerkProvider, RedirectToSignIn, SignedIn, SignedOut } from '@clerk/nextjs'

const nhost = new NhostClient({
  subdomain: process.env.NEXT_PUBLIC_NHOST_SUBDOMAIN || '',
  region: process.env.NEXT_PUBLIC_NHOST_REGION || '',
})

function MyApp({ Component, pageProps }) {
  return (
    <NhostNextProvider nhost={nhost} initial={pageProps.nhostSession}>
      <ClerkProvider {...pageProps}>
        <SignedIn>
          <Component {...pageProps} />
        </SignedIn>
        <SignedOut>
          <RedirectToSignIn />
        </SignedOut>
      </ClerkProvider>
    </NhostNextProvider>
  )
}

export default MyApp
```

## [Configure your GraphQL client](https://clerk.com/docs/integrations/databases/nhost\#configure-your-graph-ql-client)

GraphQL clients (such as [Apollo Client⁠](https://github.com/apollographql/apollo-client) and [Relay⁠](https://github.com/facebook/relay)) can help with querying and caching your data. They can also manage UI state, keep data in sync, and boost performance. GraphQL requests can be to the Hasura backend using different clients.

The last step of integrating Clerk as the modern web authentication solution for Hasura is to pass the JWT in the `Authorization` header with your requests. You can access the token generated with the Hasura claims by calling `getToken({ template: <your-template-name> })` on the `Session` object with the name of your template.

Even if you don’t have a database table set up yet, we can make use of the [built-in GraphQL introspection system⁠](https://graphql.org/learn/introspection/) to validate that the authenticated requests are working properly.

Here is an example of using [Apollo Client⁠](https://github.com/apollographql/apollo-client) in conjunction with the [`useAuth()`](https://clerk.com/docs/hooks/use-auth) hook in a Next.js application to make a request to the Hasura GraphQL endpoint:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { ApolloProvider, ApolloClient, HttpLink, from, InMemoryCache } from '@apollo/client'
import { setContext } from '@apollo/client/link/context'
import { useAuth } from '@clerk/nextjs'

export const ApolloProviderWrapper = ({ children }) => {
  const { getToken } = useAuth()
  const apolloClient = useMemo(() => {
    const authMiddleware = setContext(async (req, { headers }) => {
      const token = await user.getToken({ template: 'template' })
      return {
        headers: {
          ...headers,
          authorization: `Bearer ${token}`,
        },
      }
    })

    const httpLink = new HttpLink({
      uri: process.env.GRAPHQL_URI,
    })

    return new ApolloClient({
      link: from([authMiddleware, httpLink]),
      cache: new InMemoryCache(),
    })
  }, [getToken])

  return <ApolloProvider client={apolloClient}>{children}</ApolloProvider>
}
```

As an alternative, here is an example of using [Fetch API⁠](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) in conjunction with the [useSWR⁠](https://swr.vercel.app/) hook in a Next.js application to make a request to the Hasura GraphQL endpoint:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { useAuth } from '@clerk/nextjs'
import useSWR from 'swr'

export default function Home() {
  const { getToken } = useAuth()
  const subdomain = process.env.NEXT_PUBLIC_NHOST_SUBDOMAIN
  const endpoint = `https://${subdomain}.nhost.run/v1/graphql`
  const query = `query { __schema { types { name } } }`
  const fetcher = async (...args) =>
    fetch(...args, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
        Authorization: `Bearer ${await getToken({ template: 'nhost' })}`,
      },
      body: JSON.stringify({ query }),
    }).then((res) => res.json())

  const { data } = useSWR(endpoint, fetcher)

  return <p>GraphQL schema has {data?.data?.__schema.types.length} types</p>
}
```

Note that the `getToken({ template: <your-template-name> })` call is asynchronous and returns a Promise that needs to be resolved before accessing the token value. This token is short-lived for better security and should be called before every request to your GraphQL API. The caching and refreshing of the token is handled automatically by Clerk.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/nhost.mdx)

Last updated onMar 8, 2025

Support

## Sign-up Errors Guide
[Skip to main content](https://clerk.com/docs/errors/sign-up#main)

1. [`SignUpNotFound`](https://clerk.com/docs/errors/sign-up#sign-up-not-found)
2. [`SignUpForbiddenAccess`](https://clerk.com/docs/errors/sign-up#sign-up-forbidden-access)
3. [`SignUpCannotBeUpdated`](https://clerk.com/docs/errors/sign-up#sign-up-cannot-be-updated)
4. [`CaptchaNotEnabled`](https://clerk.com/docs/errors/sign-up#captcha-not-enabled)
5. [`CaptchaInvalid`](https://clerk.com/docs/errors/sign-up#captcha-invalid)
6. [`SignUpOutdatedVerification`](https://clerk.com/docs/errors/sign-up#sign-up-outdated-verification)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/sign-up.mdx)

# Sign-up errors

An index of Clerk errors related to sign-up.

## [`SignUpNotFound`](https://clerk.com/docs/errors/sign-up\#sign-up-not-found)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Sign up not found",
  "longMessage": "No sign up was found with id %s",
  "code": "resource_not_found"
}
```

## [`SignUpForbiddenAccess`](https://clerk.com/docs/errors/sign-up\#sign-up-forbidden-access)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Sign up forbidden",
  "longMessage": "Access to this sign up is forbidden",
  "code": "resource_forbidden"
}
```

## [`SignUpCannotBeUpdated`](https://clerk.com/docs/errors/sign-up\#sign-up-cannot-be-updated)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Sign up cannot be updated",
  "longMessage": "This sign up has reached a terminal state and cannot be updated",
  "code": "sign_up_cannot_be_updated"
}
```

## [`CaptchaNotEnabled`](https://clerk.com/docs/errors/sign-up\#captcha-not-enabled)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "CAPTCHA not enabled",
  "longMessage": "Bot detection can be applied only for instances which have enabled CAPTCHA.",
  "code": "captcha_not_enabled"
}
```

## [`CaptchaInvalid`](https://clerk.com/docs/errors/sign-up\#captcha-invalid)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Invalid token",
  "code": "captcha_invalid"
}
```

## [`SignUpOutdatedVerification`](https://clerk.com/docs/errors/sign-up\#sign-up-outdated-verification)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Outdated verification",
  "longMessage": "There is a more recent verification pending for this signup. Try attempting the verification again.",
  "code": "sign_up_outdated_verification"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/sign-up.mdx)

Last updated onDec 5, 2024

Support

## Account Portal Overview
[Skip to main content](https://clerk.com/docs/account-portal/overview#main)

1. [Why use the Account Portal?](https://clerk.com/docs/account-portal/overview#why-use-the-account-portal)
2. [How the Account Portal works](https://clerk.com/docs/account-portal/overview#how-the-account-portal-works)
3. [Hosted pages](https://clerk.com/docs/account-portal/overview#hosted-pages)
1. [Sign-in](https://clerk.com/docs/account-portal/overview#sign-in)
2. [Sign-up](https://clerk.com/docs/account-portal/overview#sign-up)
3. [User profile](https://clerk.com/docs/account-portal/overview#user-profile)
4. [Unauthorized sign-in](https://clerk.com/docs/account-portal/overview#unauthorized-sign-in)
5. [Create organization](https://clerk.com/docs/account-portal/overview#create-organization)
6. [Organization profile](https://clerk.com/docs/account-portal/overview#organization-profile)
7. [Waitlist](https://clerk.com/docs/account-portal/overview#waitlist)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/account-portal/overview.mdx)

# Account Portal overview

The Account Portal in Clerk is a powerful feature that allows you to streamline the sign-in, sign-up, and profile management experience for your users, without having to build your own components or host your own pages. **To integrate the Account Portal with your application, see the [setup guide](https://clerk.com/docs/account-portal/getting-started).**

![Account Portal](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Faccount_portal_splash.png&w=2048&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## [Why use the Account Portal?](https://clerk.com/docs/account-portal/overview\#why-use-the-account-portal)

The Account Portal provides the pages necessary for your users to sign-up, sign-in, and manage their accounts, all while maintaining seamless integration with your application. These pages are hosted on Clerk servers for you and they require minimal setup to get started. If you're looking for the fastest way to add authentication and user management to your application, then this is a great choice.

However, if you require more precise customization or prefer having your application self-contained, then you can use Clerk's fully customizable [prebuilt components](https://clerk.com/docs/components/overview), or you can build your own [custom user interface using the Clerk API](https://clerk.com/docs/custom-flows/overview).

## [How the Account Portal works](https://clerk.com/docs/account-portal/overview\#how-the-account-portal-works)

The Account Portal uses Clerk's [prebuilt components](https://clerk.com/docs/components/overview), which are embedded into dedicated pages hosted on Clerk servers.

![Account Portal](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Faccount_portal_how_it_works.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

After a user has finished their flow in an Account Portal page, Clerk automatically redirects them back to your application along with the required authentication context. This way, users are automatically redirected to and from your application for a seamless experience.

For each application environment, Clerk provides pages for sign-up, sign-in, user profile, organization profile, and organization creation flow. **To integrate the Account Portal with your application, see the [setup guide](https://clerk.com/docs/account-portal/getting-started).**

Important

These pages cannot be customized beyond the options provided in the [Clerk Dashboard⁠](https://dashboard.clerk.com/). If you need more customization such as [localization](https://clerk.com/docs/customization/localization), consider using [prebuilt components](https://clerk.com/docs/components/overview) or building your own [custom user interface](https://clerk.com/docs/custom-flows/overview).

## [Hosted pages](https://clerk.com/docs/account-portal/overview\#hosted-pages)

### [Sign-in](https://clerk.com/docs/account-portal/overview\#sign-in)

The sign-in page hosts the prebuilt [`<SignIn />`](https://clerk.com/docs/components/authentication/sign-in) component, which renders a UI for signing in users. The functionality of the `<SignIn />` component is controlled by the instance settings you specify in the [Clerk Dashboard⁠](https://dashboard.clerk.com/), such as [sign-up and sign-in options](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options) and [social connections](https://clerk.com/docs/authentication/social-connections/oauth).

![The Account Portal sign-in page hosts the <SignIn /> component](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Fsign-in.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

Redirect users to the sign-in page using the [`<RedirectToSignIn />`](https://clerk.com/docs/components/control/redirect-to-signin) control component.

### [Sign-up](https://clerk.com/docs/account-portal/overview\#sign-up)

The sign-up page hosts the prebuilt [`<SignUp />`](https://clerk.com/docs/components/authentication/sign-up) component, which renders a UI for signing up users. The functionality of the `<SignUp />` component is controlled by the instance settings you specify in the [Clerk Dashboard⁠](https://dashboard.clerk.com/), such as [sign-up and sign-in options](https://clerk.com/docs/authentication/configuration/sign-up-sign-in-options) and [social connections](https://clerk.com/docs/authentication/social-connections/oauth).

![The Account Portal sign-up page hosts the <SignUp /> component](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Fsign-up.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

Redirect users to the sign-up page using the [`<RedirectToSignUp />`](https://clerk.com/docs/components/control/redirect-to-signup) control component.

### [User profile](https://clerk.com/docs/account-portal/overview\#user-profile)

The user profile page hosts the prebuilt [`<UserProfile />`](https://clerk.com/docs/components/user/user-profile) component, which renders a beautiful, full-featured account management UI that allows users to manage their profile and security settings.

![The Account Portal user profile page hosts the <UserProfile /> component](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Fuser-profile.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

Redirect your authenticated users to their user profile page using the [`<RedirectToUserProfile />`](https://clerk.com/docs/components/control/redirect-to-userprofile) control component.

### [Unauthorized sign-in](https://clerk.com/docs/account-portal/overview\#unauthorized-sign-in)

The unauthorized sign-in page doesn't host any prebuilt Clerk component. It displays a UI confirming that a session from an unrecognized device was successfully revoked. For more information, see the [Unauthorized sign-in](https://clerk.com/docs/security/unauthorized-sign-in) feature.

The unauthorized sign-in page displays a UI confirming that a session from an unrecognized device was successfully revoked. For more information, refer to [the reference.](https://clerk.com/docs/security/unauthorized-sign-in)

![Clerk's Account Portal unauthorized sign-in page](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Funauthorized-sign-in.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

### [Create organization](https://clerk.com/docs/account-portal/overview\#create-organization)

The create organization page hosts the prebuilt [`<CreateOrganization />`](https://clerk.com/docs/components/organization/create-organization) component, which provides a streamlined interface for users to create new organizations within your application.

![The Account Portal create organization page hosts the <CreateOrganization /> component](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Fcreate-org.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

Redirect your authenticated users to the create organization page using the [`<RedirectToCreateOrganization />`](https://clerk.com/docs/components/control/redirect-to-createorganization) control component.

### [Organization profile](https://clerk.com/docs/account-portal/overview\#organization-profile)

The user profile page hosts the prebuilt [`<OrganizationProfile />`](https://clerk.com/docs/components/organization/organization-profile) component, which renders a beautiful, full-featured organization management UI that allows users to manage their organization profile and security settings.

![The Account Portal organization profile page hosts the <OrganizationProfile /> component](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Forg-profile.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

Redirect your authenticated users to their organization profile page using the [`<RedirectToOrganizationProfile />`](https://clerk.com/docs/components/control/redirect-to-organizationprofile) control component.

### [Waitlist](https://clerk.com/docs/account-portal/overview\#waitlist)

The waitlist page hosts the prebuilt [`<Waitlist />`](https://clerk.com/docs/components/waitlist) component which renders a form that allows users to join for early access to your app.

![The Account Portal waitliste page hosts the <Waitlist /> component](https://clerk.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2F_docs%2Fmain%2Faccount-portal%2Fwaitlist.png&w=3840&q=75&dpl=dpl_8HhDdVEqAWWFf2Tw1GfL34ibFaov)

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/account-portal/overview.mdx)

Last updated onMar 8, 2025

Support

## useReverification Hook
[Skip to main content](https://clerk.com/docs/hooks/use-reverification#main)

1. [Parameters](https://clerk.com/docs/hooks/use-reverification#parameters)
1. [`UseReverificationOptions`](https://clerk.com/docs/hooks/use-reverification#use-reverification-options)
2. [Returns](https://clerk.com/docs/hooks/use-reverification#returns)
3. [How to use the `useReverification()` hook](https://clerk.com/docs/hooks/use-reverification#how-to-use-the-use-reverification-hook)
1. [Handle cancellation of the reverification process](https://clerk.com/docs/hooks/use-reverification#handle-cancellation-of-the-reverification-process)
2. [Handle `throwOnCancel`](https://clerk.com/docs/hooks/use-reverification#handle-throw-on-cancel)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/hooks/use-reverification.mdx)

# useReverification()

Warning

This feature is currently in public beta. **It is not recommended for production use**.

Depending on the SDK you're using, this feature requires `@clerk/nextjs@6.5.0` or later, `@clerk/clerk-react@5.17.0` or later, and `@clerk/clerk-js@5.35.0` or later.

The `useReverification()` hook is used to handle a session's reverification flow. If a request requires reverification, a modal will display, prompting the user to verify their credentials. Upon successful verification, the original request will automatically retry.

## [Parameters](https://clerk.com/docs/hooks/use-reverification\#parameters)

- Name`fetcher`Type`Fetcher extends (...args: any[]) => Promise<any>`Description





The fetcher function.

- Name`options?`Type[`UseReverificationOptions`](https://clerk.com/docs/hooks/use-reverification#use-reverification-options)Description





The optional options object.


### [`UseReverificationOptions`](https://clerk.com/docs/hooks/use-reverification\#use-reverification-options)

- Name`onCancel?`Type`() ⇒ void`Description





A callback function that is invoked when the user cancels the reverification process.

- Name`throwOnCancel?`Type`boolean`Description





Determines if an error should throw when the user cancels the reverification process. Defaults to `false`.


## [Returns](https://clerk.com/docs/hooks/use-reverification\#returns)

The `useReverification()` hook returns an array with the "enhanced" fetcher.

## [How to use the `useReverification()` hook](https://clerk.com/docs/hooks/use-reverification\#how-to-use-the-use-reverification-hook)

### [Handle cancellation of the reverification process](https://clerk.com/docs/hooks/use-reverification\#handle-cancellation-of-the-reverification-process)

The following example demonstrates how to handle scenarios where a user cancels the reverification flow, such as closing the modal, which might result in `myData` being `null`.

In the following example, `myFetcher` would be a function in your backend that fetches data from the route that requires reverification. See the [guide on how to require reverification](https://clerk.com/docs/guides/reverification) for more information.

React

Next.js

src/components/MyButton.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { useReverification } from '@clerk/react'

export function MyButton() {
  const [enhancedFetcher] = useReverification(myFetcher)

  const handleClick = async () => {
    const myData = await enhancedFetcher()
    // If `myData` is null, the user canceled the reverification process
    // You can choose how your app responds. This example returns null.
    if (!myData) return
  }

  return <button onClick={handleClick}>Update User</button>
}
```

### [Handle `throwOnCancel`](https://clerk.com/docs/hooks/use-reverification\#handle-throw-on-cancel)

When `throwOnCancel` is set to `true`, the fetcher will throw a `ClerkRuntimeError` with the code `"reverification_cancelled"` if the user cancels the reverification flow (for example, by closing the modal). This error can be caught and handled according to your app's needs. For example, by displaying a toast notification to the user or silently ignoring the cancellation.

In this example, `myFetcher` would be a function in your backend that fetches data from the route that requires reverification. See the [guide on how to require reverification](https://clerk.com/docs/guides/reverification) for more information.

React

Next.js

src/components/MyButton.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { useReverification } from '@clerk/clerk-react'
import { isClerkRuntimeError } from '@clerk/clerk-react/errors'

export function MyButton() {
  const [enhancedFetcher] = useReverification(myFetcher, { throwOnCancel: true })

  const handleClick = async () => {
    try {
      const myData = await enhancedFetcher()
    } catch (e) {
      // Handle if user cancels the reverification process
      if (isClerkRuntimeError(e) && e.code === 'reverification_cancelled') {
        console.error('User cancelled reverification', e.code)
      }
    }
  }

  return <button onClick={handleClick}>Update user</button>
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/hooks/use-reverification.mdx)

Last updated onMar 10, 2025

Support

## Roles and Permissions
[Skip to main content](https://clerk.com/docs/organizations/roles-permissions#main)

1. [Roles](https://clerk.com/docs/organizations/roles-permissions#roles)
1. [Default roles](https://clerk.com/docs/organizations/roles-permissions#default-roles)
2. [Custom role](https://clerk.com/docs/organizations/roles-permissions#custom-role)
3. [The Default role for members](https://clerk.com/docs/organizations/roles-permissions#the-default-role-for-members)
4. [The **Creator** role](https://clerk.com/docs/organizations/roles-permissions#the-creator-role)
2. [Permissions](https://clerk.com/docs/organizations/roles-permissions#permissions)
1. [System permissions](https://clerk.com/docs/organizations/roles-permissions#system-permissions)
2. [Custom permissions](https://clerk.com/docs/organizations/roles-permissions#custom-permissions)
3. [Next steps](https://clerk.com/docs/organizations/roles-permissions#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/roles-permissions.mdx)

# Roles and permissions

Clerk supports modeling your own custom role and permissions to control access to resources within your application when you use [organizations](https://clerk.com/docs/organizations/overview).

## [Roles](https://clerk.com/docs/organizations/roles-permissions\#roles)

Roles determine a user's level of access to the organization. You can extend a role's privileges and access to resources by adding [permissions](https://clerk.com/docs/organizations/roles-permissions#permissions).

### [Default roles](https://clerk.com/docs/organizations/roles-permissions\#default-roles)

For each instance, there are currently two default roles:

- **Admin ( `org:admin`)** \- Offers full access to organization resources. Members with the admin role have all the [System Permissions](https://clerk.com/docs/organizations/roles-permissions#system-permissions). They can fully manage the organization and organization memberships.
- **Member ( `org:member`)** \- Offers limited access to organization resources. Access to organization resources is limited to the "Read members" permission only, by default. They cannot manage the organization and organization memberships, but they can view information about other members in it.

Note

If you enabled organizations for your application before December 2023, the **Admin** role is `admin` and the **Member** role is `basic_member`, instead of `org:admin` and `org:member`, respectively.

### [Custom role](https://clerk.com/docs/organizations/roles-permissions\#custom-role)

You can create up to 10 custom organization roles per application instance to meet your application needs. If you need more than 10 roles, [contact support⁠](https://clerk.com/contact/support).

Custom roles can be granted permissions and access. For example, you can create a new role of **Billing** ( `org:billing`) which can be used to group users who belong to a specific department of the organization and have permission to manage credit card information, invoices, and other resources related to billing.

To learn more about creating custom roles, see the [Create roles and permissions](https://clerk.com/docs/organizations/create-roles-permissions) guide.

### [The Default role for members](https://clerk.com/docs/organizations/roles-permissions\#the-default-role-for-members)

The **Default** role for members is the role that users are initially assigned as a new organization member. Initially, this role is the **Member** ( `org:member`) role. This is the role that is used as a pre-filled default for invitations in `<OrganizationProfile />` and for organization enrollment with [verified domains](https://clerk.com/docs/organizations/verified-domains).

Warning

You can't delete a role if it's used as the organization's **Default** role. However, you can [reassign the **Default** role to another role](https://clerk.com/docs/organizations/default-role).

### [The **Creator** role](https://clerk.com/docs/organizations/roles-permissions\#the-creator-role)

When a user creates a new organization, that user is automatically added as the organization's first member and is assigned the **Creator** role. By default, **Admin** ( `org:admin`) is the **Creator** role.

Warning

You can't delete a role if it's used as the organization's **Creator** role. However, you can [reassign the **Creator** role to another role](https://clerk.com/docs/organizations/creator-role).

## [Permissions](https://clerk.com/docs/organizations/roles-permissions\#permissions)

Permissions grant users privileged access to resources and operations, like creating and deleting. Clerk supports two types of permissions: System and Custom.

### [System permissions](https://clerk.com/docs/organizations/roles-permissions\#system-permissions)

Clerk provides a set of system permissions that power [Clerk's Frontend API⁠](https://clerk.com/docs/reference/frontend-api) and [organization-related Clerk components](https://clerk.com/docs/components/overview#organization-components). These permissions serve as the baseline required for Clerk to operate effectively.

Clerk's system permissions consist of the following:

- Manage Organization ( `org:sys_profile:manage`)
- Delete Organization ( `org:sys_profile:delete`)
- Read members ( `org:sys_memberships:read`)
- Manage members ( `org:sys_memberships:manage`)
- Read domains ( `org:sys_domains:read`)
- Manage domains ( `org:sys_domains:manage`)

You can assign these system permissions to any role.

Warning

System permissions aren't included in [session claims](https://clerk.com/docs/backend-requests/resources/session-tokens#default-session-claims). To check permissions on the server-side, you must [create custom permissions](https://clerk.com/docs/organizations/create-roles-permissions).

### [Custom permissions](https://clerk.com/docs/organizations/roles-permissions\#custom-permissions)

When creating a new permission, follow the format `org:<resource>:<action>`. You can then assign the permission to an existing role.

For example, you could create a new role called **Sales** ( `org:sales`) and a new permission called **Create invoices** ( `org:invoices:create`) which allows only users with this permission to edit invoices. You could also grant this permission to the **Billing** role.

To learn more about creating custom permissions, see the [Create roles and permissions](https://clerk.com/docs/organizations/create-roles-permissions) guide.

## [Next steps](https://clerk.com/docs/organizations/roles-permissions\#next-steps)

- [Learn how to create roles and permissions in the Clerk Dashboard](https://clerk.com/docs/organizations/create-roles-permissions)
- [Learn how to use roles and permissions to limit the content a user can see with the prebuilt `<Protect>` component](https://clerk.com/docs/components/protect)
- [Learn how to allow and limit access to resources by role and permissions](https://clerk.com/docs/organizations/verify-user-permissions)
- [Learn how to reassign the **Creator** role](https://clerk.com/docs/organizations/creator-role)

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/roles-permissions.mdx)

Last updated onJan 7, 2025

Support

## Clerk SDK Terminology
[Skip to main content](https://clerk.com/docs/references/sdk/terminology#main)

1. [Cookies](https://clerk.com/docs/references/sdk/terminology#cookies)
1. [Development instance cookies](https://clerk.com/docs/references/sdk/terminology#development-instance-cookies)
2. [Production instance cookies](https://clerk.com/docs/references/sdk/terminology#production-instance-cookies)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/sdk/terminology.mdx)

# Terminology

A consistent terminology should be used across all user interactions with Clerk's services (e.g., SDKs, documentation, dashboard, error messages, support). The following list includes the most common terms and their explanations. Use these terms in your SDKs, documentation, and support materials.

| Name | Description |
| --- | --- |
| Client | A [client⁠](https://clerk.com/docs/references/javascript/client) represents the current device or software accessing an application such as your web browser, native application, Chrome Extension, or Electron app. |
| Session | A [session⁠](https://clerk.com/docs/references/javascript/session) is a secure representation of the authentication state of the current user. Each client can hold multiple sessions on the same device. This is identical to how Gmail works in a browser. |
| User | A user represents the current user of the session. The [`User`⁠](https://clerk.com/docs/references/javascript/user) object holds all the basic user information e.g. name, email addresses, phone numbers, etc… including their public, private, and unsafe metadata. |
| Organization | An [organization⁠](https://clerk.com/docs/references/javascript/organization) represents the current organization of the session. Users can belong to many organizations. One of them will be the [active organization](https://clerk.com/docs/organizations/overview#active-organization) of the session. |
| FAPI | [Frontend API of Clerk⁠](https://clerk.com/docs/reference/frontend-api). Example: `https://random-name.clerk.accounts.dev` (Production example: `https://clerk.yourdomain.com`). FAPI is the primary API for Clerk’s UI components. Every Clerk development/production instance has a dedicated FAPI. This is the authentication, session, user & organization management API you or your users will interact with. |
| BAPI | [Backend API of Clerk⁠](https://clerk.com/docs/reference/backend-api). Currently set to `https://api.clerk.com`. A restful CRUD API for the server-side. |
| Secret Key | Your app’s Secret Key for use in the backend. Do not expose this on the frontend with a public environment variable. Allows for CRUD operations. |
| Publishable Key | Your app’s Publishable Key for use in the frontend. |
| Instances | When creating an app, you’re provided with two instances: Development and Production. [Learn more](https://clerk.com/docs/deployments/environments). |
| Hotloading ClerkJS | `@clerk/clerk-js`, or ClerkJS, is the foundational JavaScript library for all frontend JS SDKs, e.g. used in `@clerk/clerk-react`. When you install `@clerk/clerk-react` through npm, you don’t install `@clerk/clerk-js`. Instead, once the React code is executed in the browser, the React SDK adds a `<script>` tag to load ClerkJS from a CDN. Clerk internally calls this “hotloading”. |
| UI components | All components displayed in the [component reference](https://clerk.com/docs/components/overview) and available through the [`Clerk`](https://clerk.com/docs/references/javascript/clerk) class. |
| Authorization header verification | This refers to the HTTP Authorization request header. Clerk uses this HTTP header instead of the `__client` cookie for secure communication with the FAPI in non-standard web browser environments. For example, in React Native apps, Chrome extensions, and hybrid apps like Electron, the `__client` JWT will be stored in a secure storage provided by the platform and injected into the HTTP header of each FAPI request. |
| Handshake | The client handshake is a mechanism that is used to resolve a request’s authentication state from “unknown” to definitively signed in or signed out. Clerk’s session management architecture relies on a short-lived session JWT to validate requests, along with a long-lived session that is used to keep the session JWT fresh by interacting with the FAPI. The long-lived session token is stored in an `HttpOnly` cookie associated with the FAPI domain. If a short-lived session JWT is expired on a request to an application’s backend, the SDK doesn’t know if the session has ended, or if a new short-lived JWT needs to be issued. When an SDK gets into this state, it triggers the handshake. |

## [Cookies](https://clerk.com/docs/references/sdk/terminology\#cookies)

Clerk is using cookies in order to keep user sessions alive. It's useful to know about these when debugging issues.

### [Development instance cookies](https://clerk.com/docs/references/sdk/terminology\#development-instance-cookies)

| Cookie Name | Description |
| --- | --- |
| `__clerk_db_jwt` | The **Development Browser JWT**. Helps Clerk sync the session between the development instance domain, `localhost`, and the Clerk FAPI and Account Portal domain, `https://name.accounts.dev`. |
| `__client_uat` | `uat` stands for **Updated At** and helps Clerk to check if the user session is still valid. It is set by `clerk-js` on the client-side. |
| `__session` | A short-lived session JWT to validate requests in your application or your API. |

### [Production instance cookies](https://clerk.com/docs/references/sdk/terminology\#production-instance-cookies)

| Cookie Name | Description |
| --- | --- |
| `__client` | This is a long-lived `HttpOnly` cookie that is used to issue short-lived session JWTs. It is set by the Clerk FAPI. |
| `__client_uat` | `uat` stands for **Updated At** and helps Clerk to check if the user session is still valid. It is set by the Clerk FAPI. |
| `__session` | A short-lived session JWT to validate requests in your application or your API. |

Clerk is using other non-persistent cookies (e.g. `__clerk_handshake`) for internal mechanisms but for the sake of creating a new SDK from scratch, you don't need to worry about those.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/sdk/terminology.mdx)

Last updated onFeb 21, 2025

Support

## Clerk JavaScript SDK
[Skip to main content](https://clerk.com/docs/references/javascript/overview#main)

1. [Installation](https://clerk.com/docs/references/javascript/overview#installation)
2. [Main objects](https://clerk.com/docs/references/javascript/overview#main-objects)
1. [`Clerk`](https://clerk.com/docs/references/javascript/overview#clerk)
2. [`Client`](https://clerk.com/docs/references/javascript/overview#client)
3. [`Session`](https://clerk.com/docs/references/javascript/overview#session)
4. [`User`](https://clerk.com/docs/references/javascript/overview#user)
5. [`SignIn`](https://clerk.com/docs/references/javascript/overview#sign-in)
6. [`SignUp`](https://clerk.com/docs/references/javascript/overview#sign-up)
7. [`Organization`](https://clerk.com/docs/references/javascript/overview#organization)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/javascript/overview.mdx)

# Clerk JavaScript SDK

The Clerk JavaScript SDK, or ClerkJS, is our foundational JavaScript library for building user management and authentication. It enables you to register, sign in, verify, and manage users for your application using highly customizable flows. It powers the other JavaScript SDKs, such as the React and Next.js SDKs. The following sections will introduce you to the main objects that power the JavaScript SDK. As you're building your application, you'll likely interact with these objects, either directly or through helpers provided by the other SDKs, like React hooks or Vue composables.

## [Installation](https://clerk.com/docs/references/javascript/overview\#installation)

Follow the instructions in the [JavaScript quickstart](https://clerk.com/docs/quickstarts/javascript) to add the JavaScript SDK to your project.

## [Main objects](https://clerk.com/docs/references/javascript/overview\#main-objects)

### [`Clerk`](https://clerk.com/docs/references/javascript/overview\#clerk)

The [`Clerk`](https://clerk.com/docs/references/javascript/clerk) class is the main entry point for the Clerk JavaScript SDK. All other objects are accessible from the `Clerk` object.

### [`Client`](https://clerk.com/docs/references/javascript/overview\#client)

A client represents the current device or software accessing an application such as your web browser, native application, or Chrome Extension. It is represented by the [`Client`](https://clerk.com/docs/references/javascript/client) object.

### [`Session`](https://clerk.com/docs/references/javascript/overview\#session)

A session is a secure representation of the authentication state of the current user. Each client can hold multiple sessions on the same device. It is represented by the [`Session`](https://clerk.com/docs/references/javascript/session) object.

### [`User`](https://clerk.com/docs/references/javascript/overview\#user)

The [`User`](https://clerk.com/docs/references/javascript/user) object represents the current user of the session. It holds all the basic user information such as the user's name, email addresses, and phone numbers, and including their public, private, and unsafe metadata.

### [`SignIn`](https://clerk.com/docs/references/javascript/overview\#sign-in)

The [`SignIn`](https://clerk.com/docs/references/javascript/sign-in) object holds the state of the current sign-in and provides helper methods to navigate and complete the sign-in process. It is used to manage the sign-in lifecycle, including the first and second factor verification, and the creation of a new session.

### [`SignUp`](https://clerk.com/docs/references/javascript/overview\#sign-up)

The [`SignUp`](https://clerk.com/docs/references/javascript/sign-up) object holds the state of the current sign-up and provides helper methods to navigate and complete the sign-up process. Once a sign-up is complete, a new user is created.

### [`Organization`](https://clerk.com/docs/references/javascript/overview\#organization)

Organizations are a flexible and scalable way to manage users and their access to resources within your Clerk application. With organizations, you can assign specific roles and permissions to users, making them useful for managing projects, coordinating teams, or facilitating partnerships. Users can belong to many organizations. One of them will be the ["active organization"](https://clerk.com/docs/organizations/overview#active-organization) of the session. It is represented by the [`Organization`](https://clerk.com/docs/references/javascript/organization) object. To learn about organizations, see the [dedicated guide](https://clerk.com/docs/organizations/overview).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/javascript/overview.mdx)

Last updated onFeb 21, 2025

Support

## Clerk Ruby SDK Overview
[Skip to main content](https://clerk.com/docs/references/ruby/overview#main)

1. [Available environment variables](https://clerk.com/docs/references/ruby/overview#available-environment-variables)
2. [Available methods](https://clerk.com/docs/references/ruby/overview#available-methods)
1. [Reverification](https://clerk.com/docs/references/ruby/overview#reverification)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/ruby/overview.mdx)

# Clerk Ruby SDK

The Clerk Ruby SDK provides a powerful set of tools and utilities to seamlessly integrate authentication, user management, and organization management into your Ruby application.

To get started, refer to the appropriate guide:

- [Vanilla Ruby](https://clerk.com/docs/quickstarts/ruby)
- [Rails](https://clerk.com/docs/references/ruby/rails)
- [Rack](https://clerk.com/docs/references/ruby/rack)
- [Sinatra](https://clerk.com/docs/references/ruby/sinatra)

## [Available environment variables](https://clerk.com/docs/references/ruby/overview\#available-environment-variables)

The Ruby SDK supports the following environment variables:

| Variable name | Usage |
| --- | --- |
| `CLERK_SECRET_KEY` | The Secret Key of your instance **(required)** |
| `CLERK_API_BASE` | Overrides the default API base URL: `https://api.clerk.com/v1/` |
| `CLERK_SIGN_IN_URL` | Rails view helper: `clerk_sign_in_url` |
| `CLERK_SIGN_IN_UP` | Rails view helper: `clerk_sign_up_url` |
| `CLERK_USER_PROFILE_URL` | Rails view helper: `clerk_user_profile_url` |

## [Available methods](https://clerk.com/docs/references/ruby/overview\#available-methods)

All available methods are listed in the [Ruby HTTP Client documentation⁠](https://github.com/clerk/clerk-http-client-ruby/tree/main/.generated#documentation-for-api-endpoints). The Ruby HTTP Client is a generated wrapper around the [Backend API⁠](https://clerk.com/docs/reference/backend-api) that provides a more Ruby-friendly interface.

### [Reverification](https://clerk.com/docs/references/ruby/overview\#reverification)

The reverification feature provides an additional layer of security by requiring users to reverify their session before accessing sensitive routes. By default, it is set to `STRICT`, but accepts the following presets:

- `Clerk::StepUp::Preset::LAX`: Authenticated within the past day, requiring the second factor
- `Clerk::StepUp::Preset::MODERATE`: Authenticated within the past hour, requiring the second factor
- `Clerk::StepUp::Preset::STRICT`: Authenticated within the past 10 minutes, requiring the second factor
- `Clerk::StepUp::Preset::STRICT_MFA`: Authenticated within the past 10 minutes, requiring both first and second factors

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/ruby/overview.mdx)

Last updated onJan 28, 2025

Support

## Custom Redirects Guide
[Skip to main content](https://clerk.com/docs/guides/custom-redirects#main)

1. [Environment variables](https://clerk.com/docs/guides/custom-redirects#environment-variables)
2. [Redirect URL props](https://clerk.com/docs/guides/custom-redirects#redirect-url-props)
1. [Fallback redirect URL props](https://clerk.com/docs/guides/custom-redirects#fallback-redirect-url-props)
2. [Force redirect URL props](https://clerk.com/docs/guides/custom-redirects#force-redirect-url-props)
3. [Set the props](https://clerk.com/docs/guides/custom-redirects#set-the-props)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/custom-redirects.mdx)

# Customize your redirect URLs

To avoid breaking a user's flow through your app, when a user navigates to a Clerk sign up or sign in page via a link or button, Clerk will:

1. Persist the previous page's URL in a `redirect_url` query string
2. Navigate back to that page after the sign-up or sign-in is completed

For example, a user selecting a sign-in button on `example.com/foo` will navigate to `example.com/sign-in?redirect_url=example.com/foo`, then navigate back to `example.com/foo` upon completing the sign-in process.

However, you can customize this behavior to redirect users to a specific page by using the following methods:

- [Environment variables (recommended)](https://clerk.com/docs/guides/custom-redirects#environment-variables)
- [Props on Clerk components](https://clerk.com/docs/guides/custom-redirects#redirect-url-props)

## [Environment variables](https://clerk.com/docs/guides/custom-redirects\#environment-variables)

The following environment variables are available for customizing your redirect URLs.

For the `FORCE` and `FALLBACK` variables, it's recommended to define both sign-up and sign-in variables, as some users may choose to sign up instead after attempting to sign in, and vice versa.

General

Next.js

| Variable | Description | Example |
| --- | --- | --- |
| `CLERK_SIGN_IN_URL` | The full URL or path to your sign-in page. Needs to point to your primary application on the client-side. **Required for a satellite application in a development instance.** | `/sign-in` |
| `CLERK_SIGN_UP_URL` | The full URL or path to your sign-up page. Needs to point to your primary application on the client-side. **Required for a satellite application in a development instance.** | `/sign-up` |
| `CLERK_SIGN_IN_FORCE_REDIRECT_URL` | If provided, this URL will always be redirected to after the user signs in. | `/dashboard` |
| `CLERK_SIGN_UP_FORCE_REDIRECT_URL` | If provided, this URL will always be redirected to after the user signs up. | `/dashboard` |
| `CLERK_SIGN_IN_FALLBACK_REDIRECT_URL` | The fallback URL to redirect to after the user signs in, if there's no `redirect_url` in the path already. Defaults to `/`. | `/dashboard` |
| `CLERK_SIGN_UP_FALLBACK_REDIRECT_URL` | The fallback URL to redirect to after the user signs up, if there's no `redirect_url` in the path already. Defaults to `/`. | `/dashboard` |

| Variable | Description | Example |
| --- | --- | --- |
| `NEXT_PUBLIC_CLERK_SIGN_IN_URL` | The full URL or path to your sign-in page. Needs to point to your primary application on the client-side. **Required for a satellite application in a development instance.** | `/sign-in` |
| `NEXT_PUBLIC_CLERK_SIGN_UP_URL` | The full URL or path to your sign-up page. Needs to point to your primary application on the client-side. **Required for a satellite application in a development instance.** | `/sign-up` |
| `NEXT_PUBLIC_CLERK_SIGN_IN_FORCE_REDIRECT_URL` | If provided, this URL will always be redirected to after the user signs in. | `/dashboard` |
| `NEXT_PUBLIC_CLERK_SIGN_UP_FORCE_REDIRECT_URL` | If provided, this URL will always be redirected to after the user signs up. | `/dashboard` |
| `NEXT_PUBLIC_CLERK_SIGN_IN_FALLBACK_REDIRECT_URL` | The fallback URL to redirect to after the user signs in, if there's no `redirect_url` in the path already. Defaults to `/`. | `/dashboard` |
| `NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL` | The fallback URL to redirect to after the user signs up, if there's no `redirect_url` in the path already. Defaults to `/`. | `/dashboard` |

## [Redirect URL props](https://clerk.com/docs/guides/custom-redirects\#redirect-url-props)

This section describes the properties available for customizing your redirect URLs on Clerk components. In general, **it's recommended to use [environment variables](https://clerk.com/docs/guides/custom-redirects#environment-variables) instead.**

Warning

The `afterSignIn`, `afterSignUp`, and `redirectUrl` props are deprecated. If you're still using them, the props described in this section will override them.

### [Fallback redirect URL props](https://clerk.com/docs/guides/custom-redirects\#fallback-redirect-url-props)

The "fallback redirect URL" props will only be used if there is no `redirect_url` value. This can happen if the user has navigated directly to the sign up or sign in page.

- `fallbackRedirectUrl` \- Used by sign-in and sign-up related components.
- `signInFallbackRedirectUrl` \- Used for the 'Already have an account? Sign in' link that's rendered on sign-up components, such as `<SignUp />` and `<SignUpButton>`.
- `signUpFallbackRedirectUrl` \- Used for the 'Don't have an account? Sign up' link that's rendered on sign-in components, such as `<SignIn />` and `<SignInButton>`.

### [Force redirect URL props](https://clerk.com/docs/guides/custom-redirects\#force-redirect-url-props)

The "force redirect URL" props will _always_ redirect to the provided URL after sign up or sign in, regardless of what page the user was on before, and will override the `redirect_url` value if present.

- `forceRedirectUrl` \- Used by sign-in and sign-up related components.
- `signInForceRedirectUrl` \- Used for the 'Already have an account? Sign in' link that's rendered on sign-up components, such as `<SignUp />` and `<SignUpButton>`.
- `signUpForceRedirectUrl` \- Used for the 'Don't have an account? Sign up' link that's rendered on sign-in components, such as `<SignIn />` and `<SignInButton>`.

### [Set the props](https://clerk.com/docs/guides/custom-redirects\#set-the-props)

It is recommended to define both sign-up and sign-in variables, as some users may choose to sign up instead after attempting to sign in, and vice versa. For example, if you define `signInFallbackRedirectUrl`, you should also define `signUpFallbackRedirectUrl`.

The following components accept the redirect URL props:

- [`<RedirectToSignIn />`](https://clerk.com/docs/components/control/redirect-to-signin)
- [`<RedirectToSignUp />`](https://clerk.com/docs/components/control/redirect-to-signup)
- [`<ClerkProvider>`](https://clerk.com/docs/components/clerk-provider)
- [`<SignInButton>`](https://clerk.com/docs/components/unstyled/sign-in-button)
- [`<SignUpButton>`](https://clerk.com/docs/components/unstyled/sign-up-button)
- [`<SignIn>`](https://clerk.com/docs/components/authentication/sign-in)
- [`<SignUp>`](https://clerk.com/docs/components/authentication/sign-up)

See the appropriate reference documentation for each component, as linked above, for more information on what specific props are available.

Note

`<RedirectToSignIn />` or `<RedirectToSignUp />` child components will always take precedence over `<ClerkProvider>`.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/guides/custom-redirects.mdx)

Last updated onMar 6, 2025

Support

## Clerk Rack Integration
[Skip to main content](https://clerk.com/docs/references/ruby/rack#main)

1. [Install `clerk-sdk-ruby`](https://clerk.com/docs/references/ruby/rack#install-clerk-sdk-ruby)
2. [Configuration](https://clerk.com/docs/references/ruby/rack#configuration)
3. [Add Clerk's Rack middleware](https://clerk.com/docs/references/ruby/rack#add-clerks-rack-middleware)
4. [Access the `clerk` object](https://clerk.com/docs/references/ruby/rack#access-the-clerk-object)
5. [Example: Reverification](https://clerk.com/docs/references/ruby/rack#example-reverification)
1. [In your middleware](https://clerk.com/docs/references/ruby/rack#in-your-middleware)
2. [In your application logic](https://clerk.com/docs/references/ruby/rack#in-your-application-logic)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/ruby/rack.mdx)

# Ruby with Rack

The Clerk Ruby SDK provides a Rack middleware to integrate Clerk into your Rack-based application.

## [Install `clerk-sdk-ruby`](https://clerk.com/docs/references/ruby/rack\#install-clerk-sdk-ruby)

The [Clerk Ruby SDK](https://clerk.com/docs/references/ruby/overview) provides a range of backend utilities to simplify user authentication and management in your application.

1. Add the following code to your application's `Gemfile`.Gemfile

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
gem 'clerk-sdk-ruby', require: "clerk"
```

2. Run the following command to install the SDK:terminal

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
$ bundle install
```


## [Configuration](https://clerk.com/docs/references/ruby/rack\#configuration)

The configuration object provides a flexible way to configure the SDK. When a configuration value is not explicitly provided, it will fall back to checking the corresponding [environment variable](https://clerk.com/docs/references/ruby/overview#available-environment-variables). You must provide your Clerk Secret Key, which can be retrieved from the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

The following example shows how to set up your configuration object:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
Clerk.configure do |c|
  c.secret_key = `YOUR_SECRET_KEY` # if omitted: ENV["CLERK_SECRET_KEY"] - API calls will fail if unset
  c.logger = Logger.new(STDOUT) # if omitted, no logging
end
```

For more information, see [Faraday's documentation⁠](https://lostisland.github.io/faraday/#/).

## [Add Clerk's Rack middleware](https://clerk.com/docs/references/ruby/rack\#add-clerks-rack-middleware)

Add the Clerk middleware to your Rack application by updating your `config.ru` file with the following code:

config.ru

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
require "rack"
require "clerk/rack"

require_relative "app"

use Clerk::Rack::Middleware
run App.new
```

## [Access the `clerk` object](https://clerk.com/docs/references/ruby/rack\#access-the-clerk-object)

Once you've added the middleware, you can access the `clerk` object in your actions and views. The `clerk` object provides access to the [Ruby SDK's available methods](https://clerk.com/docs/references/ruby/overview#available-methods).

The following example demonstrates a simple Rack application that protects all routes. If the user is authenticated, it returns the user's first name and ID. If the user is not authenticated, it returns a `401` status code.

app.rb

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
require "erb"
require "clerk"

class App
  def call(env)
    clerk = env["clerk"]

    # Check if the user is authenticated
    user = clerk.user
    user ?
      [200, {"Content-Type" => "text/plain"}, ["Authenticated User: #{user.first_name} (#{user.id})"]]:
      [401, {"Content-Type" => "text/plain"}, ["Not Authenticated"]]
  end
end
```

## [Example: Reverification](https://clerk.com/docs/references/ruby/rack\#example-reverification)

The reverification feature provides an additional layer of security by requiring users to reverify their session before accessing sensitive routes.

There are two ways to handle reverification in a Rack application:

1. [In your middleware](https://clerk.com/docs/references/ruby/rack#in-your-middleware)
2. [In your application logic](https://clerk.com/docs/references/ruby/rack#in-your-application-logic)

### [In your middleware](https://clerk.com/docs/references/ruby/rack\#in-your-middleware)

To handle reverification in your Rack middleware, use the `Clerk::Rack::Reverification` middleware. It accepts an optional [preset](https://clerk.com/docs/references/ruby/overview#reverification) parameter to customize the reverification requirements and an optional `routes` parameter to specify which routes should be protected.

In the following example, the reverification preset is set to `LAX` and reverification is required for all routes that match the `/*` pattern.

config.ru

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
require "rack"
require "clerk/rack"

require_relative "app"

use Clerk::Rack::Middleware
# Reverification preset is set to `LAX`
use Clerk::Rack::Reverification,
  preset: Clerk::StepUp::Preset::LAX,
  routes: ["/*"]

run App.new
```

### [In your application logic](https://clerk.com/docs/references/ruby/rack\#in-your-application-logic)

To handle reverification in your app logic,

- Use the `clerk.user_needs_reverification?` method to check if the user needs to reverify their session, which accepts an optional [preset](https://clerk.com/docs/references/ruby/overview#reverification) parameter to customize the reverification requirements.
- Use the `clerk.user_reverification_rack_response` method to get the response.

The following example demonstrates a simple Rack application that requires authentication and reverification for all routes.

app.rb

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
require "erb"
require "clerk"

STEP_UP_PRESET = Clerk::StepUp::Preset::LAX

class App
  def call(env)
    clerk = env["clerk"]

    # Check if the user needs to reverify their session
    if clerk.user_needs_reverification?(STEP_UP_PRESET)
      # Get the response
      return clerk.user_reverification_rack_response(STEP_UP_PRESET)
    end

    # Check if the user is authenticated
    user = clerk.user
    user ?
      [200, {"Content-Type" => "text/plain"}, ["Authenticated User: #{user.first_name} (#{user.id})"]]:
      [401, {"Content-Type" => "text/plain"}, ["Not Authenticated"]]
  end
end
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/ruby/rack.mdx)

Last updated onJan 28, 2025

Support

## Clerk SDK Overview
[Skip to main content](https://clerk.com/docs/references/sdk/overview#main)

1. [Get started](https://clerk.com/docs/references/sdk/overview#get-started)
2. [Guides](https://clerk.com/docs/references/sdk/overview#guides)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/sdk/overview.mdx)

# SDK development

Clerk believes that truly optimal developer experience can only be achieved by building SDKs independently for each framework. Each framework differentiates itself with nuanced patterns, and it's important to lean into those patterns to avoid feeling like a square peg in a round hole.

The following guides provide contributors with all the necessary guidance on how to build a new SDK from scratch.

Tip

Need help while developing a new SDK? Join the `#sdk-community-devs` channel on [Discord⁠](https://clerk.com/discord) to chat with fellow SDK maintainers. You can also look at existing SDKs [on GitHub⁠](https://github.com/clerk/javascript). **Note:** Clerk does not have an official support system for community developers.

## [Get started](https://clerk.com/docs/references/sdk/overview\#get-started)

Before building a new Clerk SDK, familiarize yourself with terminology and core concepts:

- [Terminology](https://clerk.com/docs/references/sdk/terminology)
- [Philosophy](https://clerk.com/docs/references/sdk/philosophy)
- [Conventions](https://clerk.com/docs/references/sdk/conventions)
- [SDK Types](https://clerk.com/docs/references/sdk/types)

## [Guides](https://clerk.com/docs/references/sdk/overview\#guides)

After understanding the fundamentals, follow these guides to start developing your SDK:

- [Frontend-only SDK](https://clerk.com/docs/references/sdk/frontend-only)
- [Backend-only SDK](https://clerk.com/docs/references/sdk/backend-only)
- [Fullstack SDK](https://clerk.com/docs/references/sdk/fullstack)

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/sdk/overview.mdx)

Last updated onAug 16, 2024

Support

## useUser() Hook
[Skip to main content](https://clerk.com/docs/hooks/use-user#main)

1. [Returns](https://clerk.com/docs/hooks/use-user#returns)
2. [How to use the `useUser()` hook](https://clerk.com/docs/hooks/use-user#how-to-use-the-use-user-hook)
1. [Get the current user](https://clerk.com/docs/hooks/use-user#get-the-current-user)
2. [Update user data](https://clerk.com/docs/hooks/use-user#update-user-data)
3. [Reload user data](https://clerk.com/docs/hooks/use-user#reload-user-data)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/hooks/use-user.mdx)

# useUser()

The `useUser()` hook provides access to the current user's [`User`](https://clerk.com/docs/references/javascript/user) object, which contains all the data for a single user in your application and provides methods to manage their account. This hook also allows you to check if the user is signed in and if Clerk has loaded and initialized.

## [Returns](https://clerk.com/docs/hooks/use-user\#returns)

- Name`isLoaded`Type`boolean`Description





A boolean that indicates whether Clerk has completed initialization. Initially `false`, becomes `true` once Clerk loads.

- Name`isSignedIn`Type`boolean`Description





A boolean that returns `true` if the user is signed in.

- Name`user`Type`User | null`Description





The `User` object for the current user. If the user isn't signed in, `user` will be `null`.


## [How to use the `useUser()` hook](https://clerk.com/docs/hooks/use-user\#how-to-use-the-use-user-hook)

### [Get the current user](https://clerk.com/docs/hooks/use-user\#get-the-current-user)

The following example uses the [`useUser()`](https://clerk.com/docs/hooks/use-user) hook to access the [`User`](https://clerk.com/docs/references/javascript/user) object, which contains the current user's data such as their full name. The `isLoaded` and `isSignedIn` properties are used to handle the loading state and to check if the user is signed in, respectively.

src/Example.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export default function Example() {
  const { isSignedIn, user, isLoaded } = useUser()

  if (!isLoaded) {
    return <div>Loading...</div>
  }

  if (!isSignedIn) {
    return <div>Sign in to view this page</div>
  }

  return <div>Hello {user.firstName}!</div>
}
```

### [Update user data](https://clerk.com/docs/hooks/use-user\#update-user-data)

The following example uses the `useUser()` hook to access the [`User`](https://clerk.com/docs/references/javascript/user) object, which calls the [`update()`](https://clerk.com/docs/references/javascript/user#update) method to update the current user's information.

React

Next.js

src/Home.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { useUser } from '@clerk/clerk-react'

export default function Home() {
  const { isLoaded, user } = useUser()

  if (!isLoaded) {
    // Handle loading state
    return null
  }

  if (!user) return null

  const updateUser = async () => {
    await user.update({
      firstName: 'John',
      lastName: 'Doe',
    })
  }

  return (
    <>
      <button onClick={updateUser}>Update your name</button>
      <p>user.firstName: {user?.firstName}</p>
      <p>user.lastName: {user?.lastName}</p>
    </>
  )
}
```

### [Reload user data](https://clerk.com/docs/hooks/use-user\#reload-user-data)

The following example uses the `useUser()` hook to access the [`User`](https://clerk.com/docs/references/javascript/user) object, which calls the [`reload()`](https://clerk.com/docs/references/javascript/user#reload) method to get the latest user's information.

React

Next.js

src/Home.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { useUser } from '@clerk/clerk-react'

export default function Home() {
  const { isLoaded, user } = useUser()

  if (!isLoaded) {
    // Handle loading state
    return null
  }

  if (!user) return null

  const updateUser = async () => {
    // Update data via an API endpoint
    const updateMetadata = await fetch('/api/updateMetadata')

    // Check if the update was successful
    if (updateMetadata.message !== 'success') {
      throw new Error('Error updating')
    }

    // If the update was successful, reload the user data
    await user.reload()
  }

  return (
    <>
      <button onClick={updateUser}>Update your metadata</button>
      <p>user role: {user?.publicMetadata.role}</p>
    </>
  )
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/hooks/use-user.mdx)

Last updated on Mar 10, 2025

Support

## Clerk API Endpoints
[Skip to main content](https://clerk.com/docs/references/astro/endpoints#main)

1. [Protect your endpoints](https://clerk.com/docs/references/astro/endpoints#protect-your-endpoints)
2. [Retrieve data from external sources](https://clerk.com/docs/references/astro/endpoints#retrieve-data-from-external-sources)
3. [Retrieve the current user](https://clerk.com/docs/references/astro/endpoints#retrieve-the-current-user)
4. [Interact with Clerk's Backend API](https://clerk.com/docs/references/astro/endpoints#interact-with-clerks-backend-api)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/astro/endpoints.mdx)

# Endpoints

Clerk provides helpers that allow you to protect your [Astro endpoints⁠](https://docs.astro.build/en/guides/endpoints/#server-endpoints-api-routes), fetch the current user, and interact with the Clerk Backend API.

## [Protect your endpoints](https://clerk.com/docs/references/astro/endpoints\#protect-your-endpoints)

If you aren't protecting your endpoints using [`clerkMiddleware()`](https://clerk.com/docs/references/astro/clerk-middleware), you can use the [`auth()` local](https://clerk.com/docs/references/astro/locals) and check for the `userId` value, as shown in the following example:

src/pages/api/route.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export async function GET({ locals }) {
  const { userId } = locals.auth()

  if (!userId) {
    return new Response('Error: No signed in user', { status: 401 })
  }

  // Add your Endpoint logic here

  return new Response(JSON.stringify({ userId }))
}
```

## [Retrieve data from external sources](https://clerk.com/docs/references/astro/endpoints\#retrieve-data-from-external-sources)

Clerk provides integrations with a number of popular databases.

To retrieve a token from a JWT template and fetch data from an external source, use the [`getToken()`⁠](https://clerk.com/docs/references/backend/types/auth-object#get-token) method from the [`auth()` local](https://clerk.com/docs/references/astro/locals), as shown in the following example:

src/pages/api/route.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export async function GET({ locals }) {
  const { userId, getToken } = locals.auth()

  if (!userId) {
    return new Response('Unauthorized', { status: 401 })
  }

  const token = await getToken({ template: 'supabase' })

  // Fetch data from Supabase and return it.
  const data = { supabaseData: 'Hello World' }

  return new Response(JSON.stringify(data))
}
```

## [Retrieve the current user](https://clerk.com/docs/references/astro/endpoints\#retrieve-the-current-user)

In some cases, you might need the current user in your endpoint. Use the asynchronous [`currentUser()` local](https://clerk.com/docs/references/astro/locals#accessing-the-current-user) to retrieve the current [`Backend User`⁠](https://clerk.com/docs/references/backend/types/backend-user) object, as shown in the following example:

src/pages/api/route.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
export async function GET({ locals }) {
  const user = await locals.currentUser()

  if (!user) {
    return new Response('Unauthorized', { status: 401 })
  }

  return new Response(JSON.stringify({ user }))
}
```

## [Interact with Clerk's Backend API](https://clerk.com/docs/references/astro/endpoints\#interact-with-clerks-backend-api)

The [JavaScript Backend SDK](https://clerk.com/docs/references/backend/overview) exposes the [Backend API⁠](https://clerk.com/docs/reference/backend-api) resources and low-level authentication utilities for JavaScript environments.

`clerkClient` exposes an instance of the JavaScript Backend SDK for use in server environments. Use this instance to interact with the Clerk Backend API, as shown in the following example:

src/pages/api/route.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { clerkClient } from '@clerk/astro/server'

export async function POST(context) {
  const { userId } = context.locals.auth()

  if (!userId) {
    return new Response('Unauthorized', { status: 401 })
  }

  const params = { firstName: 'Clerk', lastName: 'Cookie' }

  const user = await clerkClient(context).users.updateUser(userId, params)

  return new Response(JSON.stringify({ user }))
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/astro/endpoints.mdx)

Last updated onJan 7, 2025

Support

## UserButton Customization
[Skip to main content](https://clerk.com/docs/customization/user-button#main)

1. [`<UserButton.Action>`](https://clerk.com/docs/customization/user-button#user-button-action)
1. [Props](https://clerk.com/docs/customization/user-button#props)
2. [Examples](https://clerk.com/docs/customization/user-button#examples)
2. [`<UserButton.Link>`](https://clerk.com/docs/customization/user-button#user-button-link)
1. [Props](https://clerk.com/docs/customization/user-button#props-2)
2. [Example](https://clerk.com/docs/customization/user-button#example)
3. [Reorder default items](https://clerk.com/docs/customization/user-button#reorder-default-items)
4. [Conditionally render menu items](https://clerk.com/docs/customization/user-button#conditionally-render-menu-items)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/user-button.mdx)

# Add custom items and links to the `<UserButton />` component

The [`<UserButton />`](https://clerk.com/docs/components/user/user-button) component supports _custom_ menu items, allowing the incorporation of app-specific settings or additional functionality.

There are two types of custom menu items available:

- [`<UserButton.Action>`](https://clerk.com/docs/customization/user-button#user-button-action) \- A menu item that triggers an action when clicked.
- [`<UserButton.Link>`](https://clerk.com/docs/customization/user-button#user-button-link) \- A menu item that navigates to a page when clicked.

You can also [reorder default items](https://clerk.com/docs/customization/user-button#reorder-default-items) and [conditionally render menu items](https://clerk.com/docs/customization/user-button#conditionally-render-menu-items).

## [`<UserButton.Action>`](https://clerk.com/docs/customization/user-button\#user-button-action)

`<UserButton.Action />` allows you to add actions to the `<UserButton />` component, like opening a chat or triggering a modal.

### [Props](https://clerk.com/docs/customization/user-button\#props)

`<UserButton.Action />` accepts the following props:

- Name`label`Type`string`Description





The name that will be displayed in the menu of the user button.

- Name`labelIcon`Type`React.ReactElement`Description





An icon displayed next to the label in the menu.

- Name`open?`Type`string`Description





The path segment that will be used to open the user profile modal to a specific page.

- Name`onClick?`Type`void`Description





A function to be called when the menu item is clicked.


### [Examples](https://clerk.com/docs/customization/user-button\#examples)

#### [Add an action](https://clerk.com/docs/customization/user-button\#add-an-action)

The following example adds an "Open chat" action to the `<UserButton />` component. When a user selects the `<UserButton />`, there will be an "Open chat" menu item.

Next.js

Astro

JavaScript

Vue

/app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { UserButton } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

export default function Home() {
  return (
    <header>
      <UserButton>
        <UserButton.MenuItems>
          <UserButton.Action
            label="Open chat"
            labelIcon={<DotIcon />}
            onClick={() => alert('init chat')}
          />
        </UserButton.MenuItems>
      </UserButton>
    </header>
  )
}
```

In Astro components, props are converted to strings, so you can't use an `onClick` handler to handle click events. Instead, you can set an arbitrary prop, set up a custom event listener that will check for the value passed to that prop, and then execute a desired action based on that value.

For example, `clickIdentifier` is the arbitrary prop being used to identify the click event. Two `<UserButton.Action />` components are added to the menu, each with a different `clickIdentifier` prop. When the menu item is clicked, the custom event listener will check for the value passed to the `clickIdentifier` prop, either `"open_chat"` or `"open_cart"`, and then execute an action based on that value.

pages/index.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { UserButton } from '@clerk/astro/components'
---

<header>
  <UserButton>
    <UserButton.MenuItems>
      <UserButton.Action label="Open chat" clickIdentifier="open_chat">
        <svg
          slot="label-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 512 512"
          fill="currentColor"
        >
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </UserButton.Action>
      <UserButton.Action label="Open cart" clickIdentifier="open_cart">
        <svg
          slot="label-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 512 512"
          fill="currentColor"
        >
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </UserButton.Action>
    </UserButton.MenuItems>
  </UserButton>
</header>

<script>
  document.addEventListener('clerk:menu-item-click', (e) => {
    if (e.detail === 'open_chat') {
      console.log('init chat')
    }
    if (e.detail === 'open_cart') {
      console.log('init cart')
    }
  })
</script>
```

To add custom menu items to the `<UserButton />` component using the [JavaScript SDK](https://clerk.com/docs/references/javascript/overview), pass the `customMenuItems` property to the `mountUserButton()` method, as shown in the following example:

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

// Initialize Clerk with your Clerk Publishable Key
const clerk = new Clerk('YOUR_PUBLISHABLE_KEY')
await clerk.load()

document.getElementById('app').innerHTML = `
  <div id="user-button"></div>
`

const userButtonDiv = document.getElementById('user-button')

clerk.mountUserButton(userButtonDiv, {
  customMenuItems: [\
    {\
      label: 'Help modal',\
      onClick: () => {\
        alert('Open modal') // your custom event\
      },\
      mountIcon: (el) => {\
        el.innerHTML = '👤'\
      },\
      unmountIcon: (el) => {},\
    },\
  ],
})
```

App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { UserButton } from '@clerk/vue'

function openChat() {
  alert('init chat')
}
</script>

<template>
  <header>
    <UserButton>
      <UserButton.MenuItems>
        <UserButton.Action label="Open chat" @click="openChat">
          <template #labelIcon>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
              <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
            </svg>
          </template>
        </UserButton.Action>
      </UserButton.MenuItems>
    </UserButton>
  </header>
</template>
```

#### [Add an action and a custom page](https://clerk.com/docs/customization/user-button\#add-an-action-and-a-custom-page)

The following example adds an "Open chat" action to the `<UserButton />` component, as well as a [custom page](https://clerk.com/docs/customization/user-profile) titled "Help". When a user selects the `<UserButton />`, there will be "Open chat" and "Help" menu items.

Next.js

Astro

Vue

/app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { UserButton } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

export default function Home() {
  return (
    <header>
      <UserButton>
        <UserButton.MenuItems>
          <UserButton.Action label="Help" labelIcon={<DotIcon />} open="help" />
        </UserButton.MenuItems>

        <UserButton.UserProfilePage label="Help" labelIcon={<DotIcon />} url="help">
          <div>
            <h1>Help Page</h1>
            <p>This is the custom help page</p>
          </div>
        </UserButton.UserProfilePage>
      </UserButton>
    </header>
  )
}
```

In the following example, the `<UserButton.Action />` component is used to add a "Help" menu item to the `<UserButton />` component. The `open` prop is set to `"help"` to open the `/help` page when the menu item is selected.

The `<UserButton.UserProfilePage />` component is used to render the `/help` page, and because its configured as a user profile page, the `<UserProfile />` modal will be opened with the custom "Help" menu item. [Read more about custom pages](https://clerk.com/docs/customization/user-profile).

pages/index.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { UserButton } from '@clerk/astro/components'
---

<header>
  <UserButton>
    <UserButton.MenuItems>
      <UserButton.Action label="Help" open="help">
        <svg
          slot="label-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 512 512"
          fill="currentColor"
        >
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </UserButton.Action>
    </UserButton.MenuItems>

    <UserButton.UserProfilePage label="Help" url="help">
      <svg
        slot="label-icon"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 512 512"
        fill="currentColor"
      >
        <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
      </svg>
      <div>
        <h1>Help Page</h1>
        <p>This is the custom help page</p>
      </div>
    </UserButton.UserProfilePage>
  </UserButton>
</header>
```

App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { UserButton } from '@clerk/vue'
</script>

<template>
  <header>
    <UserButton>
      <UserButton.MenuItems>
        <UserButton.Action label="Help" open="help">
          <template #labelIcon>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
              <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
            </svg>
          </template>
        </UserButton.Action>
      </UserButton.MenuItems>

      <UserButton.UserProfilePage label="Help" url="help">
        <template #labelIcon>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
            <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
          </svg>
        </template>
        <div>
          <h1>Help Page</h1>
          <p>This is the custom help page</p>
        </div>
      </UserButton.UserProfilePage>
    </UserButton>
  </header>
</template>
```

## [`<UserButton.Link>`](https://clerk.com/docs/customization/user-button\#user-button-link)

`<UserButton.Link />` allows you to add links to the `<UserButton />` component, like custom pages or external URLs.

### [Props](https://clerk.com/docs/customization/user-button\#props-2)

`<UserButton.Link />` accept the following props, all of which are **required**:

- Name`label`Type`string`Description





The name that will be displayed in the menu of the user button.

- Name`labelIcon`Type`React.ReactElement`Description





An icon displayed next to the label in the menu.

- Name`href`Type`string`Description





The path segment that will be used to navigate to the custom page.


### [Example](https://clerk.com/docs/customization/user-button\#example)

The following example adds a "Create organization" link to the `<UserButton />` component. When a user selects the `<UserButton />`, there will be a "Create organization" menu item.

Next.js

Astro

JavaScript

Vue

/app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { UserButton } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

export default function Home() {
  return (
    <header>
      <UserButton>
        <UserButton.MenuItems>
          <UserButton.Link
            label="Create organization"
            labelIcon={<DotIcon />}
            href="/create-organization"
          />
        </UserButton.MenuItems>
      </UserButton>
    </header>
  )
}
```

pages/index.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { UserButton } from '@clerk/astro/components'
---

<header>
  <UserButton>
    <UserButton.MenuItems>
      <UserButton.Link label="Create organization" href="/create-organization">
        <svg
          slot="label-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 512 512"
          fill="currentColor"
        >
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </UserButton.Link>
    </UserButton.MenuItems>
  </UserButton>
</header>
```

To add custom menu items to the `<UserButton />` component using the [JavaScript SDK](https://clerk.com/docs/references/javascript/overview), pass the `customMenuItems` property to the `mountUserButton()` method, as shown in the following example:

main.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { Clerk } from '@clerk/clerk-js'

// Initialize Clerk with your Clerk Publishable Key
const clerk = new Clerk('YOUR_PUBLISHABLE_KEY')
await clerk.load()

document.getElementById('app').innerHTML = `
  <div id="user-button"></div>
`

const userButtonDiv = document.getElementById('user-button')

clerk.mountUserButton(userButtonDiv, {
  customMenuItems: [\
    {\
      label: 'User page',\
      href: '/user',\
      mountIcon: (el) => {\
        el.innerHTML = '👤'\
      },\
      unmountIcon: (el) => {},\
    },\
  ],
})
```

App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { UserButton } from '@clerk/vue'
</script>

<template>
  <header>
    <UserButton>
      <UserButton.MenuItems>
        <UserButton.Link label="Create organization" href="/create-organization">
          <template #labelIcon>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
              <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
            </svg>
          </template>
        </UserButton.Link>
      </UserButton.MenuItems>
    </UserButton>
  </header>
</template>
```

## [Reorder default items](https://clerk.com/docs/customization/user-button\#reorder-default-items)

The `<UserButton />` component includes two default menu items: `Manage account` and `Sign out`, in that order. You can reorder these default items by setting the `label` prop to `'manageAccount'` or `'signOut'`. This will target the existing default item and allow you to rearrange it.

In the following example, the "Sign out" menu item is moved to the top of the menu, a custom "Create organization" link is added as the second menu item, and the "Manage account" menu item is moved to the bottom of the menu.

Next.js

Astro

Vue

/app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { UserButton } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

export default function Home() {
  return (
    <header>
      <UserButton>
        <UserButton.MenuItems>
          <UserButton.Action label="signOut" />
          <UserButton.Link
            label="Create organization"
            labelIcon={<DotIcon />}
            href="/create-organization"
          />
          <UserButton.Action label="manageAccount" />
        </UserButton.MenuItems>
      </UserButton>
    </header>
  )
}
```

pages/index.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { UserButton } from '@clerk/astro/components'
---

<header>
  <UserButton>
    <UserButton.MenuItems>
      <UserButton.Action label="signOut" />
      <UserButton.Link label="Create organization" open="/create-organization">
        <svg
          slot="label-icon"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 512 512"
          fill="currentColor"
        >
          <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
        </svg>
      </UserButton.Link>
      <UserButton.Action label="manageAccount" />
    </UserButton.MenuItems>
  </UserButton>
</header>
```

App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { UserButton } from '@clerk/vue'
</script>

<template>
  <header>
    <UserButton>
      <UserButton.MenuItems>
        <UserButton.Action label="signOut" />
        <UserButton.Link label="Create organization" href="/create-organization">
          <template #labelIcon>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
              <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
            </svg>
          </template>
        </UserButton.Link>
        <UserButton.Action label="manageAccount" />
      </UserButton.MenuItems>
    </UserButton>
  </header>
</template>
```

## [Conditionally render menu items](https://clerk.com/docs/customization/user-button\#conditionally-render-menu-items)

To conditionally render menu items based on a user's role or custom permissions, you can use the [`has()`](https://clerk.com/docs/references/backend/types/auth-object#has) helper function.

In the following example, the "Create organization" menu item will only render if the current user has the `org:app:admin` permission.

Next.js

Astro

Vue

/app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { UserButton, useAuth } from '@clerk/nextjs'

const DotIcon = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
      <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
    </svg>
  )
}

export default function Home() {
  const { has, isLoaded } = useAuth()

  if (!isLoaded) {
    return <span>Loading...</span>
  }

  const isAdmin = has({ permission: 'org:app:admin' })

  return (
    <header>
      <UserButton>
        {isAdmin && (
          <UserButton.MenuItems>
            <UserButton.Link
              label="Create organization"
              labelIcon={<DotIcon />}
              href="/create-organization"
            />
          </UserButton.MenuItems>
        )}
      </UserButton>
    </header>
  )
}
```

pages/index.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { UserButton } from '@clerk/astro/components'

const { has } = Astro.locals.auth()

const isAdmin = has({ permission: 'org:app:admin' })
---

<header>
  <UserButton>
    {
      isAdmin && (
        <UserButton.MenuItems>
          <UserButton.Link label="Create organization" open="/create-organization">
            <svg
              slot="label-icon"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
              fill="currentColor"
            >
              <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z" />
            </svg>
          </UserButton.Link>
        </UserButton.MenuItems>
      )
    }
  </UserButton>
</header>
```

App.vue

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
<script setup lang="ts">
import { UserButton, useAuth } from '@clerk/vue'
import { computed } from 'vue'

const { has, isLoaded } = useAuth()

const isAdmin = computed(() => has.value?.({ permission: 'org:app:admin' }))
</script>

<template>
  <header v-if="isLoaded && isAdmin">
    <UserButton>
      <UserButton.MenuItems>
        <UserButton.Link label="Create organization" href="/create-organization">
          <template #labelIcon>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor">
              <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"></path>
            </svg>
          </template>
        </UserButton.Link>
      </UserButton.MenuItems>
    </UserButton>
  </header>
</template>
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/customization/user-button.mdx)

Last updated onFeb 12, 2025

Support

## Reassign Default Role
[Skip to main content](https://clerk.com/docs/organizations/default-role#main)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/default-role.mdx)

# Reassign the Default role for members

New organization members are initially assigned the [**Default** role](https://clerk.com/docs/organizations/roles-permissions#the-default-role-for-members). By default, that role is `org:member`. This role is used as a pre-filled default in `<OrganizationProfile />` invitations and for organization enrollment with [verified domains](https://clerk.com/docs/organizations/verified-domains).

You cannot delete an organization role if it is used as the organization **Default** role. But, you _can_ reassign the **Default** role to any other role.

To reassign the **Default** role:

1. In the Clerk Dashboard, navigate to [**Roles**⁠](https://dashboard.clerk.com/last-active?path=organizations-settings/roles).
2. [Create a new role](https://clerk.com/docs/organizations/create-roles-permissions#create-a-new-role-for-your-organization) or use an existing role from the list.
3. Open the "..." menu for the role.
4. From the dropdown, select the **Set as Default role** option.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/organizations/default-role.mdx)

Last updated onDec 4, 2024

Support

## Clerk Allowlist Errors
[Skip to main content](https://clerk.com/docs/errors/allowlist-identifiers#main)

1. [`AllowlistIdentifierNotFound`](https://clerk.com/docs/errors/allowlist-identifiers#allowlist-identifier-not-found)
2. [`DuplicateAllowlistIdentifier`](https://clerk.com/docs/errors/allowlist-identifiers#duplicate-allowlist-identifier)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/allowlist-identifiers.mdx)

# Allowlist identifiers errors

An index of Clerk errors related to allowlist identifiers.

## [`AllowlistIdentifierNotFound`](https://clerk.com/docs/errors/allowlist-identifiers\#allowlist-identifier-not-found)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "Identifier not found",
  "longMessage": "No identifier was found with id <identifierID>",
  "code": "resource_not_found_code"
}
```

## [`DuplicateAllowlistIdentifier`](https://clerk.com/docs/errors/allowlist-identifiers\#duplicate-allowlist-identifier)

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "shortMessage": "duplicate allowlist identifier",
  "longMessage": "the identifier <identifier> already exists",
  "code": "duplicate_record_code"
}
```

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/errors/allowlist-identifiers.mdx)

Last updated onAug 16, 2024

Support

## Bot Protection Guide
[Skip to main content](https://clerk.com/docs/security/bot-protection#main)

1. [Enable bot sign-up protection](https://clerk.com/docs/security/bot-protection#enable-bot-sign-up-protection)
2. [Limitations](https://clerk.com/docs/security/bot-protection#limitations)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/security/bot-protection.mdx)

# Bot protection

To protect your sign-ups from bots, Clerk leverages data from our CDN to determine whether a user attempting to sign up might be a bot or not.

## [Enable bot sign-up protection](https://clerk.com/docs/security/bot-protection\#enable-bot-sign-up-protection)

1. In the Clerk Dashboard, navigate to the [**Attack protection**⁠](https://dashboard.clerk.com/last-active?path=user-authentication/attack-protection) page.
2. In the **Bot sign-up protection** section, enable the feature and choose the **CAPTCHA type** you want to use:


- **Smart**: The CAPTCHA widget will only be shown if the client is suspected to be a bot. Users suspected of being a bot will be shown a interactive challenge (like clicking a checkbox), in an attempt to verify they are human.
- **Invisible**: Bot traffic will be automatically blocked. No CAPTCHA widget will be displayed. Users suspected of being a bot will not be allowed to sign up, and are shown an error message instructing them to reach out to your configured support email address.

## [Limitations](https://clerk.com/docs/security/bot-protection\#limitations)

- If you're building a custom sign-up flow using the Clerk API, instead of using Clerk components, and you have enabled **Bot sign-up protection**, then you need to ensure you have added a DOM node to render the CAPTCHA widget. Refer to the [Add bot protection to your custom sign-up flow](https://clerk.com/docs/custom-flows/bot-sign-up-protection) guide for more information.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/security/bot-protection.mdx)

Last updated onFeb 28, 2025

Support

## Supabase and Clerk Integration
[Skip to main content](https://clerk.com/docs/integrations/databases/supabase#main)

1. [Choose your own adventure](https://clerk.com/docs/integrations/databases/supabase#choose-your-own-adventure)
1. [Create a SQL query that checks the user ID](https://clerk.com/docs/integrations/databases/supabase#create-a-sql-query-that-checks-the-user-id)
2. [Create a table and enable RLS on it](https://clerk.com/docs/integrations/databases/supabase#create-a-table-and-enable-rls-on-it)
3. [Create ID-based RLS policies](https://clerk.com/docs/integrations/databases/supabase#create-id-based-rls-policies)
4. [Get your Supabase JWT Secret Key](https://clerk.com/docs/integrations/databases/supabase#get-your-supabase-jwt-secret-key)
5. [Create a Supabase JWT template](https://clerk.com/docs/integrations/databases/supabase#create-a-supabase-jwt-template)
6. [Install the Supabase client library](https://clerk.com/docs/integrations/databases/supabase#install-the-supabase-client-library)
7. [Set up your environment variables](https://clerk.com/docs/integrations/databases/supabase#set-up-your-environment-variables)
8. [Fetch Supabase data in your code](https://clerk.com/docs/integrations/databases/supabase#fetch-supabase-data-in-your-code)
9. [Test your integration](https://clerk.com/docs/integrations/databases/supabase#test-your-integration)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/supabase.mdx)

# Integrate Supabase with Clerk

## You will learn the following:

- Use Clerk to authenticate access to your Supabase data
- Access Clerk user IDs in your Supabase RLS policies
- Customize a Clerk JWT template to suit your use case with Supabase

## Before you start

- [Set up a Clerk application](https://clerk.com/docs/quickstarts/setup-clerk)
- [Integrate the appropriate Clerk SDK in your local project](https://clerk.com/docs/quickstarts/overview)

Important

See the [demo repo⁠](https://github.com/clerk/clerk-supabase-nextjs) for a full example of how to integrate Supabase with Clerk in a Next.js app.

Integrating Supabase with Clerk gives you the benefits of using a Supabase database while leveraging Clerk's authentication, prebuilt components, and webhooks. To get the most out of Supabase with Clerk, you must implement custom [Row Level Security⁠](https://supabase.com/docs/guides/auth/row-level-security) (RLS) policies.

RLS works by validating database queries according to the restrictions defined in the RLS policies applied to the table. This guide will show you how to create RLS policies that restrict access to data based on the user's Clerk ID. This way, users can only access data that belongs to them. To set this up, you will:

- Create a function in Supabase to parse the Clerk user ID from the authentication token.
- Create a `user_id` column that defaults to the Clerk user's ID when new records are created.
- Create policies to restrict what data can be read and inserted.
- Use the Clerk Supabase integration helper in your code to authenticate with Supabase and execute queries.

This guide will have you create a new table in your [Supabase project⁠](https://supabase.com/dashboard/projects), but you can apply these concepts to your existing tables as well.

Tip

This integration restricts what data authenticated users can access in the database, but does not synchronize user records between Clerk and Supabase. To send additional data from Clerk to your Supabase database, use [webhooks](https://clerk.com/docs/webhooks/overview).

## [Choose your own adventure](https://clerk.com/docs/integrations/databases/supabase\#choose-your-own-adventure)

For interacting with the Supabase dashboard, you can either use the **Supabase interface** or the **SQL Editor**. The **SQL Editor** is a more direct way to interact with your database, but the **Supabase interface** provides a more user-friendly experience.

### [Create a SQL query that checks the user ID](https://clerk.com/docs/integrations/databases/supabase\#create-a-sql-query-that-checks-the-user-id)

Create a function named `requesting_user_id()` that will parse the Clerk user ID from the authentication token. This function will be used to set the default value of `user_id` in a table and in the RLS policies to ensure the user can only access their data.

Supabase interface

SQL Editor

1. In the sidenav of your [Supabase dashboard⁠](https://supabase.com/dashboard/projects), navigate to **Database** \> **Functions**.
2. Select **Create a new function**.
3. In the **Add a new function** sheet, make the following changes:


- Set **Name of function** to `requesting_user_id`.
- Set **Return type** to `text`.
- Toggle **Show advanced settings** on.
- Set **Language** to `sql`.
- Populate the **Definition** with the following sql:









```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
SELECT NULLIF(
      current_setting('request.jwt.claims', true)::json->>'sub',
      ''
)::text;
```

- Select **Confirm**.

1. In the sidenav of your [Supabase dashboard⁠](https://supabase.com/dashboard/projects), navigate to **SQL Editor**, and paste the following into the editor:









```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
CREATE OR REPLACE FUNCTION requesting_user_id()
RETURNS TEXT AS $$
       SELECT NULLIF(
           current_setting('request.jwt.claims', true)::json->>'sub',
           ''
       )::text;
$$ LANGUAGE SQL STABLE;
```

2. To execute the query and create the `requesting_user_id()` function, select **Run**.

### [Create a table and enable RLS on it](https://clerk.com/docs/integrations/databases/supabase\#create-a-table-and-enable-rls-on-it)

Next, you'll create a `tasks` table and enable RLS on that table. The `tasks` table will also contain a `user_id` column that will use the `requesting_user_id()` function you just created as it's default value. This column will be used in the RLS policies to only return or modify records scoped to the user's account.

Supabase interface

SQL Editor

In the left navigation, select **Table Editor** and select **Create a new table**. In the sheet that appears in the right, configure the following settings:

- Name: `tasks`.
- Toggle on **Enable Row Level Security (RLS).**
- Set up the **Columns** with the following configuration:







| Name | Type | Default value | Primary | Additional settings (Gear icon) |
| --- | --- | --- | --- | --- |
| id | int8 | _NULL_ | Checked | Is identity |
| name | text |  |  |  |
| user\_id | text | requesting\_user\_id() |  |  |

- Select **Save**.

1. In the sidenav of your [Supabase dashboard⁠](https://supabase.com/dashboard/projects), navigate to **SQL Editor**.
2. To create the `"tasks"` table and enable RLS on it, run the following two queries:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
-- Create a "tasks" table
create table tasks(
  id serial primary key,
  name text not null,
  user_id text not null default requesting_user_id()
);

-- Enable RLS on the table
alter table "tasks" enable row level security;
```

### [Create ID-based RLS policies](https://clerk.com/docs/integrations/databases/supabase\#create-id-based-rls-policies)

Create RLS policies that permit users to read and insert content associated with their user IDs only.

Supabase interface

SQL Editor

In the sidenav, navigate to **Authentication** \> **Policies**. Create policies that allow your users to read and insert data into the `tasks` table:

1. Select **Create policy** to create the `SELECT` policy:


- Name: "Select tasks policy".
- For **Policy Command**, select **SELECT**.
- For **Target roles**, select **authenticated**.
- Replace the "-- Provide a SQL expression for the using statement" with the following:Supabase policy editor

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
requesting_user_id() = user_id
```

- Select **Save policy**.

2. Select **Create policy** to create the `INSERT` policy:


- Name: "Insert task policy".
- For **Policy Command**, select **INSERT**.
- For **Target roles**, select **authenticated**.
- Replace the "-- Provide a SQL expression for the with check statement" with the following:Supabase policy editor

















```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
requesting_user_id() = user_id
```

- Select **Save policy**.

1. In the sidenav of your [Supabase dashboard⁠](https://supabase.com/dashboard/projects), navigate to **SQL Editor**
2. Run the following queries to add policies for all statements issued on `"tasks"`:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
-- This policy will enforce that only tasks where the `user_id` matches the Clerk user ID are returned.
CREATE POLICY "Select tasks policy" ON "public"."tasks" AS PERMISSIVE FOR
SELECT
  TO authenticated USING (requesting_user_id () = user_id);

-- This policy will enforce the `user_id` field on INSERT statements matches the Clerk user ID.
CREATE POLICY "Insert tasks policy" ON "public"."tasks" AS PERMISSIVE FOR INSERT TO authenticated
WITH
  CHECK (requesting_user_id () = user_id);
```

### [Get your Supabase JWT Secret Key](https://clerk.com/docs/integrations/databases/supabase\#get-your-supabase-jwt-secret-key)

To give users access to your data, Supabase's API requires an authentication token. Your Clerk project can generate these authentication tokens, but it needs your Supabase project's JWT Secret Key first.

To find the JWT Secret Key:

1. In the sidenav, navigate to **Project Settings > API**.
2. Under the **JWT Settings** section, save the value in the **JWT Secret** field somewhere secure. This value will be used in the next step.

### [Create a Supabase JWT template](https://clerk.com/docs/integrations/databases/supabase\#create-a-supabase-jwt-template)

Clerk's JWT templates allow you to generate a new valid Supabase authentication token for each signed in user. These tokens allow authenticated users to access your data with Supabase's API.

To create a JWT template for Supabase:

1. In the Clerk Dashboard, navigate to the [**JWT templates**⁠](https://dashboard.clerk.com/last-active?path=jwt-templates) page.
2. Select the **New template** button, then select **Supabase** from the list of options.
3. Configure your template:


- The value of the **Name** field will be required when using the template in your code. For this tutorial, name it `supabase`.
- **Signing algorithm** will be `HS256` by default. This algorithm is required to use JWTs with Supabase. [Learn more in their docs⁠](https://supabase.com/docs/guides/resources/glossary#jwt-signing-secret).
- Under **Signing key**, add the value of your Supabase **JWT Secret Key** from [the previous step](https://clerk.com/docs/integrations/databases/supabase#get-your-supabase-jwt-secret-key).
- You can leave all other fields at their default settings or customize them to your needs. See the [JWT template guide](https://clerk.com/docs/backend-requests/jwt-templates#creating-a-template) to learn more about these settings.
- Select **Save** from the notification bubble to complete setup.

### [Install the Supabase client library](https://clerk.com/docs/integrations/databases/supabase\#install-the-supabase-client-library)

Add the Supabase client library to your project.

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npm i @supabase/supabase-js
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn add @supabase/supabase-js
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm add @supabase/supabase-js
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun add @supabase/supabase-js
```

### [Set up your environment variables](https://clerk.com/docs/integrations/databases/supabase\#set-up-your-environment-variables)

1. In the sidenav of the [Supabase dashboard⁠](https://supabase.com/dashboard/projects), select **Settings** \> **API**.
2. Add the **Project URL** to your `.env` file as `SUPABASE_URL`.
3. In the **Project API keys** section, add the value beside `anon` `public` to your `.env` file as `SUPABASE_KEY`.

Important

If you are using Next.js, the `NEXT_PUBLIC_` prefix is required for environment variables that are used in the client-side code.

### [Fetch Supabase data in your code](https://clerk.com/docs/integrations/databases/supabase\#fetch-supabase-data-in-your-code)

The following example shows the list of tasks for the user and allows the user to add new tasks.

The `createClerkSupabaseClient()` function uses [Supabase's `createClient()` method⁠](https://supabase.com/docs/reference/javascript/initializing) to initialize a new Supabase client, but modifies it to inject the Clerk token you [created with the Supabase JWT template](https://clerk.com/docs/integrations/databases/supabase#create-a-supabase-jwt-template) into the request headers sent to Supabase. The `requesting_user_id()` function that was created in the Supabase dashboard will parse this token to use it when querying data from the `tasks` table.

Client-side rendering

Server-side rendering

The following example uses the [Next.js SDK](https://clerk.com/docs/references/nextjs/overview) to access the [`useUser()`](https://clerk.com/docs/hooks/use-user) and [`useSession()`](https://clerk.com/docs/hooks/use-session) hooks, but you can adapt this code to work with any React-based Clerk SDK.

app/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'
import { useEffect, useState } from 'react'
import { useSession, useUser } from '@clerk/nextjs'
import { createClient } from '@supabase/supabase-js'

export default function Home() {
  const [tasks, setTasks] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [name, setName] = useState('')
  // The `useUser()` hook will be used to ensure that Clerk has loaded data about the logged in user
  const { user } = useUser()
  // The `useSession()` hook will be used to get the Clerk session object
  const { session } = useSession()

  // Create a custom supabase client that injects the Clerk Supabase token into the request headers
  function createClerkSupabaseClient() {
    return createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_KEY!,
      {
        global: {
          // Get the custom Supabase token from Clerk
          fetch: async (url, options = {}) => {
            const clerkToken = await session?.getToken({
              template: 'supabase',
            })

            // Insert the Clerk Supabase token into the headers
            const headers = new Headers(options?.headers)
            headers.set('Authorization', `Bearer ${clerkToken}`)

            // Now call the default fetch
            return fetch(url, {
              ...options,
              headers,
            })
          },
        },
      },
    )
  }

  // Create a `client` object for accessing Supabase data using the Clerk token
  const client = createClerkSupabaseClient()

  // This `useEffect` will wait for the User object to be loaded before requesting
  // the tasks for the logged in user
  useEffect(() => {
    if (!user) return

    async function loadTasks() {
      setLoading(true)
      const { data, error } = await client.from('tasks').select()
      if (!error) setTasks(data)
      setLoading(false)
    }

    loadTasks()
  }, [user])

  async function createTask(e: React.FormEvent<HTMLFormElement>) {
    e.preventDefault()
    // Insert task into the "tasks" database
    await client.from('tasks').insert({
      name,
    })
    window.location.reload()
  }

  return (
    <div>
      <h1>Tasks</h1>

      {loading && <p>Loading...</p>}

      {!loading && tasks.length > 0 && tasks.map((task: any) => <p>{task.name}</p>)}

      {!loading && tasks.length === 0 && <p>No tasks found</p>}

      <form onSubmit={createTask}>
        <input
          autoFocus
          type="text"
          name="name"
          placeholder="Enter new task"
          onChange={(e) => setName(e.target.value)}
          value={name}
        />
        <button type="submit">Add</button>
      </form>
    </div>
  )
}
```

The following example uses the [Next.js SDK](https://clerk.com/docs/references/nextjs/overview) to demonstrate how to integrate Supabase with Clerk in a **server-side rendered** application.

The `createClerkSupabaseClientSsr()` function is stored in a separate file so that it can be re-used in multiple places, such as within `page.tsx` or a Server Action file. This function uses the [`auth().getToken()`](https://clerk.com/docs/references/nextjs/auth#use-auth-for-data-fetching) method to get the Clerk token and inject it into the request headers sent to Supabase.

src/app/ssr/client.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { auth } from '@clerk/nextjs/server'
import { createClient } from '@supabase/supabase-js'

export async function createClerkSupabaseClientSsr() {
  // The `useAuth()` hook is used to access the `getToken()` method
  const { getToken } = await auth()

  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_KEY!,
    {
      global: {
        // Get the custom Supabase token from Clerk
        fetch: async (url, options = {}) => {
          const clerkToken = await getToken({
            template: 'supabase',
          })

          // Insert the Clerk Supabase token into the headers
          const headers = new Headers(options?.headers)
          headers.set('Authorization', `Bearer ${clerkToken}`)

          // Now call the default fetch
          return fetch(url, {
            ...options,
            headers,
          })
        },
      },
    },
  )
}
```

The following files render the `/ssr` page and handle the "Add task" form submission. Use the following tabs to view the code for each page.

page.tsx

actions.ts

AddTaskForm.tsx

src/app/ssr/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { createClerkSupabaseClientSsr } from './client'
import AddTaskForm from './AddTaskForm'

export default async function Home() {
  // Use the custom Supabase client you created
  const client = createClerkSupabaseClientSsr()

  // Query the 'tasks' table to render the list of tasks
  const { data, error } = await client.from('tasks').select()
  if (error) {
    throw error
  }
  const tasks = data

  return (
    <div>
      <h1>Tasks</h1>

      <div>{tasks?.map((task: any) => <p>{task.name}</p>)}</div>

      <AddTaskForm />
    </div>
  )
}
```

src/app/ssr/actions.ts

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use server'

import { createClerkSupabaseClientSsr } from './client'

const client = createClerkSupabaseClientSsr()

export async function addTask(name: string) {
  try {
    const response = await client.from('tasks').insert({
      name,
    })

    console.log('Task successfully added!', response)
  } catch (error: any) {
    console.error('Error adding task:', error.message)
    throw new Error('Failed to add task')
  }
}
```

src/app/ssr/AddTaskForm.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'
import React, { useState } from 'react'
import { addTask } from './actions'
import { useRouter } from 'next/navigation'

function AddTaskForm() {
  const [taskName, setTaskName] = useState('')
  const router = useRouter()

  async function onSubmit() {
    await addTask(taskName)
    setTaskName('')
    router.refresh()
  }

  return (
    <form action={onSubmit}>
      <input
        autoFocus
        type="text"
        name="name"
        placeholder="Enter new task"
        onChange={(e) => setTaskName(e.target.value)}
        value={taskName}
      />
      <button type="submit">Add</button>
    </form>
  )
}
export default AddTaskForm
```

### [Test your integration](https://clerk.com/docs/integrations/databases/supabase\#test-your-integration)

Run your project and sign in. Test creating and viewing tasks. Sign out and sign in as a different user, and repeat.

If you have the same tasks across multiple accounts, double check that RLS is enabled, or that the RLS policies were properly created. Check the table in the Supabase dashboard. You should see all the tasks between both users, but with differing values in the `user_id` column.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/integrations/databases/supabase.mdx)

Last updated onMar 8, 2025

Support

## Clerk Provider Component
[Skip to main content](https://clerk.com/docs/components/clerk-provider#main)

1. [Usage](https://clerk.com/docs/components/clerk-provider#usage)
2. [Properties](https://clerk.com/docs/components/clerk-provider#properties)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/components/clerk-provider.mdx)

# `<ClerkProvider>`

The `<ClerkProvider>` component is required to integrate Clerk into your React application, providing session and user context to Clerk's hooks and components.

The recommended approach is to wrap your entire app with `<ClerkProvider>` at the entry point to make authentication globally accessible. If you only need authentication for specific routes or pieces of your application, render `<ClerkProvider>` deeper in the component tree. This allows you to implement Clerk's functionality precisely where required without impacting the rest of your app.

## [Usage](https://clerk.com/docs/components/clerk-provider\#usage)

Next.js

React

Expo

React Router

Tanstack Start

App Router

Pages Router

app/layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import React from 'react'
import { ClerkProvider } from '@clerk/nextjs'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <ClerkProvider>
      <html lang="en">
        <body>{children}</body>
      </html>
    </ClerkProvider>
  )
}
```

\_app.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/nextjs'
import type { AppProps } from 'next/app'

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <ClerkProvider {...pageProps}>
      <Component {...pageProps} />
    </ClerkProvider>
  )
}

export default MyApp
```

index.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import { ClerkProvider } from '@clerk/clerk-react'

// Import your Publishable Key
const PUBLISHABLE_KEY = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY

if (!PUBLISHABLE_KEY) {
  throw new Error('Add your Clerk Publishable Key to the .env file')
}

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <ClerkProvider publishableKey={PUBLISHABLE_KEY} afterSignOutUrl="/">
      <App />
    </ClerkProvider>
  </React.StrictMode>,
)
```

app/\_layout.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { ClerkProvider } from '@clerk/clerk-expo'
import { Slot } from 'expo-router'

export default function Layout() {
  const publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY

  if (publishableKey === undefined) {
    throw new Error('Add EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY to your .env file')
  }

  return (
    <ClerkProvider publishableKey={publishableKey}>
      <Slot />
    </ClerkProvider>
  )
}
```

app/root.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
// Other imports

import { ClerkProvider, SignedIn, SignedOut, UserButton, SignInButton } from '@clerk/react-router'

export default function App({ loaderData }: Route.ComponentProps) {
  return (
    <ClerkProvider
      loaderData={loaderData}
      signUpFallbackRedirectUrl="/"
      signInFallbackRedirectUrl="/"
    >
      <header className="flex items-center justify-center py-8 px-4">
        <SignedOut>
          <SignInButton />
        </SignedOut>
        <SignedIn>
          <UserButton />
        </SignedIn>
      </header>
      <main>
        <Outlet />
      </main>
    </ClerkProvider>
  )
}

// Rest of the root.tsx code
```

app/routes/\_\_root.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
  import { Outlet, createRootRoute } from '@tanstack/react-router'
  import { Meta, Scripts } from '@tanstack/start'
  import * as React from 'react'
+ import { ClerkProvider } from '@clerk/tanstack-start'

  export const Route = createRootRoute({
    component: () => {
      return (
        <RootDocument>
          <Outlet />
        </RootDocument>
      )
    },
  })

  function RootDocument({ children }: { children: React.ReactNode }) {
    return (
+     <ClerkProvider>
        <html>
          <head>
            <Meta />
          </head>
          <body>
            {children}
            <Scripts />
          </body>
        </html>
      </ClerkProvider>
+   )
  }
```

## [Properties](https://clerk.com/docs/components/clerk-provider\#properties)

- Name`afterMultiSessionSingleSignOutUrl`Type`string`Description





The full URL or path to navigate to after a signing out from a currently active account in a multi-session app.

- Name`afterSignOutUrl`Type`string`Description





The full URL or path to navigate to after a successful sign-out.

- Name`allowedRedirectOrigins`Type`Array<string | RegExp>`Description





An optional array of domains to validate user-provided redirect URLs against. If no match is made, the redirect is considered unsafe and the default redirect will be used with a warning logged in the console.

- Name`allowedRedirectProtocols`Type`Array<string>`Description





An optional array of protocols to validate user-provided redirect URLs against. If no match is made, the redirect is considered unsafe and the default redirect will be used with a warning logged in the console.

- Name`appearance`Type`Appearance | undefined`Description





Optional object to style your components. Will only affect [Clerk components](https://clerk.com/docs/components/overview) and not [Account Portal](https://clerk.com/docs/account-portal/overview) pages.

- Name`clerkJSUrl`Type`string`Description





Define the URL that `@clerk/clerk-js` should be hot-loaded from.

- Name`clerkJSVariant`Type`'headless' | ''`Description





If your web application only uses [control components](https://clerk.com/docs/components/overview#control-components), you can set this value to `headless` and load a minimal ClerkJS bundle for optimal page performance.

- Name`clerkJSVersion`Type`string`Description





Define the npm version for `@clerk/clerk-js`.

- Name`domain`Type`string | ((url: URL) => boolean)`Description





**Required if your application is a satellite application.** Sets the domain of the satellite application.

- Name`dynamic`Type`boolean`Description





(For Next.js only) Indicates whether or not Clerk should make dynamic auth data available based on the current request. Defaults to `false`. Opts the application into dynamic rendering when `true`. For more information, see [Next.js rendering modes and Clerk](https://clerk.com/docs/references/nextjs/rendering-modes).

- Name`initialState`Type`InitialState`Description





Provide an initial state of the Clerk client during server-side rendering. You don't need to set this value yourself unless you're [developing an SDK](https://clerk.com/docs/references/sdk/overview).

- Name`isSatellite`Type`boolean | ((url: URL) => boolean)`Description





Whether the application is a satellite application.

- Name`localization`Type`Localization | undefined`Description





Optional object to localize your components. Will only affect [Clerk components](https://clerk.com/docs/components/overview) and not [Account Portal](https://clerk.com/docs/account-portal/overview) pages.

- Name`nonce`Type`string`Description





This nonce value will be passed to the `@clerk/clerk-js` script tag. Use it to implement a [strict-dynamic CSP](https://clerk.com/docs/security/clerk-csp#implementing-a-strict-dynamic-csp). Requires the `dynamic` prop to also be set.

- Name`publishableKey`Type`string`Description





The Clerk Publishable Key for your instance. This can be found on the [**API keys**⁠](https://dashboard.clerk.com/last-active?path=api-keys) page in the Clerk Dashboard.

- Name`proxyUrl`Type`string | ((url: URL) => string)`Description





The URL that Clerk will proxy requests to. Required for applications that run behind a reverse proxy. Can be either a relative path ( `/__clerk`) or a full URL ( `https://<your-domain>/__clerk`).

- Name`routerPush`Type`(to: string) => Promise<unknown> | void`Description





A function which takes the destination path as an argument and performs a "push" navigation.

- Name`routerReplace`Type`(to: string) => Promise<unknown> | void`Description





A function which takes the destination path as an argument and performs a "replace" navigation.

- Name`sdkMetadata`Type`{ name: string; version: string; environment: string }`Description





Contains information about the SDK that the host application is using. You don't need to set this value yourself unless you're [developing an SDK](https://clerk.com/docs/references/sdk/overview).

- Name`selectInitialSession`Type`(client: ClientResource) => ActiveSessionResource | null`Description





By default, the last active session is used during client initialization. This option allows you to override that behavior, e.g. by selecting a specific session.

- Name`signInFallbackRedirectUrl`Type`string`Description





The fallback URL to redirect to after the user signs in, if there's no `redirect_url` in the path already. Defaults to `/`. It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.

- Name`signUpFallbackRedirectUrl`Type`string`Description





The fallback URL to redirect to after the user signs up, if there's no `redirect_url` in the path already. Defaults to `/`. It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.

- Name`signInForceRedirectUrl`Type`string`Description





If provided, this URL will always be redirected to after the user signs in. It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.

- Name`signUpForceRedirectUrl`Type`string`Description





If provided, this URL will always be redirected to after the user signs up. It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.

- Name`signInUrl`Type`string`Description





This URL will be used for any redirects that might happen and needs to point to your primary application on the client-side. This option is optional for production instances. **It is required to be set for a satellite application in a development instance.** It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.

- Name`signUpUrl`Type`string`Description





This URL will be used for any redirects that might happen and needs to point to your primary application on the client-side. This option is optional for production instances but **must be set for a satellite application in a development instance.** It's recommended to use [the environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#sign-in-and-sign-up-redirects) instead.

- Name`standardBrowser`Type`boolean`Description





By default, ClerkJS is loaded with the assumption that cookies can be set (browser setup). On native platforms this value must be set to `false`.

- Name`supportEmail`Type`string`Description





Optional support email for display in authentication screens. Will only affect [Clerk components](https://clerk.com/docs/components/overview) and not [Account Portal](https://clerk.com/docs/account-portal/overview) pages.

- Name`syncHost`Type`string`Description





**Chrome Extension only** To enable, pass the URL of the web application that the extension will sync the authentication state from. See the [dedicated guide](https://clerk.com/docs/references/chrome-extension/sync-host) for more information.

- Name`telemetry`Type`false | { disabled: boolean; debug: boolean } | undefined`Description





Controls whether or not Clerk will collect [telemetry data](https://clerk.com/docs/telemetry). If set to `debug`, telemetry events are only logged to the console and not sent to Clerk.

- Name`touchSession`Type`boolean`Description





By default, [the Clerk Frontend API `touch` endpoint⁠](https://clerk.com/docs/reference/frontend-api/tag/Sessions#operation/touchSession) is called during page focus to keep the last active session alive. This option allows you to disable this behavior.

- Name`waitlistUrl`Type`string`Description





The full URL or path to the waitlist page. If `undefined`, will redirect to the [Account Portal waitlist page](https://clerk.com/docs/account-portal/overview#waitlist).


## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/components/clerk-provider.mdx)

Last updated onFeb 25, 2025

Support

## Password Protection Guidelines
[Skip to main content](https://clerk.com/docs/security/password-protection#main)

1. [Password rules](https://clerk.com/docs/security/password-protection#password-rules)
2. [Reject compromised passwords](https://clerk.com/docs/security/password-protection#reject-compromised-passwords)
1. [Reject compromised passwords on sign-in](https://clerk.com/docs/security/password-protection#reject-compromised-passwords-on-sign-in)
3. [Password strength](https://clerk.com/docs/security/password-protection#password-strength)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/security/password-protection.mdx)

# Password protection and rules

## [Password rules](https://clerk.com/docs/security/password-protection\#password-rules)

Clerk refers to the National Institute of Standards and Technology (NIST) guidelines to determine the character rules for passwords:

Note

Verifiers SHALL require subscriber-chosen memorized secrets to be at least 8 characters in length. Verifiers SHOULD permit subscriber-chosen memorized secrets at least 64 characters in length. All printing ASCII [RFC 20⁠](https://datatracker.ietf.org/doc/html/rfc20) characters as well as the space character SHOULD be acceptable in memorized secrets. Unicode [ISO/IEC 10646⁠](https://en.wikipedia.org/wiki/Universal_Coded_Character_Set) characters SHOULD be accepted as well. To make allowances for likely mistyping, verifiers MAY replace multiple consecutive space characters with a single space character prior to verification, provided that the result is at least 8 characters in length. Truncation of the secret SHALL NOT be performed. For purposes of the above length requirements, each Unicode code point SHALL be counted as a single character.

[NIST Special Publication 800-63B⁠](https://pages.nist.gov/800-63-3/sp800-63b.html#sec5)

While these rules might seem lax independently, NIST's additional compromised password protection guidelines do more to prevent the use of unsafe passwords.

Also, bear in mind, that passwords are not a requirement for using Clerk. Applications can be configured to use a passwordless strategy that relies on your users being sent one-time passwords instead.

## [Reject compromised passwords](https://clerk.com/docs/security/password-protection\#reject-compromised-passwords)

Clerk refers to the National Institute of Standards and Technology (NIST) guidelines to determine its handling of compromised passwords:

When processing requests to establish and change memorized secrets, verifiers SHALL compare the prospective secrets against a list that contains values known to be commonly-used, expected, or compromised. For example, the list MAY include, but is not limited to: [NIST Special Publication 800-63B⁠](https://pages.nist.gov/800-63-3/sp800-63b.html#sec5)

- Passwords obtained from previous breach corpuses.

Specifically, Clerk contracts with [HaveIBeenPwned⁠](https://haveibeenpwned.com/) to compare prospective passwords against its corpus of over 10 billion compromised credentials.

Rejection of compromised passwords is enabled by default for sign-up and password changes. It is disabled by default for sign-in - learn more in the [Reject compromised passwords on sign-in](https://clerk.com/docs/security/password-protection#reject-compromised-passwords-on-sign-in) section.

To configure this feature:

1. In the Clerk Dashboard, navigate to the [**Email, phone, username**⁠](https://dashboard.clerk.com/last-active?path=user-authentication/email-phone-username) page.
2. In the **Authentication strategies** section, next to **Password**, select the settings icon.
3. You can enable or disable **Reject compromised passwords on sign-up or password change, powered by HaveIBeenPwned**.
4. You can also enable or disable **Reject compromised passwords also on sign-in**. Learn more about this feature in the following section.

### [Reject compromised passwords on sign-in](https://clerk.com/docs/security/password-protection\#reject-compromised-passwords-on-sign-in)

Clerk also offers the ability to check for compromised passwords on sign-in.
When the user provides the correct password, if it has been found in online breach data, they will be prompted to reset their password.

This is useful for blocking password sign-ins in the case that:

- The password has recently been added to the compromised password database
- The user was able to set a compromised password because protection was off at the time
- The user was migrated to Clerk along with their existing password digest

Note

Password reset for compromised passwords uses the same flow as "forgot password". The user will need to authenticate first via an OTP code sent to their email or phone and only then they will be able to set a new — more secure — password.

#### [Limitations](https://clerk.com/docs/security/password-protection\#limitations)

- Before enabling rejection of compromised passwords on sign-in, ensure your app has support for the password reset flow. You can do so by using Clerk components or [implementing a custom flow](https://clerk.com/docs/custom-flows/forgot-password#prompting-users-to-reset-compromised-passwords-during-sign-in).
- If the user has no way of resetting their password — such as when your application does not require an email, phone number, or other communication method for sign-up — Clerk will not reject compromised passwords on sign-in.

## [Password strength](https://clerk.com/docs/security/password-protection\#password-strength)

Clerk uses [zxcvbn-ts⁠](https://zxcvbn-ts.github.io/zxcvbn/) for estimating the strength of passwords and leverages the [Open Web Application Security Project (OWASP) guidelines⁠](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html) to determine its handling of password strength:

Note

OWASP recommends using a password strength estimation library like zxcvbn to evaluate the strength of passwords. This can help identify weak passwords and prevent their use.

For users that set an average/weak password that complies with your organization's policies but could be stronger - Clerk also provides a gentle recommendation to use a stronger password.

Note

OWASP recommends providing feedback to users on the strength of their password and offering suggestions for improvement. This can help users create stronger passwords and improve the overall security of the application.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/security/password-protection.mdx)

Last updated onDec 4, 2024

Support

## Clerk Migration Overview
[Skip to main content](https://clerk.com/docs/deployments/migrate-overview#main)

1. [Basic export / import](https://clerk.com/docs/deployments/migrate-overview#basic-export-import)
1. [Considerations](https://clerk.com/docs/deployments/migrate-overview#considerations)
2. [Trickle migration](https://clerk.com/docs/deployments/migrate-overview#trickle-migration)
1. [Considerations](https://clerk.com/docs/deployments/migrate-overview#considerations-2)
3. [Migration tools](https://clerk.com/docs/deployments/migrate-overview#migration-tools)
4. [Migration guides](https://clerk.com/docs/deployments/migrate-overview#migration-guides)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/migrate-overview.mdx)

# Migrate to Clerk from another platform

There are typically two main strategies for migrating your existing user management from a different platform into Clerk:

- [Basic Export / Import](https://clerk.com/docs/deployments/migrate-overview#basic-export-import)
- [Trickle migration](https://clerk.com/docs/deployments/migrate-overview#trickle-migration)

Each of these have trade-offs you'll need to consider on behalf of for your application and its users.

## [Basic export / import](https://clerk.com/docs/deployments/migrate-overview\#basic-export-import)

With basic export / import, you're taking an export from your previous tool and importing data into Clerk. The most common way to handle this is by making use of the [`CreateUser`⁠](https://clerk.com/docs/reference/backend-api/tag/Users#operation/CreateUser) Backend API endpoint. It's important to note that the `CreateUser` endpoint is rate limited. For more information, see the [guide on rate limits](https://clerk.com/docs/backend-requests/resources/rate-limits#backend-api-requests).

You'll also need to provide your `password_hasher` value (The hashing algorithm used to generate the password digest) and in some instances Clerk will transparently upgrade your users' password hashes to the more secure Bcrypt hashing algorithm. More details on this topic are available in the [Backend API reference docs⁠](https://clerk.com/docs/reference/backend-api/tag/Users#operation/CreateUser!path=password_hasher&t=request).

Note

If you are expecting to import 100k+ users, we recommend reaching out to [support@clerk.dev](mailto:support@clerk.dev) where we can coordinate increases to the rate limits and ensure a seamless import of your data.

### [Considerations](https://clerk.com/docs/deployments/migrate-overview\#considerations)

When evaluating the Basic Import / Export workflow there are a few tradeoffs you'll need to consider.

#### [Data consistency](https://clerk.com/docs/deployments/migrate-overview\#data-consistency)

Consider that any export of your data will be a snapshot in time. This means that there is a potential of your data being out of sync at the time of import. To work around this you might script and coordinate the export and import actions to be as close in time as possible, or you might schedule some kind of downtime or maintenance window to complete this action. Be sure to consider Clerk API rate-limits when evaluating a potentially time-sensitive migration approach.

#### [Active sessions / session management](https://clerk.com/docs/deployments/migrate-overview\#active-sessions-session-management)

Another consideration is centered around how you handle session management. While most authentication providers don't provide session management out-of-the-box, Clerk does. This means that when you switch over to using Clerk you'll be changing the system that handles your users' active sessions. This will likely end any currently active sessions initiated by your previous session management service (unless you are able to gracefully handle this somehow within your architecture).

#### [Foreign keys](https://clerk.com/docs/deployments/migrate-overview\#foreign-keys)

In your previous system, you likely had some kind of ID / Foreign Key that you were using. As you migrate data into Clerk, you might want to continue referencing that previous ID alongside Clerk's provided user IDs. While each use case might have some variation, a common strategy is to store previous IDs as an `external_id`. You can then use Clerk's JWT customization to enrich a `userId` value with the `external_id` when present, or fallback to using Clerk's native ID when dealing with new users who don't have an `external_id` from your legacy system. You can configure this in the [**Sessions**⁠](https://dashboard.clerk.com/last-active?path=sessions) page in the Clerk Dashboard. Under **Customize session token**, select **Edit** and add the following:

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
{
  "userId": "{{user.external_id || user.id}}"
}
```

## [Trickle migration](https://clerk.com/docs/deployments/migrate-overview\#trickle-migration)

With a trickle migration you are slowly migrating your users from your previous system into Clerk. Depending on your application's needs this can be a great way to accomplish migration in a gradual and more controlled way. With a trickle migration, you are keeping both systems running for some period of time, handling the transition between systems opaquely to your users, and then eventually cutting over fully to Clerk as your user and session management system or record. By handling this transition gradually you'll maintain more control and put less pressure on a single coordinated event.

### [Considerations](https://clerk.com/docs/deployments/migrate-overview\#considerations-2)

As with the Basic Import / Export workflow there are a tradeoffs you'll need to consider, to determine which strategy is best for your application.

#### [The cost and overhead of running two systems in parallel](https://clerk.com/docs/deployments/migrate-overview\#the-cost-and-overhead-of-running-two-systems-in-parallel)

Because you'll need both systems available when doing a gradual migration, there is naturally additional short-term costs related to having both running systems at the same time.

Note

It's important to note that Clerk only charges by _Monthly Active Users_ and never based on your total number of Users in the user table – so during this period you'll only be charged for users who create an active session within Clerk. Head to our [pricing page](https://clerk.com/pricing) to get the full details on how Clerk charges.

#### [Determining the appropriate length of time](https://clerk.com/docs/deployments/migrate-overview\#determining-the-appropriate-length-of-time)

As part of the trickle migration, you'll need to determine an appropriate length of time for the migration to take place. For some applications this might be a few weeks, but for others it might be more appropriate to run this for months. Your hard-costs, coordination costs, underlying complexity, and the amount of active users you expect in your migration time-window should guide your decision here.

#### [Dealing with the delta](https://clerk.com/docs/deployments/migrate-overview\#dealing-with-the-delta)

A trickle migration is great for upgrading active users and sessions to take advantage of Clerk but there will always be some users who won't create an active session within the migration window and therefore will need to be migrated by other means, typically via [Basic Import / Export](https://clerk.com/docs/deployments/migrate-overview#basic-export-import). However, the benefit of a trickle migration is that the risk of coordination becomes much lower as the delta users are likely to be less active, are less in numbers, and therefore the risk of data de-synchronization is reduced.

## [Migration tools](https://clerk.com/docs/deployments/migrate-overview\#migration-tools)

To aid in basic migrations, Clerk provides an open-source script that takes a JSON file as input, containing a list of users, and creates a user in Clerk using the Backend API. The script respects the [backend rate limits](https://clerk.com/docs/backend-requests/resources/rate-limits#backend-api-requests) and gracefully handles errors. We suggest you customize the [Zod schema⁠](https://github.com/clerk/migration-script/blob/main/index.ts#L25-L43) to your application's needs.

To use Clerk's migration script, clone the [repository⁠](https://github.com/clerk/migration-script) and follow the instructions in the `README`.

## [Migration guides](https://clerk.com/docs/deployments/migrate-overview\#migration-guides)

Clerk is hard at work writing up more specific migration guides and tools. If you're interested in specific guides, contact us at [https://feedback.clerk.com⁠](https://feedback.clerk.com/)

### [Firebase](https://clerk.com/docs/deployments/migrate-from-firebase)

Learn how to migrate from Firebase to Clerk quickly and easily.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/deployments/migrate-overview.mdx)

Last updated onDec 4, 2024

Support

## Clerk with Astro
[Skip to main content](https://clerk.com/docs/references/astro/react#main)

1. [Install `@astrojs/react`](https://clerk.com/docs/references/astro/react#install-astrojs-react)
2. [Update `astro.config.mjs`](https://clerk.com/docs/references/astro/react#update-astro-config-mjs)
3. [Use Clerk components](https://clerk.com/docs/references/astro/react#use-clerk-components)
4. [Use stores in your React components](https://clerk.com/docs/references/astro/react#use-stores-in-your-react-components)
5. [Next steps](https://clerk.com/docs/references/astro/react#next-steps)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/astro/react.mdx)

# Use Clerk with Astro and React

Astro provides an [integration⁠](https://docs.astro.build/en/guides/integrations-guide/react/) that enables server-side rendering and client-side hydration for your React components. This guide demonstrates how to use Clerk with Astro and React.

If you have not set up your Astro application to work with Clerk, see the [quickstart guide](https://clerk.com/docs/quickstarts/astro).

## [Install `@astrojs/react`](https://clerk.com/docs/references/astro/react\#install-astrojs-react)

Add the [Astro React integration⁠](https://docs.astro.build/en/guides/integrations-guide/react/) to your project:

npm

yarn

pnpm

bun

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
npx astro add react
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
yarn astro add react
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
pnpm astro add react
```

terminal

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
bun astro add react
```

## [Update `astro.config.mjs`](https://clerk.com/docs/references/astro/react\#update-astro-config-mjs)

Add Clerk and React integrations to your Astro configuration:

astro.config.mjs

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { defineConfig } from 'astro/config'
import node from '@astrojs/node'
import react from '@astrojs/react'
import clerk from '@clerk/astro'

export default defineConfig({
  integrations: [clerk(), react()],
  output: 'server',
  adapter: node({ mode: 'standalone' }),
})
```

## [Use Clerk components](https://clerk.com/docs/references/astro/react\#use-clerk-components)

You can use the [prebuilt components](https://clerk.com/docs/components/overview) in your Astro pages or regular React components.

### [Astro pages](https://clerk.com/docs/references/astro/react\#astro-pages)

The following example demonstrates how to use Clerk components in Astro pages.

src/layouts/SiteLayout.astro

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
---
import { SignedIn, SignedOut, UserButton, SignInButton } from '@clerk/astro/react'
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
  </head>
  <body>
    <header>
      <nav>
        <SignedOut client:load>
          <SignInButton client:load mode="modal" />
        </SignedOut>
        <SignedIn client:load>
          <UserButton client:load />
        </SignedIn>
      </nav>
    </header>
    <article>
      <slot />
    </article>
  </body>
</html>
```

### [React components](https://clerk.com/docs/references/astro/react\#react-components)

The following example demonstrates how to use Clerk components in React components.

src/components/Header.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { SignInButton, SignedIn, SignedOut, UserButton } from '@clerk/astro/react'

export default function Header() {
  return (
    <>
      <p>My App</p>
      <SignedOut>
        <SignInButton />
      </SignedOut>
      <SignedIn>
        <UserButton />
      </SignedIn>
    </>
  )
}
```

## [Use stores in your React components](https://clerk.com/docs/references/astro/react\#use-stores-in-your-react-components)

Clerk Astro provides a set of useful [stores](https://clerk.com/docs/references/astro/overview#client-side-helpers) that give you access to the [`Clerk`⁠](https://clerk.com/docs/references/javascript/clerk) object, and helper methods for signing in and signing up.

The following example demonstrates how to use a Clerk Astro store.

src/components/Header.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
import { $userStore } from '@clerk/astro/client'

export default function Username() {
  const user = useSyncExternalStore($userStore.listen, $userStore.get, $userStore.get)
  return <>{user?.firstName}</>
}
```

## [Next steps](https://clerk.com/docs/references/astro/react\#next-steps)

### [Readuserandsessiondata](https://clerk.com/docs/references/astro/read-session-data)

Learn how to use Clerk's hooks and helpers to access the active session and user data in your Astro application.

### [Client-sidehelpers](https://clerk.com/docs/references/astro/overview\#client-side-helpers)

Learn more about Astro client-side helpers and how to use them.

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/references/astro/react.mdx)

Last updated onFeb 21, 2025

Support

## Clerk Upgrade Guides
[Skip to main content](https://clerk.com/docs/upgrade-guides/overview#main)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/upgrade-guides/overview.mdx)

# Upgrade guides overview

Upgrade your application to newer versions of Clerk by following the guides found in the sidenav.

Also be sure to read our [long term support policy](https://clerk.com/docs/upgrade-guides/long-term-support) to understand which level of support for your version you can expect.

If you run into problems while upgrading, [contact support⁠](https://clerk.com/contact/support).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/upgrade-guides/overview.mdx)

Last updated onFeb 25, 2025

Support

## useOrganization Hook Guide
[Skip to main content](https://clerk.com/docs/hooks/use-organization#main)

1. [Parameters](https://clerk.com/docs/hooks/use-organization#parameters)
1. [Shared properties](https://clerk.com/docs/hooks/use-organization#shared-properties)
2. [Returns](https://clerk.com/docs/hooks/use-organization#returns)
1. [`PaginatedResources`](https://clerk.com/docs/hooks/use-organization#paginated-resources)
3. [How to use the `useOrganization()` hook](https://clerk.com/docs/hooks/use-organization#how-to-use-the-use-organization-hook)
1. [Expand and paginate attributes](https://clerk.com/docs/hooks/use-organization#expand-and-paginate-attributes)
2. [Infinite pagination](https://clerk.com/docs/hooks/use-organization#infinite-pagination)
3. [Simple pagination](https://clerk.com/docs/hooks/use-organization#simple-pagination)

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/hooks/use-organization.mdx)

# useOrganization()

The `useOrganization()` hook retrieves attributes of the currently active organization.

## [Parameters](https://clerk.com/docs/hooks/use-organization\#parameters)

`useOrganization()` accepts a single object with the following optional properties:

- Name`invitations`Type`true | { status?: 'pending' | 'accepted' | 'revoked' } & { SharedProperties }`Description





If set to `true`, all default properties will be used.



Otherwise, accepts an object with the following optional properties:



- `status`: A string that filters the invitations by the provided status.
- Any of the properties described in [Shared properties](https://clerk.com/docs/hooks/use-organization#shared-properties).

- Name`membershipRequests`Type`true | { status?: 'pending' | 'accepted' | 'revoked' } & { SharedProperties }`Description





If set to `true`, all default properties will be used. Otherwise, accepts an object with the following optional properties:



- `status`: A string that filters the membership requests by the provided status.
- Any of the properties described in [Shared properties](https://clerk.com/docs/hooks/use-organization#shared-properties).

- Name`memberships`Type`true | { role?: OrganizationCustomRoleKey[]; query?: string } & { SharedProperties }`Description





If set to `true`, all default properties will be used.



Otherwise, accepts an object with the following optional properties:



- `role`: An array of [`OrganizationCustomRoleKey`](https://clerk.com/docs/references/javascript/types/organization-custom-role-key).
- `query`: A string that filters the memberships by the provided string.
- Any of the properties described in [Shared properties](https://clerk.com/docs/hooks/use-organization#shared-properties).

- Name`domains`Type`true | { enrollmentMode?: 'manual_invitation' | 'automatic_invitation' | 'automatic_suggestion' } & { SharedProperties }`Description





If set to `true`, all default properties will be used.



Otherwise, accepts an object with the following optional properties:



- `enrollmentMode`: A string that filters the domains by the provided enrollment mode.
- Any of the properties described in [Shared properties](https://clerk.com/docs/hooks/use-organization#shared-properties).

Warning

By default, the `memberships`, `invitations`, `membershipRequests`, and `domains` attributes aren't populated. To fetch and paginate the data, you must pass `true` or an object with the desired properties.

### [Shared properties](https://clerk.com/docs/hooks/use-organization\#shared-properties)

Optional properties that are shared across the `invitations`, `membershipRequests`, `memberships`, and `domains` properties.

- Name`initialPage`Type`number`Description





A number that specifies which page to fetch. For example, if `initialPage` is set to 10, it will skip the first 9 pages and fetch the 10th page. Defaults to `1`.

- Name`pageSize`Type`number`Description





A number that specifies the maximum number of results to return per page. Defaults to `10`.

- Name`keepPreviousData`Type`boolean`Description





If `true`, the previous data will be kept in the cache until new data is fetched. Defaults to `false`.

- Name`infinite`Type`boolean`Description





If `true`, newly fetched data will be appended to the existing list rather than replacing it. Useful for implementing infinite scroll functionality. Defaults to `false`.


Note

These attributes are updating automatically and will re-render their respective components whenever you set a different organization using the [`setActive({ organization })`](https://clerk.com/docs/references/javascript/clerk#set-active) method or update any of the memberships or invitations. No need for you to manage updating anything manually.

## [Returns](https://clerk.com/docs/hooks/use-organization\#returns)

- Name`isLoaded`Type`boolean`Description





A boolean that indicates whether Clerk has completed initialization. Initially `false`, becomes `true` once Clerk loads.

- Name`organization`Type[`Organization`](https://clerk.com/docs/references/javascript/organization)Description





The currently active organization.

- Name`membership`Type[`OrganizationMembership`](https://clerk.com/docs/references/javascript/types/organization-membership)Description





The current organization membership.

- Name`memberships`Type`PaginatedResources<OrganizationMembership>`Description





Includes a paginated list of the organization's memberships.

- Name`invitations`Type`PaginatedResources<OrganizationInvitation>`Description





Includes a paginated list of the organization's invitations.

- Name`membershipRequests`Type`PaginatedResources<OrganizationMembershipRequest>`Description





Includes a paginated list of the organization's membership requests.

- Name`domains`Type`PaginatedResources<OrganizationDomain>`Description





Includes a paginated list of the organization's domains.


### [`PaginatedResources`](https://clerk.com/docs/hooks/use-organization\#paginated-resources)

- Name`data`Type`T[]`Description





An array that contains the fetched data. For example, for the `memberships` attribute, `data` will be an array of [`OrganizationMembership`](https://clerk.com/docs/references/javascript/types/organization-membership) objects.

- Name`count`Type`number`Description





The total count of data that exist remotely.

- Name`isLoading`Type`boolean`Description





A boolean that is `true` if there is an ongoing request and there is no fetched data.

- Name`isFetching`Type`boolean`Description





A boolean that is `true` if there is an ongoing request or a revalidation.

- Name`isError`Type`boolean`Description





A boolean that indicates the request failed.

- Name`page`Type`number`Description





The current page.

- Name`pageCount`Type`number`Description





The total amount of pages. It is calculated based on `count`, `initialPage`, and `pageSize`.

- Name`fetchPage`Type`(page: number) => void`Description





A function that triggers a specific page to be loaded.

- Name`fetchPrevious`Type`() => void`Description





A function that triggers the previous page to be loaded. This is the same as `fetchPage(page => Math.max(0, page - 1))`.

- Name`fetchNext`Type`() => void`Description





A function that triggers the next page to be loaded. This is the same as `fetchPage(page => Math.min(pageCount, page + 1))`.

- Name`hasNextPage`Type`boolean`Description





A boolean that indicates if there are available pages to be fetched.

- Name`hasPreviousPage`Type`boolean`Description





A boolean that indicates if there are available pages to be fetched.

- Name`revalidate`Type`() => void`Description





A function that triggers a revalidation of the current page.

- Name`setData`Type`(data: any[]) => void`Description





A function that allows you to set the data manually.


## [How to use the `useOrganization()` hook](https://clerk.com/docs/hooks/use-organization\#how-to-use-the-use-organization-hook)

### [Expand and paginate attributes](https://clerk.com/docs/hooks/use-organization\#expand-and-paginate-attributes)

To keep network usage to a minimum, developers are required to opt-in by specifying which resource they need to fetch and paginate through. By default, the `memberships`, `invitations`, `membershipRequests`, and `domains` attributes are not populated. You must pass `true` or an object with the desired [properties](https://clerk.com/docs/hooks/use-organization#shared-properties) to fetch and paginate the data.

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
// invitations.data will never be populated.
const { invitations } = useOrganization()

// Use default values to fetch invitations, such as initialPage = 1 and pageSize = 10
const { invitations } = useOrganization({
  invitations: true,
})

// Pass your own values to fetch invitations
const { invitations } = useOrganization({
  invitations: {
    pageSize: 20,
    initialPage: 2, // skips the first page
  },
})

// Aggregate pages in order to render an infinite list
const { invitations } = useOrganization({
  invitations: {
    infinite: true,
  },
})
```

### [Infinite pagination](https://clerk.com/docs/hooks/use-organization\#infinite-pagination)

The following example demonstrates how to use the `infinite` property to fetch and append new data to the existing list. The `memberships` attribute will be populated with the first page of the organization's memberships. When the "Load more" button is clicked, the `fetchNext` helper function will be called to append the next page of memberships to the list.

React

Next.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { useOrganization } from '@clerk/clerk-react'

export default function MemberList() {
  const { memberships } = useOrganization({
    memberships: {
      infinite: true, // Append new data to the existing list
      keepPreviousData: true, // Persist the cached data until the new data has been fetched
    },
  })

  if (!memberships) {
    // Handle loading state
    return null
  }

  return (
    <div>
      <h2>Organization members</h2>
      <ul>
        {memberships.data?.map((membership) => (
          <li key={membership.id}>
            {membership.publicUserData.firstName} {membership.publicUserData.lastName} &lt;
            {membership.publicUserData.identifier}&gt; :: {membership.role}
          </li>
        ))}
      </ul>

      <button
        disabled={!memberships.hasNextPage} // Disable the button if there are no more available pages to be fetched
        onClick={memberships.fetchNext}
      >
        Load more
      </button>
    </div>
  )
}
```

app/users/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { useOrganization } from '@clerk/nextjs'

export default function MemberListPage() {
  const { memberships } = useOrganization({
    memberships: {
      infinite: true, // Append new data to the existing list
      keepPreviousData: true, // Persist the cached data until the new data has been fetched
    },
  })

  if (!memberships) {
    // Handle loading state
    return null
  }

  return (
    <div>
      <h2>Organization members</h2>
      <ul>
        {memberships.data?.map((membership) => (
          <li key={membership.id}>
            {membership.publicUserData.firstName} {membership.publicUserData.lastName} &lt;
            {membership.publicUserData.identifier}&gt; :: {membership.role}
          </li>
        ))}
      </ul>

      <button
        disabled={!memberships.hasNextPage} // Disable the button if there are no more available pages to be fetched
        onClick={memberships.fetchNext}
      >
        Load more
      </button>
    </div>
  )
}
```

### [Simple pagination](https://clerk.com/docs/hooks/use-organization\#simple-pagination)

The following example demonstrates how to use the `fetchPrevious` and `fetchNext` helper functions to paginate through the data. The `memberships` attribute will be populated with the first page of the organization's memberships. When the "Previous page" or "Next page" button is clicked, the `fetchPrevious` or `fetchNext` helper function will be called to fetch the previous or next page of memberships.

Notice the difference between this example's pagination and the infinite pagination example above.

React

Next.js

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)] *:after:no-hover:ml-7
import { useOrganization } from '@clerk/clerk-react'

export default function MemberList() {
  const { memberships } = useOrganization({
    memberships: {
      keepPreviousData: true, // Persist the cached data until the new data has been fetched
    },
  })

  if (!memberships) {
    // Handle loading state
    return null
  }

  return (
    <div>
      <h2>Organization members</h2>
      <ul>
        {memberships.data?.map((membership) => (
          <li key={membership.id}>
            {membership.publicUserData.firstName} {membership.publicUserData.lastName} &lt;
            {membership.publicUserData.identifier}&gt; :: {membership.role}
          </li>
        ))}
      </ul>

      <button disabled={!memberships.hasPreviousPage} onClick={memberships.fetchPrevious}>
        Previous page
      </button>

      <button disabled={!memberships.hasNextPage} onClick={memberships.fetchNext}>
        Next page
      </button>
    </div>
  )
}
```

app/users/page.tsx

```isolate block w-fit min-w-full *:inline-block *:w-full *:before:pointer-events-none *:before:sticky *:before:left-0 *:before:z-20 *:before:inline-block *:before:select-none *:before:bg-gradient-to-r *:before:from-gray-800 *:after:pointer-events-none *:after:sticky *:after:right-0 *:after:z-10 *:after:inline-block *:after:w-4 *:after:select-none *:after:bg-gradient-to-l *:after:from-gray-800 *:after:from-35% *:after:content-["_"] [counter-reset:line] *:[counter-increment:line] *:before:w-4 *:before:from-35% *:before:content-["_"] sm:*:before:w-11 sm:*:before:from-80% sm:*:before:pr-4 sm:*:before:text-right sm:*:before:text-gray-400 sm:*:before:content-[counter(line)]
'use client'

import { useOrganization } from '@clerk/nextjs'

export default function MemberListPage() {
  const { memberships } = useOrganization({
    memberships: {
      keepPreviousData: true, // Persist the cached data until the new data has been fetched
    },
  })

  if (!memberships) {
    // Handle loading state
    return null
  }

  return (
    <div>
      <h2>Organization members</h2>
      <ul>
        {memberships.data?.map((membership) => (
          <li key={membership.id}>
            {membership.publicUserData.firstName} {membership.publicUserData.lastName} &lt;
            {membership.publicUserData.identifier}&gt; :: {membership.role}
          </li>
        ))}
      </ul>

      <button disabled={!memberships.hasPreviousPage} onClick={memberships.fetchPrevious}>
        Previous page
      </button>

      <button disabled={!memberships.hasNextPage} onClick={memberships.fetchNext}>
        Next page
      </button>
    </div>
  )
}
```

To see the different organization features integrated into one application, take a look at our [organizations demo repository⁠](https://github.com/clerk/organizations-demo).

## Feedback

What did you think of this content?

It was helpfulIt was not helpfulI have feedback

[Edit this page on GitHub](https://github.com/clerk/clerk-docs/edit/main/docs/hooks/use-organization.mdx)

Last updated onMar 10, 2025

Support

