# Studi - AI-Driven Educational App

## Objective
To create an AI-driven educational app that integrates with Canvas LMS, providing personalized learning experiences through vector databases, AI-generated content, and interactive tools.

## Tech Stack

- **Frontend:** Next.js, Tailwind CSS
- **Backend:** Convex
- **Authentication:** Clerk
- **AI and NLP:** LangChain, OpenAI API

## App Requirements

- **User Authentication:** Secure login using Canvas credentials via Clerk.
- **Data Integration:** Seamless integration with Canvas to fetch assignments, files, and modules.
- **Vector Database:** Create a vector space for each class to store and retrieve context-aware information.
- **AI Chatbot:** Contextual chatbot for class-specific queries, with @ referencing for files.
- **Dashboard:** Display upcoming assignments, tests, and progress overview.
- **Artifact Creation:** Generate quizzes, notes, flashcards, and interactive lessons.
- **Search and Retrieval:** Efficient search capabilities using vector databases.

## Features

### Dashboard
- Overview of assignments, upcoming events, and class insights.

### Class-Specific Views
- Start new chats, view old chats, and manage artifacts.

### Artifact Creation
- Support for quizzes, flashcards, and notes.

### Real-Time Function Execution
- AI agents can fetch and update knowledge dynamically.

## Subscription Model

- **Free Plan:** 10-20 cents of usage per user.
- **Paid Plan:** $8 subscription unlocking up to $5 worth of additional usage.

## Convex File Storage
- Used for storing and retrieving documents efficiently.

## Performance Optimization
- Ensure fast response times for simple chats.
- AI agents manage function calls and knowledge updates dynamically.

## Analytics Implementation
- User activity and engagement tracking.

## Database Tables and Schema

### Users
| Field           | Type      |
|----------------|----------|
| id            | Unique identifier |
| name          | String |
| email         | String |
| canvasId      | String |
| universityUrl | String |
| canvasAccessToken | String |

### Documents
| Field           | Type      |
|----------------|----------|
| id            | Unique identifier |
| userId        | Foreign key to Users |
| content       | Text |
| metadata      | JSON |
| vectorEmbedding | Vector data |
| classId       | Foreign key to Classes |

### Chats
| Field           | Type      |
|----------------|----------|
| id            | Unique identifier |
| userId        | Foreign key to Users |
| classId       | Foreign key to Classes |
| createdAt     | DateTime |

### ChatMessages
| Field           | Type      |
|----------------|----------|
| id            | Unique identifier |
| chatId        | Foreign key to Chats |
| userId        | Foreign key to Users |
| content       | Text |
| createdAt     | DateTime |

### Artifacts
| Field           | Type      |
|----------------|----------|
| id            | Unique identifier |
| userId        | Foreign key to Users |
| classId       | Foreign key to Classes |
| type          | Enum (Quiz, Note, Flashcard) |
| content       | JSON |
| createdAt     | DateTime |
| metadata      | JSON |

### Classes
| Field           | Type      |
|----------------|----------|
| id            | Unique identifier |
| userId        | Foreign key to Users (Owner) |
| name          | String |
| createdAt     | DateTime |

## Best Practices

### Code Quality
- Follow clean code principles.
- Use async/await for handling asynchronous operations.
- Implement comprehensive error handling.

### Security
- Ensure data privacy and secure handling of user credentials.

### Scalability
- Design the vector database for efficient scaling.

### Performance
- Optimize data retrieval and AI processing for fast response times.

## Testing

- **Unit Testing:** Test individual components and functions.
- **Integration Testing:** Ensure seamless integration between Canvas, AI, and the app.
- **User Testing:** Conduct usability testing to gather feedback and improve UX.

## UI/UX Design

- **User-Centric Design:** Focus on intuitive navigation and accessibility.
- **Responsive Design:** Ensure compatibility across devices.
- **Visual Consistency:** Maintain a clean and modern UI with white and black themes with emoji-based visual cues.

## Deployment Plan

- **Hosting:** Likely Vercel for frontend and Convex for backend.
- **Mobile Support:** Web app first, mobile support may be added later.
- **Beta Launch:** Initial MVP with a waitlist within a week.
- **Development Tools:** AI-powered code editors like Cursor for assistance.

## Future Features

- **Enhanced Artifact Creation:** Support for interactive websites, Desmos simulations, whiteboards, and collaborative editing.
- **Real-Time Collaboration:** Enable sharing and collaborative editing of chats and artifacts.
- **Expanded AI Capabilities:** More robust knowledge integration for AI-driven learning assistance.
